<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac Rime 輸入法]]></title>
    <url>%2F2019%2F12%2F19%2F206-rime%2F</url>
    <content type="text"><![CDATA[123456brew cask install squirrel # 安裝curl -fsSL https://git.io/rime-install | bash # 安裝東風破bash rime-install double-pinyin # 安裝雙拼bash rime-install emoji # 安裝表情bash rime-install emoji:customize:schema=luna_pinyin # 表情掛載]]></content>
  </entry>
  <entry>
    <title><![CDATA[新 Mac 配置记录]]></title>
    <url>%2F2019%2F11%2F21%2F205-migrate-to-new-mac%2F</url>
    <content type="text"><![CDATA[软件安装 科学上网工具 —— ShadowSocksX-NG | ShadowsocksX-NG-R 重度依赖上网工具 —— Chrome 用了都说好的终端 —— iTerm2 系统开发依赖 —— Command Line Tools 1xcode-select --install 包管理器 —— Homebrew 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 最好用的 shell &amp; 配置 —— zsh &amp; oh-my-zsh 1sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; Vim 1curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh ruby 配置 nodejs 配置 python 配置 scrapy-splash1docker run -p 8050:8050 scrapinghub/splash Xcode Android Studio docker 1brew cask install docker 访问加速 npm 12# 切换为淘宝源npm config set registry https://registry.npm.taobao.org homebrew 12345678910# 切换为清华源git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.gitgit -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitgit -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.gitbrew update# 复原git -C &quot;$(brew --repo)&quot; remote set-url origin https://github.com/Homebrew/brew.gitgit -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/homebrew-core.gitgit -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.gitbrew update GitHub IPAddress.com直接添加以下地址 hosts github.com http://assets-cdn.github.com http://github.global.ssl.fastly.net Pip 源： 豆瓣 (douban) http://pypi.douban.com/simple/ 阿里云 http://mirrors.aliyun.com/pypi/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 12mkdir .pipvi .pip/pip.conf 1234[global]index-url=http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com docker daemon1234567891011121314&#123; &quot;registry-mirrors&quot; : [ &quot;http://ovfftd6p.mirror.aliyuncs.com&quot;, &quot;http://registry.docker-cn.com&quot;, &quot;http://docker.mirrors.ustc.edu.cn&quot;, &quot;http://hub-mirror.c.163.com&quot; ], &quot;insecure-registries&quot; : [ &quot;registry.docker-cn.com&quot;, &quot;docker.mirrors.ustc.edu.cn&quot; ], &quot;debug&quot; : true, &quot;experimental&quot; : true&#125; 配置同步 VS Code settings sync 插件 Finder 在 Finder 标题栏显示完整路径 123defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder# 恢复defaults delete com.apple.finder _FXShowPosixPathInTitle;killall Finder 预览 https://github.com/sindresorhus/quick-look-plugins]]></content>
  </entry>
  <entry>
    <title><![CDATA[RN APP 架构分析]]></title>
    <url>%2F2019%2F11%2F21%2F203-rn-app-architecture%2F</url>
    <content type="text"><![CDATA[基础框架：React Native状态管理：Redux路由管理：react-navigation日志管理：消息提醒：]]></content>
  </entry>
  <entry>
    <title><![CDATA[网络协议]]></title>
    <url>%2F2019%2F11%2F21%2F204-network-protocol%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 支付集成（微信）]]></title>
    <url>%2F2019%2F11%2F21%2F201-react-native-pay-ali%2F</url>
    <content type="text"><![CDATA[参考文章 react-native集成支付宝支付]]></content>
  </entry>
  <entry>
    <title><![CDATA[迁移到腾讯云]]></title>
    <url>%2F2019%2F11%2F21%2F200-migrate-to-tencentcloud%2F</url>
    <content type="text"><![CDATA[这两天腾讯云活动，新用户“2核-4G-5M-50G-3年”只要998，阿里云的服务器也快到期了，赶紧薅个羊毛迁移过去吧。 基本配置1234sudo apt-get update # 更新软件列表sudo apt-get upgrade # 更新软件sudo apt-get install zsh vim gitsudo apt-get install nginx mariadb-server mongodb ZSH123cat /etc/shells # 当前可用 shellecho $SHELL # 当前使用的 shellsudo vim /etc/passwd # 用户配置文件，可以修改所有用户 shell 找到当前用户修改要用的 shell，退出重新登录，将启用新的 shell zsh 启启动时如果当前用户目录下没有 .zshrc 文件，将会询问，我选择用社区最流行版本 VimSSH生成 Key12ssh-keygen # 选择默认项cat .ssh/id_ras.pub # 打印 PublicKey，可以复制到 github 之类的地方使用 添加本地 PublickKey 到服务器12345vim .ssh/authorized_keys# 添加内容ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCdLuMb00+2dfHUCNGJKvSSiEAuXhO8A/ZOVhAF3PhLPTQ6nZZkNl7j3xlRmcAqQmhm8z0xVmtpz9s8n2cAA6+efS715jMn/8wmnwcUZ6xnTAQZPqsuoD3rsGs6JIkHnkhHOqgkXa7XIKim47zR6miNEFQneOnukcsXd8mZmFNGiWzbn2+OCT6iWCI2/Sr0MvpCmuubU1tNgN15eYC87yjBrEFMpYRleF66FhJUx5Dr2xJxif3Kz4KB2Nz1U/p2KF+gx7MyudxJa0WTD+2NzxNkRXRllwU+by4uZ6OmftIvMWKPlkOs2zrqohVYHR/mY6ymic8eSmgBfo/nfimoR2Dt callcter@callcterdeMacBook-Pro.local 配置文件修改——免密登录1234567891011sudo vim /etc/ssh/sshd_config# 修改内容Port xxx # 修改陌生端口后AuthorizedKeysFile .ssh/authorized_keys # 公钥的配置目录PubkeyAuthentication yes # 可以使用公钥登录PasswordAuthentication no # 关闭密码登录# 重启生效sudo service sshd restart Nginx12sudo vim /etc/nginx/nginx.conf # 配置文件/etc/nginx/conf.d/ # 反向代理配置目录 MySQL12sudo mysql_secure_installationsudo mysql -uroot -p 在 MySQL 下执行12create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;; # 创建新的用户，%表示可以从任意远程主机登陆grant all on *.* to &apos;username&apos;@&apos;%&apos;; # 授权，all *.* 表示对所有数据库及表拥有所有权限 1234567sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf# 50-server.cnf 修改配置port your_portbind-address 0.0.0.0systemctl restart mysql NVM &amp; NodeJs1234567891011121314wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bashvim .zshrc# 添加如下内容export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completionsource .zshrcnvm ls-remotenvm install v12.12.0 Python12 code-push-server 配置Frp 内网穿透配置]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 支付集成（iOS内购）]]></title>
    <url>%2F2019%2F11%2F21%2F202-react-native-pay-iap%2F</url>
    <content type="text"><![CDATA[到目前为止，我们的内购还没上线，先把坑记下来，请按步骤进行。文章没有截图等详细的步骤，仅仅是一个流程，然后附带一些可以参考的文章，哪怕是一个新手，也可以按照这个流程完成内购的开发，我就是个新手… 第二天就过审了，开心… 坑们 创建新应用内购买项目需要提交新的构建版本，但是不用提交审核，不用提交审核，不用提交审核，即可沙箱测试 每个商品ID都是唯一的，删掉了之后也不能用了 1. 银行协议填写想要开通应用付费或者添加应用内购买项目，首先要完善付费协议，这是一篇非常详细的介绍 《2019年苹果开发者申请IOS内购银行协议填写教程》，一步步走下来没有问题。 2. 开通应用内购买 创建的 APP ID 需要勾选 “In-App Purchase” Xcode 中开启 “In-App Purchase” 功能 3. 创建应用内购买项目操作步骤这篇文章《iOS 内购（In-App Purchase）总结》说得很明了，只需要看文章的添加应用内购买项目的部分就可以了。 4. 内购功能开发我选择的组件是 react-native-iap，请仔细阅读 readme。 基本内容如下： 12345initConnection // 初始化连接purchaseUpdatedListener &amp; purchaseErrorListener // 购买监听getProducts ｜ getSubscriptions // 商品或订阅列表获取requestPurchase ｜ requestSubscription // 购买商品或订阅finishTransactionIOS // 确认订单 5. 沙箱测试5.1 创建沙箱测试账号如《iOS 内购（In-App Purchase）总结》的“配置沙箱测试帐号” 5.2 提交新的构建版本添加新的应用内购买项目时，必须要提交新的构建版本，但是不需要提交审核，在 “等待提交” 状态下，将新的应用内购买项目添加到版本中，即可进行沙箱测试 5.3 进行沙箱测试参见《【iOS】苹果IAP(内购)中沙盒账号使用注意事项》 6. 应用上架可能会被退回哟，按反馈改进就行了… 7. 服务器端流程补充先吐槽一下苹果的IAP服务，慢且不稳定，而且在设计时完全没考虑开发者的后端验证，直接在APP内完成所有流程，相对于支付宝、微信的流程来说，安全性及可靠性真的是差很多，但是无可奈何… 我们的流程： APP 请求服务器下单，生成订单号 APP 向 App Store 购买产品 APP 获取到 App Store 的购买回调，拿到交易及收据信息 APP 发送订单号和收据信息到服务器 服务器向 App Store 验证订单是否成功，成功后返回给 APP APP 收到服务器的返回结果，结束交易 这篇文章比较清晰《iOS 内购服务器端验证是否支付成功方法》 参考文章 2019年苹果开发者申请IOS内购银行协议填写教程 iOS 内购（In-App Purchase）总结 【iOS】苹果IAP(内购)中沙盒账号使用注意事项 iOS 内购服务器端验证是否支付成功方法]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用 Python 写爬虫]]></title>
    <url>%2F2019%2F11%2F21%2F190-python-crawler%2F</url>
    <content type="text"><![CDATA[工具 requests 网络请求封装 beautifulsoup4 页面解析 lxml 网页编码 selenium 模拟浏览器 tqdm 进度条]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native WebView 调试]]></title>
    <url>%2F2019%2F11%2F21%2F192-react-native-webview-debug%2F</url>
    <content type="text"><![CDATA[React Native WebView Debugging Guide]]></content>
  </entry>
  <entry>
    <title><![CDATA[一段 shell 脚本]]></title>
    <url>%2F2019%2F11%2F21%2F191-one-shell-script%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Scrapy 入门]]></title>
    <url>%2F2019%2F11%2F21%2F193-scrapy-starting%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[股票数据来源整理]]></title>
    <url>%2F2019%2F11%2F21%2F195-stock-datas%2F</url>
    <content type="text"><![CDATA[宏观分析、行业分析、个股研究、策略研究 行业分类 联合国经济社会理事会《所有经济活动的国际标准行业分类》（International Standard Industrial Classification of All Economic Activities (ISIC)） 最新版本为第四版 证监会《上市公司行业分类指引》) 公司信息&amp;财务数据&amp;财报下载 巨潮资讯 用好搜索 市盈率 中证指数有限公司]]></content>
  </entry>
  <entry>
    <title><![CDATA[ROE]]></title>
    <url>%2F2019%2F11%2F21%2F194-roe%2F</url>
    <content type="text"><![CDATA[ROEROE 是 Return Of Equity 的缩写，中文意思是股本回报率，又叫股权收益率、股本收益率以及我们最常用的净资产收益率。 净资产收益率是衡量相对于股东权益的投资产出回报的指标，反映公司利用资产净值产生纯利的能力。最简单的理解方式是：假设公司 ROE 为 30%，那么投资者投入1块钱，公司就能产生3毛钱的净利润。 净资产收益率又分全面摊薄净资产收益率与加权平均净资产收益率 计算公式最常用的基本计算公式为： 净资产收益率 = 净利润 \/ 净资产 全面摊薄净资产收益率 全面摊薄净资产收益率 = 报告期净利润 \/ 期末净资产 加权平均净资产收益率 加权平均净资产收益率 = P \/ （E0 + NP \/ 2 + Ei Mi \/ M0 - Ej Mj \/ M0）12345678P - 报告期利润；NP - 报告期净利润；E0 - 期初净资产；Ei - 报告期发行新股或债转股等新增净资产；Ej - 报告期回购或现金分红等减少净资产；M0 - 报告期月份数；Mi - 新增净资产下一月份起至报告期期末的月份数；Mj - 减少净资产下一月份起至报告期期末的月份数。 分析方法杜邦公式最常用的分析方法为杜邦公式： 净资产收益率 = 销售净利率 总资产周转率 杠杆比率 销售净利率 = 净利润 \/ 销售收入 总资产周转率 = 销售收入 \/ 总资产 杠杆比率 = 总资产 \/ 净资产 净资产收益率 = （ 净利润 \/ 销售收入 ） （ 销售收入 \/ 总资产 ）（ 总资产 \/ 净资产 ） 实例以捷昌驱动2018年ROE相对2017年ROE的变动为例，采用杜邦公式分析变动原因： 项目 2017年 2018年 变动 ROE 30.62% 16.04% -14.58% 营业净利率 22.72% 22.75% 0.03% 总资产周转率 0.98 0.58 -0.4 杠杆比率 1.37 1.21 -0.16 计算过程会因保留精度问题有所误差，所以全部使用 ~=，不必强求结果准确 营业净利率对ROE变动的影响为：（22.75%-22.72%）0.981.37-16.04% ~= 0.04% 总资产周转率对ROE变动的影响为：22.75%（0.58-0.98）1.37 ~= -12.45% 杠杆比率对ROE变动的影响为：22.75%0.58（1.21-1.37） ~= -2.11% （ 0.04% + -12.45% + -2.11% ） ~= -14.58% 根据分析可知，捷昌驱动2018年ROE相对2017年下降14.58%的原因主要是总资产周转率以及杠杆比率的变化。 这是对ROE进行的一级拆解，可以得出变动的大体原因，但是具体原因还需要继续查看，这就需要进行二级拆解。 营业净利率 净利率 = 毛利率 - 销售费用率 - 管理费用率 - 研发费用率 - 财务费用率 - 其他费用率 - 税率 营业净利率变动值：0.04%营业净利率对ROE变动的影响：0.03% 项目 2017年 2018年 变动 影响 毛利率 = （营业总收入-营业成本）\/ 营业总收入 44.95% 42.06% -2.89% -2.89%*（0.04%/0.03%）~= 3.85% 销售费用率 = 销售费用 \/ 营业总收入 7.73% 6.37% -1.36% ~= -1.74% 管理费用率 = 管理费用 \/ 营业总收入 5.34% 5.38% 0.04% ~= 0.05% 研发费用率 = 研发费用 \/ 营业总收入 4.47% 4.42% -0.05% ~= -0.07% 财务费用率 = 财务费用 \/ 营业总收入 0.82% -0.87% -1.69% ~= -2.25% 总资产周转率 总资产周转天数 = 360 \/ 总资产周转率 总资产周转天数变动：360 \/ 0.58 - 360 \/ 0.98 = 253.34总资产周转率对ROE变动的影响：-12.45% 项目 2017年 2018年 变动 影响 应收票据及应收账款周转天数 29.28 41.27 11.99 11.99*（-12.45%/253.34）~= -0.59% 存货周转天数 47.38 63.21 15.83 -0.78% 固定资产周转天数 99.96 88.98 -10.98 0.54% 在建工程周转天数 5.24 7.82 2.58 -0.13% 其他资产周转天数 185.11 417.20 232.09 -11.04% 杠杆比率 杠杆比率 = 总资产 \/ 净资产 = （净资产+总负债） \/ 净资产负债 = 流动负债 + 非流动负债 = 金融负债 + 经营负债 杠杆比率对ROE的影响：-2.11% 项目 2017年 2018年 变动 影响 流动负债\/净资产 0.36 0.21 -0.15 -2.11%\/（-0.15+-0.01）*-0.15 ~= -1.98% 非流动负债\/净资产 0.01 0.00 -0.01 -2.11% - -1.98% ~= -0.13% 金融负债\/净资产 0.11 0.19 0.08 -2.11%\/（0.08+ -0.24）*0.08 ~= 1.06% 经营负债\/净资产 0.26 0.02 -0.24 -2.11%-1.06% ~= -3.17% 结论根据进一步拆解分析得出结论： 1、其他资产周转天数的增加是2018年ROE降低的主要原因2、流动负债/净资产、经营负债/净资产减少对2018年ROE降低也有较大影响 缺陷 净资产收益率的计算，分子是净利润，分母是净资产，由于企业的净利润并非仅是净资产所产生的，因而分子分母的计算口径并不一致，从逻辑上是不合理的。 净资产收益率可以反映企业净资产(股权资金)的收益水平，但并不能全面反映一个企业的资金运用能力。道理十分明显，全面反映一个企业资金运作的整体效果的指标，应当是总资产收益率，而非净资产收益率，所谓总资产收益率，计算公式是：净利润÷资产总额(负债十所有者权益)×100%比较一下它与净资产收益率的差别，仅在于分母的计算范围上，净资产收益率的计算分母是净资产，总资产收益率的计算分母是全部资产，这样分子分母才具有可比性，在计算口径上才是一致的。 运用净资产收益率考核企业资金利用效果，存在很多局限性。（1）每股收益与净资产收益率指标互补性不强。由于各个上市公司的资产规模不相等，因而不能以各企业的收益绝对值指标来考核其效益和管理水平。考核标准主要是每股收益和净资产收益率两项相对数指标，然而，每股收益主要是考核企业股权资金的使用情况，净资产收益率虽然考核范围略大(净资产包括股本、资本公积、盈余公积、未分配利润)，但也只是反映了企业权益性资金的使用情况，显然在考核企业效益指标体系的设计上，需要调整和完善。（2）以净资产收益率作为考核指标不利于企业的横向比较。由于企业负债率的差别，如某些企业负债畸高，导致某些微利企业净资产收益率却偏高，甚至达到了配股要求，而有些企业尽管效益不错，但由于财务结构合理，负债较低，净资产收益率却较低，并且有可能达不到配股要求。（3）考核净资产收益率指标也不利于对企业进行纵向比较分析。企业可通过诸如以负债回购股权的方式来提高每股收益和净资产收益率，而实际上，该企业经济效益和资金利用效果并未提高。以200O年度实施国有股回购的上市公司“云天化”为例，该公司2000年的利润总额和净利润分别比1999年下降了33.66%和 36.58%，但由于当年回购国有股2亿股，每股收益和净资产收益率分别只下降了0.01元和2.33%，下降幅度分别只是2%和13%。这种考核结果无疑会对投资者的决策产生不良影响。由上可以看出，以净资产收益率指标作为企业再筹资的考核标准，弊病较多，而改用总资产收益率考核，较之要合理得多，一方面可以恰当地反映企业资金利用效果，帮助投资者作出正确的投资决策，也可以在一定程度上避免企业玩“数字游戏”达标。因此全面地考核企业资金利用效用，引导社会资源的合理流动，真正使资金流向经济效益高的企业，抑制企业筹资冲动，应改用总资产收益率来作为配股和增发的考核标准。 数据来自于《阿甘投研》，分析结果不构成购买建议 参考 净资产收益率 ROE 公开发行证券的公司信息披露编报规则第9号——净资产收益率和每股收益的计算及披露（证监会公告[2010]2号，2010年1月11日修订）]]></content>
  </entry>
  <entry>
    <title><![CDATA[利润表]]></title>
    <url>%2F2019%2F11%2F21%2F196-profit-and-loss-statement%2F</url>
    <content type="text"><![CDATA[概念与结构概念利润表是反映企业在一定会计期间经营成果的报表。由于它反映的是某一期间的情况，所以，又被称为动态报表。有时，利润表也称为损益表、收益表。 结构 简化结构 项目 处理 结果 营业收入 ** 营业成本 减 毛利润 费用 其他损益 减 营业利润 营业外收支 加减 利润总额 所得税 减 净利润 少数股东损益 加减 归母净利润 非经常性损益 加减 扣非归母净利润 财务细项营业收入营业收入是企业在生产经营活动中，因销售产品或提供劳务而取得的各项收入。 … 详细解释 营业成本营业成本是企业本期已实现销售的商品产品成本和已对外提供劳务的成本。 … 详细解释 税金及附加税金及附加是指企业经营活动应负担的相关税费，包括消费税、城市维护建设税、教育费附加、资源税、房产税、城镇土地使用税、车船税、印花税等。 … 详细解释 销售费用销售费用是指企业在销售产品、自制半成品和工业性劳务等过程中发生的各项费用,包括由企业负担的包装费、运输费、装卸费、展览费、广告费、租赁费（不包括融资租赁费），以及为销售本企业产品而专设的销售机构的费用，包括职工工资、福利费、差旅费、办公费、折旧费、修理费、物料消耗和其他经费。销售费用属于期间费用，在发生的当期就计入当期的损益。 … 详细解释 管理费用管理费用是指企业的行政管理部门为管理和组织经营而发生的各项费用，包括管理人员工资和福利费、公司一级折旧费、修理费、技术转让费、无形资产和递延资产摊销费及其他管理费用（办公费、差旅费、劳保费、土地使用税等）。 管理费用是期间费用的一种，它主要是指企业行政管理部门为组织和管理生产经营活动而发生的各种费用。具体包括的项目有：工资福利费、折旧费、工会费、职工教育经费、业务招待费、房产税、车船使用税、土地使用税。印花税、技术转让费、无形资产摊销、咨询费、诉讼费、坏账损失、公司经费、劳动保险费、董事会会费等等。 … 详细解释 财务费用财务费用是指企业为筹集生产经营所需资金等而发生的费用，包括利息支出（减利息收入）、汇兑损失（减汇兑收益）以及相关的手续费等。包括企业生产经营期间发生的利息支出（减利息收入）、汇兑净损失（有的企业如商品流通企业、保险企业进行单独核算，不包括在财务费用）、金融机构手续费，以及筹资发生的其他财务费用如债券印刷费、国外借款担保费等。 … 详细解释 资产减值损失资产减值，是指资产的可收回金额低于其账面价值。 资产减值损失是指企业根据《资产减值准则》等计提各项资产减值准备时，所形成的或有损失。如计提的坏账准备，存货跌价准备和固定资产减值准备等形成的损失。 新会计准则规定资产减值范围主要是固定资产、无形资产以及除特别规定外的其他资产减值的处理。《资产减值准则》改变了固定资产、无形资产等的减值准备计提后可以转回的做法，资产减值损失一经确认，在以后会计期间不得转回，消除了一些企业通过计提秘密准备来调节利润的可能，限制了利润的人为波动。 … 详细解释 公允价值变动收益公允价值变动收益是指资产或负债因公允价值变动所形成的收益。 … 详细解释 投资收益投资收益是指企业进行投资所获得的经济利益。 … 详细解释 营业利润销售营业利润=营业收入－营业成本－营业税金及附加－营业费用－管理费用－财务费用－资产减值损失+公允价值变动收益（或减变动损失）+投资收益（或减投资损失） … 详细解释 营业外收支营业外收支是指与企业的业务经营无直接关系的收益和支出。又称营业外损益。是企业财务成果的组成部分。 营业外收支是指企业发生的与其生产经营活动无直接关系的各项收入和各项支出。 在中国，国营企业的营业外收支项目和范围，由国家统一规定。营业外收入的项目，主要有租金收入、没收逾期未退包装物的押金收入、应补产品价外补贴和无法支付的应付款项等。营业外支出的项目，主要有劳动保险费用、职工子弟学校经费、技工学校经费、新产品试制失败损失、非常损失、呆帐损失、治理三废支出等。 … 详细解释 利润总额利润总额是指税前利润，也就是企业在所得税前一定时期内经营活动的总成果。 … 详细解释 所得税费用所得税费用是指企业为取得会计税前利润应交纳的所得税。 … 详细解释 其他综合收益其他综合收益是指企业根据企业会计准则规定未在损益中确认的各项利得和损失扣除所得税影响后的净额。 … 详细解释 每股收益每股收益即EPS，又称每股税后利润、每股盈余，指税后利润与股本总数的比率。它是测定股票投资价值的重要指标之一，是分析每股价值的一个基础性指标，是综合反映公司获利能力的重要指标，它是公司某一时期净利润与股份数的比率。该比率反映了每股创造的税后利润, 比率越高, 表明所创造的利润就越多。 若公司只有普通股时，每股收益就是税后利润，股份数是指发行在外的普通股股数。如果公司还有优先股，应先从税后利润中扣除分派给优先股股东的利息。 … 详细解释 财务指标毛利率 毛利率 = （营业收入 - 营业成本）\/ 营业收入 销售毛利率，表示每一元销售收入扣除销售成本后，有多少钱可以用于各项期间费用和形成盈利。销售毛利率是企业销售净利率的最初基础，没有足够大的毛利率便不能盈利。 销售毛利率是销售净利率的基础，没有足够多的毛利率便不能盈利。销售毛利率越高，说明企业销售成本在销售收入净额中所占的比重越小，在期间费用和其他业务利润一定的情况下，营业利润就越高。销售毛利率还与企业的竞争力和企业所处的行业有关。 … 详细解释 成本率 成本率 = 营业成本 \/ 营业收入 = 1 - 毛利率 与毛利率相对应，销售成本率是用以反映企业每元销售收入所需的成本支出。销售成本率的异常偏高，预示着企业销售方法不正确或企业处于不利的市场竞争地位。 费用率 费用率 = 费用 \/ 营业收入 销售期间费用率是指期间费用与销售收入净额之间的比率。该指标越低越好，当销售期间费用率大于销售毛利率时，则说明企业盈利相当困难。 利润率 利润率 = 利润总额 \/ 营业收入 净利率 净利率 = 净利润 \/ 营业收入 该指标反映每一元销售收入带来的净利润的多少，表示销售收入的收益水平。一般的讲，该指标越大，说明企业销售的盈利能力越强。一个企业如果能保持良好的持续增长的销售净利率，应该讲企业的财务状况是好的，但并不能绝对的讲销售净利率越大越好，还必须看企业的销售增长情况和净利润的变动情况。 概念补充1. 少数股东持有50%以下投票权股票的公司股东。这种股东在公司没有绝对经营和管理权利。 2. 非经常性损益非经常性损益是指与公司正常经营业务无直接关系，以及虽与正常经营业务相关，但由于其性质特殊和偶发性，影响报表使用人对公司经营业绩和盈利能力做出正常判断的各项交易和事项产生的损益。 3. 稀释性潜在普通股是指假设当期转换为普通股会减少每股收益的潜在普通股。主要包括可转换债权、认股权证、股份期权。 4. 联营企业联营企业：两个及两个以上相同或不同所有制性质的企业法人或事业单位法人，按自愿、平等、互利的原则，共同投资组成的经济组织称为联营企业。 联营企业包括国有联营企业、集体联营企业、国有与集体联营企业和其他联营企业。 5. 合营企业指中外合营企业。 6. 息税前利润（EBIT）EBIT ＝ 净利润＋所得税＋利息 EBIT通过剔除所得税和利息，可以使投资者评价项目时不用考虑项目适用的所得税率和融资成本，这样方便投资者将项目放在不同的资本结构中进行考察。EBIT与净利润的主要区别就在于剔除了资本结构和所得税政策的影响。如此，同一行业中的不同企业之间，无论所在地的所得税率有多大差异，或是资本结构有多大的差异，都能够拿出EBIT这类指标来更为准确的比较盈利能力。而同一企业在分析不同时期盈利能力变化时，使用EBIT也较净利润更具可比性。 参考资料 公开发行证券的公司信息披露解释性公告第1号——非经常性损益（2008）]]></content>
  </entry>
  <entry>
    <title><![CDATA[树莓派4B配置]]></title>
    <url>%2F2019%2F11%2F21%2F197-berry%2F</url>
    <content type="text"><![CDATA[安装系统准备材料和工具 树莓派裸板，我的是树莓派4B 4G版 树莓派电源，5V/3A SD卡，闪迪64G 读卡器 系统，我选的是Raspbian PC Win32diskimager 安装下载好想用的系统，在PC上使用Win32diskimager将系统刻入SD卡，刻录完毕将SD卡插入树莓派的卡槽，连接电源即可使用 开发环境看自己的用途，配置不同的环境，我考虑做一个轻量的服务器，然后做一些爬虫工作，所以nginx、MySQL、MongoDB、Python、nodejs、这些都是要装的。 切换源镜像，更新软件备份旧的源配置，切换为清华的镜像，具体哪个镜像需要根据自己的系统来选择，我用的是Raspbian Buster1234sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # 备份sudo vim /etc/apt/sources.list # 编辑sudo apt-get update # 更新软件列表sudo apt-get upgrade # 更新软件 我的sources.list为：123456# 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui 开发工具 zsh vim git 1sudo apt-get install zsh vim git vim的配置不在这里说明了 服务器 nginx mysql mongodb 1sudo apt-get install nginx mariadb-server mongodb nginx12# 配置文件路径 /etc/nginx/sites-available/default# 默认文件目录 /var/www/html/ pythonnodejs内网穿透想要远程访问树莓派，我选择的方案是FRP+阿里云实现内网穿透 Frp下载地址 阿里云服务器(Ubuntu 16.04)如果有开启防火墙，如iptables等，需要开放所需要使用的端口 12345678wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gztar -zxvf frp_0.29.0_linux_amd64.tar.gzsudo mv frp_0.29.0_linux_amd64 /usr/frpsudo vim /usr/frp/frps.ini # 编辑frp服务端配置sudo vim /lib/systemd/system/frps.service # 注册frp服务端服务sudo systemctl enable frps # 开机启动sudo systemctl start frps # 启动sudo systemctl status frps # 查看运行状态 frps.ini12345678[common]bind_port = xxx1vhost_http_port = xxx2vhost_https_port = xxx3token = xxxxxx1dashboard_port = xxx4dashboard_user = xxxdashboard_pwd = xxxxxx2 frps.service12345678910111213[Unit]Description=Frp Server ServiceAfter=network.target[Service]Type=simpleUser=nobodyRestart=on-failureRestartSec=5sExecStart=/usr/frp/frps -c /usr/frp/frps.ini[Install]WantedBy=multi-user.target 树莓派4B12345678wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_arm.tar.gztar -zxvf frp_0.29.0_linux_arm.tar.gzsudo mv frp_0.29.0_linux_arm /usr/frpsudo vim /usr/frp/frpc.ini # 编辑frp客户端配置sudo vim /lib/systemd/system/frpc.service # 注册frp客户端服务sudo systemctl enable frpc # 开机启动sudo systemctl start frpc # 启动sudo systemctl status frpc # 查看运行状态 frpc.ini12345678910111213141516[common]server_addr = xxx.xxx.xxx.xxx / domainserver_port = xxxtoken = xxxxxx[ssh]type = tcplocal_ip = 127.0.0.1local_port = xxx1remote_port = xxx2[web]type = httplocal_ip = 127.0.0.1local_port = 80custom_domains = xxx.xxx.xxx.xxx / domain frpc.service12345678910111213[Unit]Description=Frp Client ServiceAfter=network.target[Service]Type=simpleUser=nobodyRestart=on-failureRestartSec=5sExecStart=/usr/frp/frpc -c /usr/frp/frpc.ini[Install]WantedBy=multi-user.target 树莓派功能作为服务器安装并运行nginx，完成内网穿透，就能够从外部访问树莓派的网站了 SSH远程访问完成内网穿透，就通过下面的指令使用SSH远程操作树莓派了 1ssh -p &#123;remote_port&#125; &#123;user&#125;@&#123;xxx.xxx.xxx.xxx | domain&#125; NAS硬盘挂载我的硬盘格式是exFAT的，所以 123456sudo apt-get install exfat-fuse # 安装扩展sudo modprobe fuse # 加载内核支持sudo fdisk -l # 查看存储列表，找到设备，如sda1sudo mkdir /media/yingpan # 创建挂载目录sudo mount /dev/sda1 /media/yingpan # 挂载df -h # 查看挂载列表 挂载完毕 设置开机自动挂载12sudo blkid # 查看硬盘UUIDsudo vim /etc/fstab 在最后一行添加1UUID=&quot;&quot; /media/yingpan auto rw,defaults,noexec,umask=0000 0 0 文件共享(局域网NAS)12sudo apt-get install samba samba-common-binsudo vim /etc/samba/smb.conf smb.conf12345678[pi] path = /media/yingpan/ valid users = pi#有效用户 browseable = Yes writeable = Yes writelist = pi#可写用户列表 create mask = 0777#新创建文件的默认属性 directory mask = 0777#新创建文件夹的默认属性 123sudo smbpasswd -a pi # 添加samba用户sudo systemctl restart smbd # 重启服务sudo systemctl enable smbd # 开机启动 配置完毕即可在局域网访问硬盘上的文件 下载器1234sudo apt-get install aria2mkdir -p .config/aria2touch .config/aria2/aria2.sessionvim .config/aria2/aria2.config aria2.config1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#RPC端口, 仅当默认端口被占用时修改#rpc-listen-port=6800#最大同时下载数(任务数), 路由建议值: 3max-concurrent-downloads=5#断点续传continue=true#同服务器连接数max-connection-per-server=5#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要min-split-size=10M#单文件最大线程数, 路由建议值: 5split=10#下载速度限制max-overall-download-limit=0#单文件速度限制max-download-limit=0#上传速度限制max-overall-upload-limit=0#单文件速度限制max-upload-limit=0#断开速度过慢的连接#lowest-speed-limit=0#验证用，需要1.16.1之后的release版本#referer=*#文件保存路径, 默认为当前启动位置(我的是外置设备，请自行坐相应修改)dir=/media/share#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本#disk-cache=0#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)#enable-mmap=true#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持file-allocation=prealloc#不进行证书校验check-certificate=false#保存下载会话save-session=/home/pi/.config/aria2/aria2.sessioninput-file=/home/pi/.config/aria2/aria2.session#断电续传save-session-interval=60#DMCAenable-dht=truebt-enable-lpd=trueenable-peer-exchange=true#bt-trackerbt-tracker=udp://62.138.0.158:6969/announce,udp://188.241.58.209:6969/announce,udp://151.80.120.112:2710/announce,udp://151.80.120.112:2710/announce,udp://185.19.107.254:80/announce,udp://93.158.213.92:1337/announce,udp://185.225.17.100:1337/announce,udp://208.83.20.20:6969/announce,udp://5.206.19.247:6969/announce,udp://37.235.174.46:2710/announce,udp://142.44.243.4:1337/announce,udp://195.154.52.99:80/announce,udp://159.100.245.181:6969/announce,udp://89.234.156.205:451/announce,udp://45.56.74.11:6969/announce,udp://54.37.235.149:6969/announce,udp://51.15.226.113:6969/announce,udp://184.105.151.164:6969/announce,udp://176.113.71.19:6961/announce,udp://46.148.18.254:2710/announce (bt-tracker最新地址)[https://github.com/ngosang/trackerslist] 自启动1sudo vim /lib/systemd/system/aria2.service 123456789101112131415[Unit]Description=Aria2 ServiceRequires=network.targetAfter=dhcpcd.service[Service]User=piType=forkingExecStart=/usr/bin/aria2c --conf-path=/home/pi/.config/aria2/aria2.configExecReload=/usr/bin/kill -HUP $MAINPIDRestartSec=1minRestart=on-failure[Install]WantedBy=multi-user.target 123sudo systemctl daemon-reloadsudo systemctl enable aria2sudo systemctl start aria2 WebUI(AriaNg)[https://github.com/mayswind/AriaNg] 12wget https://github.com/mayswind/AriaNg/releases/download/1.1.3/AriaNg-1.1.3.zipunzip AriaNg-1.1.3.zip -d /var/www/html/aria 之前已经配置过nginx，可以直接访问 在 frpc.ini 中新增 12345[aria2-rpc]type = tcplocal_ip = 127.0.0.1local_port = 6800remote_port = 6800 FTP1sudo apt install vsftpd 参考 (树莓派3B+安装Aria2远程下载服务器)[https://blog.gaozhe.top/essay/85.html] (树莓派下Aria2利用frp开启内网穿透)[https://blog.gaozhe.top/essay/97.html]]]></content>
  </entry>
  <entry>
    <title><![CDATA[crontab 定时任务]]></title>
    <url>%2F2019%2F11%2F21%2F198-crontab%2F</url>
    <content type="text"><![CDATA[12crontab -lcrontab -e 12345678# .---------------- minute (0 - 59) # | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR#sun,mon,tue,wed,thu,fri,sat # | | | | |# * * * * * command to be executed minute：代表一小时内的第几分，范围 0-59。hour：代表一天中的第几小时，范围 0-23。mday：代表一个月中的第几天，范围 1-31。month：代表一年中第几个月，范围 1-12。wday：代表星期几，范围 0-7 (0及7都是星期天)。who：要使用什么身份执行该指令，当您使用 crontab -e 时，不必加此字段。command：所要执行的指令。]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 支付集成（微信）]]></title>
    <url>%2F2019%2F11%2F21%2F199-react-native-pay-wx%2F</url>
    <content type="text"><![CDATA[我仅仅做了 Android 的集成，iOS使用的是应用内购买，后面会有文章介绍 坑们 微信的文档屎一样 微信官方SDK 可能跟 Umeng 的有冲突，如果已经有 Umeng 的集成，请选择精简版的Umeng微信SDK，然后自己添加微信的SDK 微信的沙箱测试问题很多，可以把金额改为 0.01 之类很小的数值直接产品测试 开发请按照参考文章来，很完整，唯一缺少的地方是 AndroidManifest.xml 的配置 123&lt;activity android:name=".wxapi.WXPayEntryActivity" android:exported="true" /&gt; 华为手机居然不需要添加微信支付的Activity就可以用？？？ 参考文章 react-native集成微信支付]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 实现从浏览器或其他APP唤醒APP并跳转指定页面]]></title>
    <url>%2F2019%2F11%2F21%2F183-RN-open-app-except-page-from-webpage-or-otherapp%2F</url>
    <content type="text"><![CDATA[APP环境 react 0.59.5 react-navigation 3.9.1 react-navigation-redux-helpers 3.0.2 React Native 实现我使用 react-navigation 来管理路由，react-navigation本身支持 Deep Linking，但是我使用 react-navigation-redux-helpers 组件将路由也封装在 redux 下了，所以 react-navigation 本身的 deep-linking 功能就不能用了，在 react-navigation-redux-helpers 的 issue 下面我找到了其他的解决方案。 1234567891011121314151617181920// 为了监听APP从后台唤起的行为，所以我选择使用 AppState 接口，然后使用 Linking 获取 url，然后将获取到的地址初步解析提交给 LinkRoutes 方法import &#123; Linking, AppState &#125; from &apos;react-native&apos;import LinkRoutes from &apos;./src/routes/linkRoutes&apos;...componentDidMount()&#123; AppState.addEventListener(&apos;change&apos;, this._handleAppStateChange)&#125;componentWillUnmount()&#123; AppState.removeEventListener(&apos;change&apos;, this._handleAppStateChange)&#125;_handleAppStateChange = (nextAppState) =&gt; &#123; if(nextAppState===&apos;active&apos;)&#123; Linking.getInitialURL().then(res =&gt; &#123; if(!!res)&#123; LinkRoutes(res.split(&apos;:/&apos;)[1]) &#125; &#125;) &#125;&#125;... 1234567891011121314151617181920212223242526272829// LinkRoutes 的实现，使用了 path-parser 做 url 解析，然后维护 APP 内需要跳转的页面的列表，然后调用 react-navigation 的navigate 方法，使用 dispatch 实现跳转到指定页面import PathParser from &apos;path-parser&apos;import &#123; NavigationActions &#125; from &apos;react-navigation&apos;import store from &apos;../reducers&apos;import _ from &apos;lodash&apos;const paths = [ &#123; routeName: &apos;Page&apos;, path: new PathParser(&apos;/page&apos;) &#125;]const findPath = url =&gt; &#123; let idx = _.findIndex(paths, p =&gt; &#123; return p.path.test(url) &#125;) return idx &gt; -1 ? paths[idx] : false&#125;export default url =&gt; &#123; const pathObj = findPath(url) if(!pathObj) return const navigateAction = NavigationActions.navigate(&#123; routeName: pathObj.routeName, params: pathObj.path.test(url) &#125;) store.dispatch(navigateAction)&#125; iOS配置12345678910111213141516171819202122232425262728293031// 修改 AppDelagate.m，添加#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt; 100000// 最新版本系统回调- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey, id&gt; *)options&#123; BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url options:options]; if (!result) &#123; // 其他如支付等SDK的回调 &#125; return result;&#125;#endif// 支持所有iOS系统，此方法在swift4.1(Xcode 9.3)已废弃，Objective-C项目不影响。- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation&#123; BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url sourceApplication:sourceApplication annotation:annotation]; if (!result) &#123; // 其他如支付等SDK的回调 &#125; return result;&#125;- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url&#123; BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url]; if (!result) &#123; // 其他如支付等SDK的回调 &#125; return result;&#125; 然后，修改 Url Types，添加 myapp 测试指令1xcrun simctl openurl booted myapp:// iOS 使用模拟器是 Linking 捕捉不到 url，所以我是打包后在手机上测试的 Android配置在 .MainActivity 下添加配置，还可以设置host以及path等，但是因为我是通过RN做解析，这里就不加了 123456&lt;intent-filter&gt; &lt;action android:name="android.intent.action.VIEW" /&gt; &lt;category android:name="android.intent.category.DEFAULT" /&gt; &lt;category android:name="android.intent.category.BROWSABLE" /&gt; &lt;data android:scheme="myapp" /&gt;&lt;/intent-filter&gt; 测试指令1adb shell am start -W -a android.intent.action.VIEW -d "myapp://" com.myapp 参考文章 React Navigation Deep linking Redux can not be used with deep linking react native 实现浏览器唤醒APP并跳转指定页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 原生模块（iOS）]]></title>
    <url>%2F2019%2F11%2F21%2F186-react-native-native-modules-ios%2F</url>
    <content type="text"><![CDATA[参考文章 原生模块]]></content>
  </entry>
  <entry>
    <title><![CDATA[MacOS 升级 MySQL]]></title>
    <url>%2F2019%2F11%2F21%2F187-mysql-upgrade-macos%2F</url>
    <content type="text"><![CDATA[今天青岛大雾！ 报错一早来到公司，启动mysql服务，结果给我来了这么一句 ERROR! The server quit without updating PID file (/usr/local/var/mysql/liuhangdeMacBook-Pro.local.pid). 额，O__O “… 执行 1mysqld start 返回了详细的报错： 2019-06-20T01:41:59.982830Z 0 [System] [MY-010116] [Server] /usr/local/Cellar/mysql/8.0.15/bin/mysqld (mysqld 8.0.15) starting as process 47072019-06-20T01:41:59.986135Z 0 [Warning] [MY-010159] [Server] Setting lower_case_table_names=2 because file system for /usr/local/var/mysql/ is case insensitive2019-06-20T01:42:00.069561Z 1 [ERROR] [MY-012526] [InnoDB] Upgrade after a crash is not supported. This redo log was created with MySQL 5.7.18. Please follow the instructions at http://dev.mysql.com/doc/refman/8.0/en/upgrading.html2019-06-20T01:42:00.069583Z 1 [ERROR] [MY-012930] [InnoDB] Plugin initialization aborted with error Generic error.2019-06-20T01:42:00.379422Z 1 [ERROR] [MY-011013] [Server] Failed to initialize DD Storage Engine.2019-06-20T01:42:00.380010Z 0 [ERROR] [MY-010020] [Server] Data Dictionary initialization failed.2019-06-20T01:42:00.380249Z 0 [ERROR] [MY-010119] [Server] Aborting2019-06-20T01:42:00.381714Z 0 [System] [MY-010910] [Server] /usr/local/Cellar/mysql/8.0.15/bin/mysqld: Shutdown complete (mysqld 8.0.15) Homebrew. 意思是说之前 mysql 升级没处理好，遗留文件导致新版本的启动不了。 查了网上的各种方法，最后只能选择重装，然后手动恢复数据。 /(ㄒoㄒ)/~~ 重装！！！一定要先备份数据，重装会自动删除原来目录下的所有文件12345678brew uninstall --force mysql // 删除原来的MySQLbrew services listbrew doctor // 确认删除并修复mv /usr/local/var/mysql /usr/local/var/old.mysql // 将数据文件备份，数据库文件以.frm .idb的格式在/usr/local/var/mysql下brew install mysql // 重新安装mysql.server start // 启动mysql_secure_installation // 安全安装，mysql8版本更改了安装规则，需要配置很复杂的密码 然后根据提示配置就可以了 数据恢复在终端 mysql -uroot -p 可以正常登录，但是用 sequel pro 连接却报错： Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found ？？？ 在 mysql 下执行 1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;; 然后就可以使用 sequel pro 连接了。 最痛苦的是恢复数据，以后一定要记得 dump 数据 /(ㄒoㄒ)/~~ 网上更有多种数据恢复的方式，需要根据所能提供的文件选择不同的方式。 开始我选择用 mysql-utilities 的方式，这个工具集提供 mysqlfrm 指令，可以提取表结构。表结构提取没问题，但是后续的操作始终有问题。还有一种恢复方式，新建同名表，然后旧的 frm 文件覆盖新的，使用恢复模式强行恢复表结构。这种方式我在一开始就否定了，我这里的数据库跟表太多了，这不知要忙活到何年何月。 再回过头去看看数据库打开失败的原因，是旧版本的遗留文件导致打不开，那如果我恢复到旧的版本，是否就可以了呢。我之前的版本是 5.7.18，使用 brew 重新安装 5.7 版本。 123brew info mysql // 查看 brew 上面 mysql 的信息，可以看到 mysql@5.7brew uninstall --force mysql // 卸载当前版本brew install mysql@5.7 // 下载安装 5.7 版本，当前是 5.7.25 安装完毕后，直接将 old.mysql 目录 覆盖掉 /usr/local/var/mysql，启动服务，连接 mysql，OK！ O(∩_∩)O~~ 然后赶紧 mysqldump 导出数据，卸载 mysql@5.7，安装最新版本。 总结还是缺乏经验，开始看到报错就如无头苍蝇到处查各种试，花费了很多时间，如果开始就静下心来去看看mysql的数据管理方式，也许就不会这样了，以此为戒！ 参考文章 Cannot start mysql: InnoDB: Upgrade after a crash is not supported （解决方法）MySQL 8 + macOS 错误：Authentication plugin ‘caching_sha2_password’ cannot be loaded]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 实现截图添加二维码分享功能]]></title>
    <url>%2F2019%2F11%2F21%2F185-react-native-screen-shot-share%2F</url>
    <content type="text"><![CDATA[截图捕捉功能已经发布到 NPM，欢迎使用1npm i react-native-screenshotcatch 对一个 JSer 来说，用原生来实现一个功能着实不容易。但是，随着APP开发的深入，在许多场景下RN现成的组件已经不能满足我们的需求，不想受制于人就要自己动手。图像绘制、文件系统、通知、模块封装等等，虽然难但是收获也多，希望自己能够更深入原生开发的领域。 效果展示 截屏监听功能iOS 截屏监听实现实现思路：添加iOS自带的UIApplicationUserDidTakeScreenshotNotification通知监听，捕捉到事件后绘制当前页面，保存返回文件地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596// ScreenShotShare.h#import &lt;React/RCTBridgeModule.h&gt;#import &lt;React/RCTEventEmitter.h&gt;@interface ScreenShotShare : RCTEventEmitter &lt;RCTBridgeModule&gt;@end// ScreenShotShare.m#import &quot;ScreenShotShare.h&quot;#import &lt;React/RCTConvert.h&gt;#import &lt;React/RCTEventDispatcher.h&gt;#define PATH @&quot;screen-shot-share&quot;@implementation ScreenShotShareRCT_EXPORT_MODULE();- (NSArray &lt;NSString *&gt; *)supportedEvents&#123; return @[@&quot;ScreenShotShare&quot;];&#125;RCT_EXPORT_METHOD(startListener)&#123; [self addScreenShotObserver];&#125;- (void)addScreenShotObserver&#123; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(getScreenShot:) name:UIApplicationUserDidTakeScreenshotNotification object:nil];&#125;- (void)removeScreenShotObserver&#123; [[NSNotificationCenter defaultCenter] removeObserver:self name:UIApplicationUserDidTakeScreenshotNotification object:nil];&#125;- (void)getScreenShot:(NSNotification *)notification&#123; [self sendEventWithName:@&quot;ScreenShotShare&quot; body:[self screenImage]];&#125;// 保存文件并返回文件路径- (NSDictionary *)screenImage&#123; @try&#123; UIImage *image = [UIImage imageWithData: [self imageDataScreenShot]]; NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSFileManager *fileManager = [NSFileManager defaultManager]; NSString *path =[[paths objectAtIndex:0]stringByAppendingPathComponent:PATH]; if (![fileManager fileExistsAtPath:path]) &#123; [fileManager createDirectoryAtPath:path withIntermediateDirectories:YES attributes:nil error:nil]; &#125; long time = (long)[[NSDate new] timeIntervalSince1970]; NSString *filePath = [path stringByAppendingPathComponent: [NSString stringWithFormat:@&quot;screen-capture-%ld.png&quot;, time]]; @try&#123; BOOL result = [UIImagePNGRepresentation(image) writeToFile:filePath atomically:YES]; // 保存成功会返回YES if (result == YES) &#123; NSLog(@&quot;agan_app 保存成功。filePath：%@&quot;, filePath); [[[UIApplication sharedApplication] keyWindow] endEditing:YES]; // 获取截屏后关闭键盘 return @&#123;@&quot;code&quot;: @200, @&quot;uri&quot;: filePath&#125;; &#125; &#125;@catch(NSException *ex) &#123; NSLog(@&quot;agan_app 保存图片失败：%@&quot;, ex.description); filePath = @&quot;&quot;; return @&#123;@&quot;code&quot;: @500, @&quot;errMsg&quot;: @&quot;保存图片失败&quot;&#125;; &#125; &#125;@catch(NSException *ex) &#123; NSLog(@&quot;agan_app 截屏失败：%@&quot;, ex.description); return @&#123;@&quot;code&quot;: @500, @&quot;errMsg&quot;: @&quot;截屏失败&quot;&#125;; &#125;&#125;// 截屏- (NSData *)imageDataScreenShot&#123; CGSize imageSize = [UIScreen mainScreen].bounds.size; UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0); CGContextRef context = UIGraphicsGetCurrentContext(); for(UIWindow *window in [[UIApplication sharedApplication] windows])&#123; CGContextSaveGState(context); CGContextTranslateCTM(context, window.center.x, window.center.y); CGContextConcatCTM(context, window.transform); CGContextTranslateCTM(context, -window.bounds.size.width*window.layer.anchorPoint.x, -window.bounds.size.height * window.layer.anchorPoint.y); if ([window respondsToSelector:@selector(drawViewHierarchyInRect:afterScreenUpdates:)])&#123; NSLog(@&quot;agan_app 使用drawViewHierarchyInRect:afterScreenUpdates:&quot;); [window drawViewHierarchyInRect:window.bounds afterScreenUpdates:YES]; &#125;else&#123; NSLog(@&quot;agan_app 使用renderInContext:&quot;); [window.layer renderInContext:context]; &#125; CGContextRestoreGState(context); &#125; UIImage *image = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return UIImagePNGRepresentation(image);&#125;@end Android 截屏监听实现实现思路：通过 ContentObserver 获取文件变化捕获截图事件，捕获后为了去掉状态栏以及虚拟导航栏使用 normalShot 方法自己绘制当前页面然后保存，返回文件路径。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241// ScreenShotSharePackage.javapublic class ScreenShotShareModule extends ReactContextBaseJavaModule &#123; private static final String TAG = "screenshotshare"; private static final String NAVIGATION= "navigationBarBackground"; private static final String[] KEYWORDS = &#123; "screenshot", "screen_shot", "screen-shot", "screen shot", "screencapture", "screen_capture", "screen-capture", "screen capture", "screencap", "screen_cap", "screen-cap", "screen cap" &#125;; private static Activity ma; private ReactContext reactContext; /** 读取媒体数据库时需要读取的列 */ private static final String[] MEDIA_PROJECTIONS = &#123; MediaStore.Images.ImageColumns.DATA, MediaStore.Images.ImageColumns.DATE_TAKEN, &#125;; /** 内部存储器内容观察者 */ private ContentObserver mInternalObserver; /** 外部存储器内容观察者 */ private ContentObserver mExternalObserver; private HandlerThread mHandlerThread; private Handler mHandler; public ScreenShotShareModule(ReactApplicationContext reContext)&#123; super(reContext); this.reactContext = reContext; &#125; @Override public String getName() &#123; return "ScreenShotShare"; &#125; public static void initScreenShotShareSDK(Activity activity)&#123; ma = activity; &#125; @ReactMethod public void startListener()&#123; mHandlerThread = new HandlerThread("Screenshot_Observer"); mHandlerThread.start(); mHandler = new Handler(mHandlerThread.getLooper()); // 初始化 mInternalObserver = new MediaContentObserver(MediaStore.Images.Media.INTERNAL_CONTENT_URI, mHandler); mExternalObserver = new MediaContentObserver(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, mHandler); // 添加监听 this.reactContext.getContentResolver().registerContentObserver( MediaStore.Images.Media.INTERNAL_CONTENT_URI, false, mInternalObserver ); this.reactContext.getContentResolver().registerContentObserver( MediaStore.Images.Media.EXTERNAL_CONTENT_URI, false, mExternalObserver ); &#125; @ReactMethod public void stopListener()&#123; this.reactContext.getContentResolver().unregisterContentObserver(mInternalObserver); this.reactContext.getContentResolver().unregisterContentObserver(mExternalObserver); &#125; @ReactMethod public void hasNavigationBar(Promise promise)&#123; boolean navigationBarExisted = isNavigationBarExist(ma); promise.resolve(navigationBarExisted); &#125; private void handleMediaContentChange(Uri contentUri) &#123; Cursor cursor = null; try &#123; // 数据改变时查询数据库中最后加入的一条数据 cursor = this.reactContext.getContentResolver().query( contentUri, MEDIA_PROJECTIONS, null, null, MediaStore.Images.ImageColumns.DATE_ADDED + " desc limit 1" ); if (cursor == null) &#123; return; &#125; if (!cursor.moveToFirst()) &#123; return; &#125; // 获取各列的索引 int dataIndex = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA); int dateTakenIndex = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATE_TAKEN); // 获取行数据 String data = cursor.getString(dataIndex); long dateTaken = cursor.getLong(dateTakenIndex); // 处理获取到的第一行数据 handleMediaRowData(data, dateTaken); &#125; catch (Exception e) &#123; WritableMap map = Arguments.createMap(); map.putInt("code", 500); sendEvent(this.reactContext, "ScreenShotShare", map); e.printStackTrace(); &#125; finally &#123; if (cursor != null &amp;&amp; !cursor.isClosed()) &#123; cursor.close(); &#125; &#125; &#125; /** * 处理监听到的资源 */ private void handleMediaRowData(String data, long dateTaken) &#123; if (checkScreenShot(data, dateTaken)) &#123; Log.d(TAG, data + " " + dateTaken); saveBitmap(normalShot(ma)); &#125; else &#123; Log.d(TAG, "Not screenshot event"); WritableMap map = Arguments.createMap(); map.putInt("code", 500); sendEvent(this.reactContext, "ScreenShotShare", map); &#125; &#125; /** * 判断是否是截屏 */ private boolean checkScreenShot(String data, long dateTaken) &#123; data = data.toLowerCase(); // 判断图片路径是否含有指定的关键字之一, 如果有, 则认为当前截屏了 for (String keyWork : KEYWORDS) &#123; if (data.contains(keyWork)) &#123; return true; &#125; &#125; return false; &#125; private class MediaContentObserver extends ContentObserver &#123; private Uri mContentUri; public MediaContentObserver(Uri contentUri, Handler handler) &#123; super(handler); mContentUri = contentUri; &#125; @Override public void onChange(boolean selfChange) &#123; super.onChange(selfChange); Log.d(TAG, mContentUri.toString()); handleMediaContentChange(mContentUri); &#125; &#125; public void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, params); &#125; // 判断全面屏虚拟导航栏是否存在 public static boolean isNavigationBarExist(Activity activity)&#123; ViewGroup vp = (ViewGroup) activity.getWindow().getDecorView(); if (vp != null) &#123; for (int i = 0; i &lt; vp.getChildCount(); i++) &#123; vp.getChildAt(i).getContext().getPackageName(); if (vp.getChildAt(i).getId()!= NO_ID &amp;&amp; NAVIGATION.equals(activity.getResources().getResourceEntryName(vp.getChildAt(i).getId()))) &#123; return true; &#125; &#125; &#125; return false; &#125; // 当前APP内容截图 private static Bitmap normalShot(Activity activity) &#123; View decorView = activity.getWindow().getDecorView(); decorView.setDrawingCacheEnabled(true); decorView.buildDrawingCache(); Rect outRect = new Rect(); decorView.getWindowVisibleDisplayFrame(outRect); int statusBarHeight = outRect.top;//状态栏高度 Bitmap bitmap = Bitmap.createBitmap(decorView.getDrawingCache(), 0, statusBarHeight, decorView.getMeasuredWidth(), decorView.getMeasuredHeight() - statusBarHeight); decorView.setDrawingCacheEnabled(false); decorView.destroyDrawingCache(); return bitmap; &#125; // 获取当前APP图片存储路径 private String getSystemFilePath() &#123; String cachePath; if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) || !Environment.isExternalStorageRemovable()) &#123; cachePath = reactContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES).getAbsolutePath();// cachePath = context.getExternalCacheDir().getPath(); // 返回文件 uri，而非path &#125; else &#123; cachePath = reactContext.getFilesDir().getAbsolutePath();// cachePath = context.getCacheDir().getPath(); // 返回文件 uri，而非path &#125; return cachePath; &#125; // 保存截屏的bitmap为图片文件并返回路径 private void saveBitmap(Bitmap bitmap)&#123; Long time = System.currentTimeMillis(); String path = getSystemFilePath() + "/screen-capture-" + time + ".png"; Log.d(TAG, path); File filePic; WritableMap map = Arguments.createMap(); try&#123; filePic = new File(path); if (!filePic.exists()) &#123; filePic.getParentFile().mkdirs(); filePic.createNewFile(); &#125; FileOutputStream fos = new FileOutputStream(filePic); bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos); fos.flush(); fos.close(); map.putInt("code", 200); map.putString("uri", filePic.getAbsolutePath()); sendEvent(this.reactContext, "ScreenShotShare", map); // 强制关闭软键盘 ((InputMethodManager) ma.getSystemService(reactContext.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(ma.getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS); &#125;catch(IOException e)&#123; e.printStackTrace(); map.putInt("code", 500); sendEvent(this.reactContext, "ScreenShotShare", map); &#125; &#125;&#125; 分享功能我集成了Umeng的share SDK，但是没有现成的纯图片分享接口，需要自己封装 iOS1234567891011121314151617181920212223242526272829303132333435// UMShareModule.m 中自定义 shareImageRCT_EXPORT_METHOD(shareImage:(NSString *)url icon:(NSString *)icon platform:(NSInteger)platform completion:(RCTResponseSenderBlock)completion)&#123; UMSocialPlatformType plf = [self platformType:platform]; if (plf == UMSocialPlatformType_UnKnown) &#123; if (completion) &#123; completion(@[@(UMSocialPlatformType_UnKnown), @&quot;invalid platform&quot;]); return; &#125; &#125; UIImage *image = [UIImage imageWithContentsOfFile:url]; //创建分享消息对象 UMSocialMessageObject *messageObject = [UMSocialMessageObject messageObject]; //创建图片内容对象 UMShareImageObject *shareObject = [[UMShareImageObject alloc] init]; //如果有缩略图，则设置缩略图 shareObject.thumbImage = [UIImage imageNamed:icon]; [shareObject setShareImage:image]; //分享消息对象设置分享内容对象 messageObject.shareObject = shareObject; //调用分享接口 [[UMSocialManager defaultManager] shareToPlatform:plf messageObject:messageObject currentViewController:nil completion:^(id data, NSError *error) &#123; if (error) &#123; NSLog(@&quot;appppp %@&quot;, error); if (completion) &#123; completion(@[@-1, error]); &#125; &#125;else&#123; if (completion) &#123; completion(@[@200, data]); &#125; &#125; &#125;];&#125; Android12345678910111213141516171819202122232425// ShareModule.java 中自定义 shareImage@ReactMethodpublic void shareImage(final String url, final String icon, final int sharemedia, final Callback successCallback)&#123; runOnMainThread(new Runnable() &#123; @Override public void run() &#123; Uri uri = Uri.parse(url); File imageFile = new File(getPath(contect, uri)); UMImage image = new UMImage(ma, imageFile); new ShareAction(ma) .withMedia(image) .setPlatform(getShareMedia(sharemedia)) .setCallback(getUMShareListener(successCallback)) .share(); &#125; &#125;);&#125;// uri 转 pathprivate String getPath(Context context, Uri uri) &#123; String[] projection = &#123;MediaStore.Video.Media.DATA&#125;; Cursor cursor = context.getContentResolver().query(uri, projection, null, null, null); int column_index = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA); cursor.moveToFirst(); return cursor.getString(column_index);&#125; 封装调用封装1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// ScreenShotShareUtil.jsimport &#123; NativeModules, NativeEventEmitter, DeviceEventEmitter &#125; from 'react-native'let screenCaptureEmitter = undefinedexport default class ScreenShotShareUtil &#123; static startListener(callback)&#123; const ScreenShotShare = NativeModules.ScreenShotShare screenCaptureEmitter &amp;&amp; screenCaptureEmitter.removeAllListeners('ScreenShotShare') screenCaptureEmitter = Adapter.isIOS ? new NativeEventEmitter(ScreenShotShare) : DeviceEventEmitter screenCaptureEmitter.addListener('ScreenShotShare', (data) =&gt; &#123; if(callback)&#123; callback(data) &#125; &#125;) ScreenShotShare.startListener() return screenCaptureEmitter &#125; static stopListener () &#123; screenCaptureEmitter &amp;&amp; screenCaptureEmitter.removeAllListeners('ScreenShotShare') const screenCaptureEmitter = NativeModules.ScreenShotShare return screenCaptureEmitter.stopListener() &#125; static hasNavigationBar()&#123; if(!Adapter.isIOS)&#123; screenCaptureEmitter &amp;&amp; screenCaptureEmitter.removeAllListeners('ScreenShotShare') const screenCaptureEmitter = NativeModules.ScreenShotShare return screenCaptureEmitter.hasNavigationBar() &#125;else&#123; return false &#125; &#125;&#125;// ShareUtil.js// 分享图片export const shareImage = (url, platform) =&gt; &#123; platform = platform || 'weixin' let pl_int = 2 switch(platform)&#123; case 'weixin': pl_int = 2 break case 'timeline': pl_int = 3 break case 'qq': pl_int = 0 break case 'qzone': pl_int = 4 break case 'weibo': pl_int = 1 break default: pl_int = 2 break &#125; return new Promise((resolve, reject) =&gt; &#123; UMShare.shareImage(url, IMAGE_URL, pl_int, (code, message) =&gt; &#123; if(__DEV__)&#123; console.log(`分享图片到$&#123;platform&#125;`, code, message) &#125; &#125;) &#125;)&#125; 调用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128// index.jsimport ScreenShotShareModal from './ScreenShotShareModal'import &#123; ToastComponent &#125; from 'react-native-pickers'// ...componentWillMount()&#123; ScreenShotShareUtil.startListener(res =&gt; &#123; if(res &amp;&amp; res.code === 200)&#123; this.screenShotShareModal.show(res.uri) &#125;else&#123; ToastComponent.show('获取截图失败'); &#125; &#125;)&#125;componentWillUnmount()&#123; ScreenShotShareUtil.stopListener()&#125;render()&#123; return ( &lt;View style=&#123;&#123;flex: 1, backgroundColor: '#fff', justifiContent: 'center', alignItems: 'center'&#125;&#125;&gt; &lt;Text&gt;...&lt;/Text&gt; &lt;ScreenShotShareModal ref=&#123;ref =&gt; this.screenShotShareModal = ref&#125; /&gt; &lt;/View&gt; )&#125;// ...// ScreenShotShareModal.jsimport &#123; BaseDialog &#125; from 'react-native-pickers'import &#123; shareImage &#125; from './ShareUtil'import QRCode from 'react-native-qrcode-svg'import ViewShot from 'react-native-view-shot'export default class ScreenShotShareModal extends BaseDialog &#123; constructor(props) &#123; super(props) this.state = &#123; image: null, logoUri: 'base64://xxxxx', text: 'xxx' &#125; this.viewShot = React.createRef() &#125; show(uri)&#123; this.setState(&#123; image: uri &#125;, () =&gt; &#123; super.show() &#125;) &#125; renderContent()&#123; return ( &lt;View&gt; &lt;View&gt; &lt;ViewShot ref=&#123;this.viewShot&#125;&gt; &lt;View&gt; &lt;Image source=&#123;&#123;uri: (isIOS ? this.state.image : `file://$&#123;this.state.image&#125;`)&#125;&#125; /&gt; &lt;QRCode value=&#123;this.state.text&#125; size=&#123;60&#125; logo=&#123;&#123;uri: this.state.logoUri&#125;&#125; logoSize=&#123;15&#125; logoBackgroundColor='white' logoBorderRadius=&#123;3&#125; /&gt; &lt;Text&gt;扫描二维码下载《XXX》&lt;/Text&gt; &lt;/View&gt; &lt;/ViewShot&gt; &lt;/View&gt; &lt;View&gt; &lt;Text&gt;分享至&lt;/Text&gt; &lt;View style=&#123;styles.itemGroup&#125;&gt; &lt;View style=&#123;styles.item&#125;&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress=&#123; () =&gt; this._shareImage('weixin') &#125;&gt; &lt;Text&gt;微信&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;styles.item&#125;&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress=&#123;() =&gt; this._shareImage('timeline') &#125;&gt; &lt;Text&gt;朋友圈&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;styles.item&#125;&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress=&#123;() =&gt; this._shareImage('weibo') &#125;&gt; &lt;Text&gt;微博&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;styles.item&#125;&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress=&#123;() =&gt; this._shareImage('qq') &#125;&gt; &lt;Text&gt;QQ&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;View style=&#123;styles.item&#125;&gt; &lt;TouchableOpacity activeOpacity=&#123;0.9&#125; onPress=&#123;() =&gt; this._shareImage('qzone') &#125;&gt; &lt;Text&gt;空间&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; &lt;/View&gt; &lt;/View&gt; &lt;/View&gt; ) &#125; _shareImage(plf)&#123; this.viewShot.current.capture().then(imageUri=&gt;&#123; if(!isIOS)&#123; CameraRoll.saveToCameraRoll(imageUri).then(res =&gt; &#123; if(res)&#123; shareImage(res, plf) &#125; &#125;).catch(err =&gt; &#123; if(__DEV__)&#123; console.log(err) &#125; &#125;) &#125;else&#123; shareImage(imageUri, plf) &#125; &#125;) &#125;&#125;const styles = StyleSheet.create(&#123; itemGroup: &#123; flexDirection: 'row', justifyContent: 'space-between', padding: 15 &#125;, item: &#123; justifyContent: 'center', alignItems: 'center', flexDirection: 'column' &#125;&#125;) 参考文章 Umeng Share 文档 react-native-lewin-screen-capture iOS iOS捕捉截屏事件并展示截图 【ReactNative】与iOS组件间的相互调用 IOS原生模块向ReactNative发送事件消息 IOS 本地图片加载 Android Android 截屏监听（截图分享功能实现） Android 截屏事件监听 React Native之Android原生通过DeviceEventEmitter发送消息给js react native 中的ReadableMap和WritableMap的使用 Android – 超全的 File，Bitmap，Drawable，Uri, FilePath ,byte[]之间的转换方法 Android之uri、file、path相互转化 Android开发managedQuery方法过时如何解决 将bitmap对象保存到本地，返回保存的图片路径 Android普通截屏(不包括状态栏内容无状态栏占位仅包含应用程序) Android全面屏虚拟导航栏适配]]></content>
  </entry>
  <entry>
    <title><![CDATA[制作Kindle电子书]]></title>
    <url>%2F2019%2F11%2F21%2F188-make-kindle-ebook%2F</url>
    <content type="text"><![CDATA[txt文件初始格式文本格式识别用 enca12brew install encaenca file 使用iconv转换格式1iconv -c -f GB2312 -t UTF-8 file.txt &gt; newfile.txt]]></content>
  </entry>
  <entry>
    <title><![CDATA[发布 ReactNative 组件到 NPM]]></title>
    <url>%2F2019%2F11%2F21%2F189-publish-react-native-component-to-npm%2F</url>
    <content type="text"><![CDATA[截屏捕捉组件1npm i react-native-screenshotcatch 背景前一段时间写的 react-native 截屏监听功能是直接写进项目中的，现在打算将其单独封装发布到 NPM 上去，之前也发过一个命令行工具但是没有写文记录一下过程，这次补上 实现使用 react-native-create-libraryreact-native-create-library 是一个自定义组件模板工具，比自己去创建省很多麻烦 123npm i -g react-native-create-library # 安装react-native-create-library --package-identifier com.dreamser.screenshotcatch --platforms android,ios screenshotcatchmv screenshotcatch react-native-screenshotcatch 更新 build.gradlereact-native-create-library 中的依赖版本太低，需要更新一下 编写代码请见 React Native 实现截图添加二维码分享功能 完善 readmereact-native-create-library 已经为你准备了基础的模板，具体内容需要自己来添加 上传 github初始化本地repo，在github创建远程repo，连接，上传代码…在这里不做赘述 完善 package.jsonpackage.json文件定义了发布的所有信息，包括：组件名、版本、作者、描述、依赖等等关键信息。具体可以参照 Creating a package.json file 1234567891011121314151617181920212223242526272829&#123; "name": "react-native-screenshotcatch", "version": "0.0.1", "description": "A ReactNative Tool for catch Screen Shot Event", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "keywords": [ "react-native", "screen-shot", "screen-capture", "ios", "android" ], "author": &#123; "name": "callcter", "email": "sharpliuzigu@gmail.com" &#125;, "license": "MIT", "repository": &#123; "type": "git", "url": "git@github.com:callcter/react-native-screenshotcatch.git" &#125;, "peerDependencies": &#123; "react-native": "^0.41.2" &#125;&#125; 发布到 NPM1234npm adduser # 创建 NPM 账号npm login # 如果已经在官网有账号，可以直接登录npm whoami # 查看登录状态npm publish # 发布 发布时可能遇到 publish Failed PUT 403 错误，原因是更改了镜像源 123npm config get registry # 查看当前镜像源npm config set registry=http://registry.npmjs.org # 更改回官方镜像源npm publish # 重新发布 NPM 更新npm 提供官方提供了npm version来进行版本控制，其效果跟手动修改package.json里面的version字段是一样的，好处在于，可以在构建过程中用npm version命令自动修改，而且具有语义化即Semantic versioning 12npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git] 语义为： 1234567major：主版本号（大版本）minor：次版本号（小更新）patch：补丁号（补丁）premajor：预备主版本preminor: 预备次版本prepatch：预备补丁版本prerelease：预发布版本 参考文章 开发自己的react-native组件并发布到npm frostney/react-native-create-library NPM包（模块）发布、更新、撤销发布]]></content>
  </entry>
  <entry>
    <title><![CDATA[Umeng 社会化分享集成（微信、QQ、微博、小程序）]]></title>
    <url>%2F2019%2F11%2F21%2F184-react-native-umeng-share%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[iOS开发Certificates, Identifiers & Profiles介绍]]></title>
    <url>%2F2019%2F11%2F21%2F175-ios-Certificates-config%2F</url>
    <content type="text"><![CDATA[在 iOS 开发过程中，必定需要接触开发者中心的各种证书配置。 下图是开发者中心证书配置页面的导航栏，分别是 Certificates、Keys、Identifiers、Devices、Provisioning Profiles CertificatesCertificates 是用来证明iOS App内容（executable code）的合法性和完整性的数字证书。对于想安装到真机或发布到AppStore的应用程序（App），只有经过签名验证（Signature Validated）才能确保来源可信，并且保证App内容是完整、未经篡改的。 数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。具有时效性，只在特定的时间段内有效。 iOS证书分为”开发证书“和”生产证书“两种，开发证书用于开发和调试APP，生产证书用于发布APP。然后证书根据具体用途，还有其他分类，如消息推送证书、支付证书等。下图是全部种类的证书，在开发时根据需求生成。 KeysKeys 是APP开启服务的凭证，与证书的作用类似，但是可以开启的服务较少。 IdentifiersIdentifiers 即标识符，相当于应用或服务的身份证，最常用的就是我们开发APP时使用的App IDs。 App ID分为Explicit（精确）和Wildcard（通配）两种，Explicit类型的App ID需要跟APP的bundle id一样。同时，在创建App ID时需要选择包含的服务，如推送、支付等。下图是App ID的创建页面。 DevicesDevices 是指运行iOS系统用于开发调试App的设备（即苹果设备）。每台Apple设备使用UDID来唯一标识。在创建Provisioning Profiles时需要选择设备，在证书中包含的设备才能安装APP。 Provisioning ProfilesProvisioning Profiles 是应用的配置文件，其中包含了 证书、App ID和设备，也是根据用途有不同的种类。 最后在Xcode的配置 参考文章 iOS开发证书与配置文件的使用 iOS 开发者账号和证书]]></content>
  </entry>
  <entry>
    <title><![CDATA[react-native-code-push 集成]]></title>
    <url>%2F2019%2F11%2F21%2F176-code-push%2F</url>
    <content type="text"><![CDATA[流程 安装 CodePush CLI 注册 CodePush账号 在CodePush服务器注册App RN代码中集成CodePush 原生应用中配置CodePush 发布更新的版本 安装1npm i -g code-push-cli 注册1code-push register 其他指令1234code-push login // 登陆code-push logout // 注销code-push access-key ls // 列出登陆的tokencode-push access-key rm &lt;accessKey&gt; // 删除某个 access-key 添加 APP1code-push app add &lt;projectName&gt; &lt;ios|android&gt; react-native 其他指令123456code-push app add // 在账号里面添加一个新的appcode-push app remove // 或者 rm 在账号里移除一个appcode-push app rename // 重命名一个存在appcode-push app list // 或则 ls 列出账号下面的所有appcode-push app transfer // 把app的所有权转移到另外一个账号code-push deployment ls &lt;appName&gt; -k // 查看 app 下的 development key 发布更新1code-push release-react &lt;appName&gt; &lt;platform&gt; --t &lt;version&gt; --d &lt;deploymentName&gt; 回滚12code-push rollback &lt;appName&gt; &lt;deploymentName&gt;// code-push rollback MyApp Production --targetRelease v1 查看发布历史1code-push deployment history &lt;appName&gt; &lt;deploymentName&gt; 清除发布历史12// 运行此命令后，那些已经配置了使用关联的部署密钥的客户端设备将不再接收被清除掉的更新。这个命令是不可逆的,因此不应该使用在生产部署。code-push deployment clear &lt;appName&gt; &lt;deploymentName&gt; RN集成在项目中安装 react-native-code-push12npm i react-native-code-pushreact-native link react-native-code-push 代码 index.js123456789101112import &#123; AppRegistry &#125; from &apos;react-native&apos;import CodePush from &apos;react-native-code-push&apos;import App from &apos;./App&apos;import &#123;name as appName&#125; from &apos;./app.json&apos;const codePushOptions = &#123; checkFreQuency: CodePush.CheckFrequency.MANUAL&#125;const AppWithCodePush = CodePush(codePushOptions)(App)AppRegistry.registerComponent(appName, () =&gt; AppWithCodePush) 代码 App.js12345678910111213import CodePush from &apos;react-native-code-push&apos;export default class App extends React.Component &#123; componentWillMount()&#123; CodePush.disallowRestart() CodePush.sync(&#123; updateDialog: false, installMode: CodePush.InstallMode.IMMEDIATE &#125;) &#125; componentDidMount()&#123; CodePush.allowRestart() &#125;&#125; 参看文章 CodePush 命令行中文版 React Native应用部署/热更新-CodePush最新集成总结(新) CodePush热更新详细接入教程 react-native-code-push进阶篇 App Center Microsoft/react-native-code-push]]></content>
  </entry>
  <entry>
    <title><![CDATA[Brew 更换镜像源]]></title>
    <url>%2F2019%2F11%2F21%2F177-brew-source%2F</url>
    <content type="text"><![CDATA[使用官方源时经常卡在 homebrew upgrade … 的命令处，所以需要更换一下镜像源，当前好用的是清华的镜像源。 替换方式1234567cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.gitcd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew update 还原方式1234567cd &quot;$(brew --repo)&quot;git remote set-url origin https://github.com/Homebrew/brew.gitcd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://github.com/Homebrew/homebrew-corebrew update]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建 CodePush 服务器]]></title>
    <url>%2F2019%2F11%2F21%2F179-code-push-server%2F</url>
    <content type="text"><![CDATA[所有操作都是在 code-push-server 目录下 修改配置文件 config/config.js 配置 db 配置 存储方式，我用的是 qiniu 修改 common 配置，修改 storageType 为自己所用的存储方式，比如我的事 qiniu 服务启动启动脚本是 bin/www，可以自己修改端口 进程维护我用的是 forever 1forever start bin/www 官方的README很好，完全可以按照那个来，只是有几个地方 使用 pm2 管理进程始终有问题，我自己换成了 forever 我使用 export NODE_ENV=production 的方式将环境变量写入 profile 文件，没有选择在进程中配置 注意 使用自己搭建的服务器在集成 react-native-code-push 时要记得修改 info.plist 和 MainApplication.java，添加服务器的地址，详细方式可见 code-push-server 使用+一些需要注意的地方——react-native项目配置和发布 参考文章 github repo code-push-server 使用+一些需要注意的地方]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用 NVM 管理 NodeJS 版本]]></title>
    <url>%2F2019%2F11%2F21%2F180-use-nvm%2F</url>
    <content type="text"><![CDATA[安装参见 repo readme 切换镜像源官方的镜像源下载速度太慢，需要切换到国内的 1export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node 参考文章 github repo]]></content>
  </entry>
  <entry>
    <title><![CDATA[flutter 入门（Mac）]]></title>
    <url>%2F2019%2F11%2F21%2F181-flutter%2F</url>
    <content type="text"><![CDATA[背景近一年时间都在用 React Native 开发公司的 APP，水平基本上可以说是登堂入室了。前一段时间兴起一阵 Flutter 热，后端的同事都有推荐，今年 Google 大会又推出 flutter_web，偶有闲暇，就赶紧来看看这个新的多端兼容框架。 与 RN 的封装原生组件通过 Bridge 调用不同，Flutter 的模式是使用 Google 的 UI 引擎另起炉灶，使用 Dart 语言编写，最终还是编译成原生的代码。性能方面相较RN有所提升，但是RN已经有近5年的发展了，社区相当活跃，Flutter的底层组件完全依赖Google的开发，而且起步晚，所以功能上面并不完备。 安装、配置和入门实例可以按照官方的文档——Flutter 入门，文档非常详细。 有几个注意的地方 Flutter 安装的版本，我选择的是最新版本的 Beta 版本，内容比较新而且问题相对较少 环境变量的配置，我的是 Mac + zshell，所以我将变量写进 .zshrc 文件中 编辑工具的选择，我暂时用的是 Android Studio Android Studio 安装 Flutter 和 Dart 插件后在启动预览界面会出现“Start a new Flutter project”的选项，点击之后需要等待一段时间，并不是进程死掉 新建项目时，配置完成之后开始创建，弹出“Creating Flutter Project”的窗口，会一直卡住，我开VPN用全局模式都不行，大概10分钟左右项目基本结构已经创建好了，这时候强制退出 Android Studio 的进程，然后重新打开，选择项目打开，进入项目之后会提示修复项目，马上就能修复好 官方组件地址 http://pub.dartlang.org/flutter 打不开，当然，可能是我们家的网有问题 Android 模拟器无法安装实例，我只能用 iOS 的模拟器测试 总结 可能是习惯问题，感觉 RN 写起来更舒服一些，用 Wedget 写起来太乱了，而且很死板 相关配套的服务不太完善，如pub等 之前一直在用文本编辑器写代码，用了一下 IDE，好省事]]></content>
  </entry>
  <entry>
    <title><![CDATA[Node版本升级]]></title>
    <url>%2F2019%2F11%2F21%2F178-node-version-update%2F</url>
    <content type="text"><![CDATA[更新步骤 使用 NVM 安装新版本 NodeJS NPM 查看之前安装的全局包，在新版本中安装 指令指南NPM12npm list -g --depth 0 // 查看 NPM 全局安装的组件npm i -g npm // 更新 NPM NVM12345nvm list // 查看已安装版本nvm ls-remote // 查看可安装版本nvm install v10.15.3 // 安装版本nvm use v10.15.3 // 切换版本nvm alias default v10.15.3 // 设置默认版本]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS新手常见错误：this class is not key value coding-compliant for the key xx]]></title>
    <url>%2F2019%2F11%2F21%2F182-ios-noob-(this%20class%20is%20not%20key%20value%20coding-compliant%20for%20the%20key%20xx)%2F</url>
    <content type="text"><![CDATA[reason：[&lt;xx项目名.xxController&gt; setValue:forUndefinedKey]:this class is not key value coding-compliant for the key xxXcode控制台报这个错误的时候，说明IBAction和IBOutlet有多余或者错误的连线。解决方法：1.在storyboard上选中（点击黄色圈圈）reason中提及的xxController2.点击属性栏最右边的show the connections inspector（箭头）那里，将显示黄色感叹号的删去重新连接即可。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android Studio 手动安装 gradle 包]]></title>
    <url>%2F2019%2F11%2F21%2F165-android-studio-manual-gradle-package%2F</url>
    <content type="text"><![CDATA[参考文章 [Android Studio系列(五)] Android Studio手动配置Gradle的方法]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解 M0、M1、M2]]></title>
    <url>%2F2019%2F11%2F21%2F167-m0-m1-m2%2F</url>
    <content type="text"><![CDATA[公司业务需要，经常要接触一些经济学金融学内容，在分析宏观经济时，最常用的指标应该就是货币供应 M0、M1、M2 了。 参考文章 白话货币供应的三兄弟——M0、M1、M2 深入解读M0、M1、M2]]></content>
      <tags>
        <tag>经济金融</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[APP 上架 App Store 流程]]></title>
    <url>%2F2019%2F11%2F21%2F168-app-store-upload%2F</url>
    <content type="text"><![CDATA[App 开发了许久，终于迎来上线测试的时刻… 1. 创建 APP IDs（1）打开开发者中心页面（2）点击 证书、ID及配置文件，进入配置（3）选择 App IDs，创建一个 App ID 2. 申请 iOS 证书3. 在 App Store Connect 创建 App 信息 App Store Connect 需要做以下工作： 填写 App 信息 确定价格与销售范围 上传 App 预览和屏幕快照 4. xCode 打包 App 并上传参考 App Store Connect 帮助]]></content>
      <tags>
        <tag>react native</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android gradle 中 compile,implementation,api 的区别]]></title>
    <url>%2F2019%2F11%2F21%2F166-android-gradle-dependencies-compile-implementation-api%2F</url>
    <content type="text"><![CDATA[当你发现某个module明明已经引用了，但是module里的方法却找不到，问题应该就出现在这里 参考文章 Android gradle3.x中 implementation 、compile、api区别]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js变量、作用域、作用域链]]></title>
    <url>%2F2019%2F11%2F21%2F169-js-variable-scope-chain%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[理解 js 闭包]]></title>
    <url>%2F2019%2F11%2F21%2F170-js-closure%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[服务器配置 https 访问]]></title>
    <url>%2F2019%2F11%2F21%2F171-server-https%2F</url>
    <content type="text"><![CDATA[小程序 request 请求后台必须使用 https，所以我的网站必须升级为 https 配置列表 ubuntu 16.04 nginx 1.10.1 证书阿里云签发的免费证书，期限是一年 配置文件123456789101112131415161718192021server &#123; listen 80; listen 443 ssl; server_name 115.28.16.103 www.dreamser.com dreamser.com; ssl on; ssl_certificate cert/dreamser.pem; ssl_certificate_key cert/dreamser.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; root /home/www/station; location ~ &#123; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Connection &quot;&quot;; proxy_pass http://127.0.0.1:4003; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[七牛配置 https]]></title>
    <url>%2F2019%2F11%2F21%2F172-qiniu-https%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[节流与防抖动]]></title>
    <url>%2F2019%2F11%2F21%2F173-throttle-debounce%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[同比与环比]]></title>
    <url>%2F2019%2F11%2F21%2F174-%E5%90%8C%E6%AF%94%E4%B8%8E%E7%8E%AF%E6%AF%94%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[react-native 版本检测更新解决方案]]></title>
    <url>%2F2019%2F11%2F21%2F158-react-native-update%2F</url>
    <content type="text"><![CDATA[参考文章 github]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当爸爸了]]></title>
    <url>%2F2019%2F11%2F21%2F159-be-a-father%2F</url>
    <content type="text"><![CDATA[1月2号晚上八点我还在公司，突然接到老婆的电话，电话里就能听出她满满的喜悦，她说羊水破了，现在在医院，让我过去。 我赶紧收拾东西开车往回走，总共100多公里，均速80。 直接到医院，看到躺在病床上的老婆，目前还生不着，只是羊水破了。羊水破了，宝宝在肚子里可能缺氧，需要定时做胎心监测，我妈、岳母都陪在医院，但是病房不是单间，晚上他们挤在一张带过来的陪护床上，我坐在椅子上，偶尔睡几分钟，就这样过了一夜。 1月3号，需要打催产针，从上午8:30到下午4:30，中午吃饭也是在待产室里。最后查了一次骨缝，开了一个多，宫颈成熟度只有6成。 催产针的作用是刺激宫缩，然后促进宫颈成熟软化，开骨缝。有一个说法，世界上的疼痛分为10个等级，生产是10。打了一天催产针，相当于忍受了一天的3级疼，老婆整个人都憔悴了。更重要的是，她很担心宝宝在肚子里会缺氧。 又是一夜检查，中间还进过一次胎心监护室，因为护士到病床用小的监护仪看到的胎心不稳定。 1月4号，继续打催产针。今天的疼痛得是昨天的两倍，老婆疼的哭了。十一点半的时候查了一次骨缝，还是一个多，宫颈勉强到了八成。我去检查室帮老婆穿衣服，看她躺在床上哭的稀里哗啦，心疼的难受。 中午拿饭的时候跟岳母说，别让他打催产针了，咱们剖腹产吧。岳母又找了在助产部的阿姨，阿姨说再坚持坚持，然后带岳母进待产室看了一下老婆。看到了她满脸的泪水。老婆让我进待产室陪她，就是怕岳母看了难受。岳母跟老婆说，不哭，坚持住，很快就好了。 饭后继续打催产针，每次宫缩来到，我让老婆紧抓着我的手，跟她说深呼吸。她咬牙，呼气，吸气，紧抓我的手，让我使劲捶他的胯骨，在床上转来转去，中间几次都疼的失去了意识。“我不要生孩子了。”“求求你放过我吧。”“我们剖腹吧。”看到老婆这样子，我心疼但是却没有办法，只能给她鼓劲。 下午三点半，忍得实在受不了了，让阿姨来查一次骨缝。谢天谢地，开了快3个了。我从待产室出来，老婆被带去打无痛。 四点多，阿姨出来说已经开了6个了。 快五点，阿姨出来说16:45生的，顺产，是个女孩，等两个小时之后才能出来。全家人的心终于放下来了。岳母这个时候说，她早就忍不住想让老婆剖腹产了，是阿姨劝住她。一切痛苦都已过去，不需要忍受剖腹产回复的疼痛，真的是幸运，也多亏了阿姨。 我就在外面等着，并不清楚自己即使怎样一种感觉，并没有太兴奋，可能只是如释重负吧，老婆终于不用再受罪了。 将近七点，老婆跟宝宝被推出来，一家人涌上去，盖被子，然后回到七楼的病房。到了病房，安顿下来，一个邻居家的阿姨说，“刚刚她从产房出来也没拍下来。”哪有那个心情呀。 一整晚上，小宝宝都睁着眼睛，真的是可爱极了，这就是老婆经过十月怀胎，忍受分娩之疼后生下来的小懒呀！]]></content>
  </entry>
  <entry>
    <title><![CDATA[小懒病了]]></title>
    <url>%2F2019%2F11%2F21%2F160-lily-is-sick%2F</url>
    <content type="text"><![CDATA[一月八号，天气晴，中午的阳光尤其不错。 还未来得及细细品味初为人父的快乐，下午送小懒奶奶到车站回来，刚到小区门口就她姥姥的电话问我到哪儿了。我停下车进屋才知道小懒刚刚抽搐了，时间持续了40多秒。她姥姥已经联系了在医院的一个阿姨，我们赶紧带她过去，办好住院。 阿姨帮忙联系了一位主任，大夫第一个提到的是抽风，先做CT检查是否有脑部大量出血，她姥姥当时脸色就变了。NICU的一位医生，小懒的姥姥姥爷，在儿科做护士的她的一个阿姨，我，从医院的最北边跑到最南边，做了CT。还好，没有大量出血，最严重的问题可以排除。 我们又回到NICU，这时候需要把小懒放进恒温箱观察，小懒被推进去，然后返回来她的衣服被褥，这个时候我的心就被揪住了，好像有什么东西被硬生生的拿走。 一会儿，小懒的大姨也赶了过来。 大概几分钟之后，医生做完外部检查出来跟我们确认情况。湿疹，皮肤有红色斑点，腋下皮肤有破损，喉咙嘶哑。这些我们都知道。湿疹是因为怕她冷然后衣服被子多了；斑点是黄疸导致的，当时还没消退；皮肤损坏因为那个地方擦拭的时候没擦到；嘶哑是因为哭哑了，出生至今她都没吃饱过，一饿就哭，但是她妈妈还没有多少奶。这些也都没什么问题，而现在也还不知道是什么原因导致她抽搐。 接下来就是等待详细的检查。我们在外面等着，小懒姥爷忽然说小懒在哭，她姥姥靠近窗口听了听，嗯，是小懒在哭。她的哭声很有特点，声音最大的那个就是她，而且很尖锐，一声高过一声。我们就在外面讨论小懒为什么会抽搐。缺钙，吸奶太厉害了导致缺氧等等等。年轻的安慰年长的，说没什么大问题，最坏的已经排除了。我还另外安慰着我老婆，她容易乱想，还喜欢什么病症都到百度上去查。突然，她姥爷手机响起对话，“抽风可能会导致脑膜炎…”，我说，爸，你别听那个，百度查的都使劲往重里说，没有可信的，那些问题我们都排除了。 百度可恨！垃圾公众号可恨！ 终于，医生出来，我们连忙问刚刚小懒为什么哭，说是取血，都会哭，没事儿。说小懒现在睡了，也没再抽搐，结果需要明天才能出来，现在先观察者。然后讲了一些住院需要准备的一些东西，我们就走了，放小懒一个人在那里… 回到家，老婆已经吃了她二表姐做的饭，一个邻居阿姨在帮忙给她热敷下奶。我们都跟她说大问题没有，详细结果明天出，怕她想太多，老婆面色平静，说，奥，知道了，没事儿就行。我们一顿收拾，用吸奶器好不容易吸出来大概30ml，准备了尿不湿、湿巾、纸巾，八点半左右送到医院。东西不够了去买，奶要三小时送一次。 八点半送到第一次。医生说小懒睡了，没抽搐。 十一点送到第二次。医生说用奶喂过一次了，睡了，没抽搐。 我回到家，其他人都回了，房间里就剩我们两个人，老婆躺在床上，那些小懒返回来的衣服，眼里的泪水就要流下来了。我只能安慰她说：“小懒肯定是饿的，吸那么长时间却只能喝到几滴，能不饿到抽搐吗。现在在医院，如果咱们不去送奶，她就只能喝医院的奶粉，谁知道是什么奶粉，咱们赶紧挤奶，让小懒吃得舒舒服服的吧。”老婆抹了抹眼泪，忍着涨奶的痛用吸奶器。 1月9日，零点三十五分。 1月9日，三点十五分。 我喝红牛撑到六点，准备叫老婆起来挤奶，叫了一下没反应，索性就不叫了。睡吧，睡起来也许小懒就回来了。 八点起来，饭还没吃，就赶紧挤奶。 十点四十分再挤奶，近十一点半，送完回来，突然接到医院的电话。之前在医院说过，有什么事情会电话通知，要保持电话通畅。没有消息是最好的消息。我忐忑的接了电话，说是下午一点半要带小懒去做核磁共振，因为昨天晚上CT的报告出来了，脑白质密度减低，需要用核磁共振做更详细的检查。家里又炸了锅。不是说CT没事吗？为什么还要做核磁共振？脑白质减低是什么意思？几天大的小孩能做核磁共振吗？ 一点半开车带小懒姥姥去医院，抱小懒去做了核磁共振，结果要24小时之后出。 晚上，联系上了校友群的一位师兄，帮忙出主意说要不要转去青岛的医院，可以帮忙找那边的专家。我妈联系上了一个在CT室的亲戚，帮忙看了小懒的磁共振结果，没有问题。岳母联系了几个在医院的朋友，也都说小孩这样挺正常的。岳母说，之前老婆三表哥家的小孩有更严重的问题，最后也没管，现在也好好的。但是这是自己的孩子，天天守在身边的呀！ 今天晚上只送了两次奶，到后面都熬不住了，只能让小懒吃奶粉了。 1月10号，跟师兄几次沟通之后，决定先拿到小懒的检查报告回青岛找位专家看看，先让他出院。但是，新的状况又出现了。我去医院拍了小懒的检查报告发给老婆，发现1月9号的血糖检查只有2.06，正常范围应该是3.9-6.0，如果低于2.2就可以判断为低血症！积蓄了几天的情绪一下子爆发了！如果真的是低血症，那么小懒就要一辈子都要挂葡萄糖，不可治。我妈我岳母着急，想找这个人看看找那个人看看，岳父就一直跟老婆说着一定能治，老婆急的要哭。我说完这个说那个，怎么也劝不住老婆。我说，下午咱们一块去医院问医生。 漫长的等待，终于熬到了一点半，等到医院上班。让老婆穿的厚厚的，就带她去了医院，本来坐月子是不应该出去的。 “葡萄糖2.06可能是因为护士采血是在早上五六点钟，送过去检测是十点，这过程有损耗。晚上送进医院的时候是4.7，这个是准的，很正常，低血症的概率非常非常低。CT跟核磁共振结果也都没问题。现在还在等血培养的结果，需要五天时间。” 听了医生的讲解，终于是都放下心来。然后我们商量着让小懒出院，因为医院为了不让小孩哭会用安定。让小懒下午再查了一次血，得到结果正常，全解人的心才算放下。 晚上六点我回到青岛，准备明天上班。 1月11号，早上老婆去医院接小懒出来，一整天都没有再抽搐。晚上大雾加小雨，一下班我就开车赶回家，看到了在睁着眼睛玩的小懒。从小到大，这是第一次这样牵肠挂肚。 1月12号，使老婆家那里的习俗——九日，亲戚朋友都来看看小懒一起吃个饭。我奶奶也来看小懒，出生之后小懒一直在岳母家，怕我们家太冷了。奶奶一会儿给小懒盖盖被子，一会儿给她整理整理衣服，真是喜欢极了这个小宝宝。这是我们家第四代的第一个宝宝，终于抱上了重孙女，四世同堂了。小懒也是给面子，一直睁着眼睛。 1月13号，健健康康的小懒… 我们再回想，可能她就是饿的，出生4天，老婆没有奶，吃奶粉就全吐掉，真是可怜，幸亏住院的这段时间老婆的奶也养好了。 希望小懒健康快乐的成长！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 异常捕捉处理组件——react-native-exception-handler]]></title>
    <url>%2F2019%2F11%2F21%2F161-react-native-exception-handler%2F</url>
    <content type="text"></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native Android 手机返回键处理]]></title>
    <url>%2F2019%2F11%2F21%2F162-react-native-android-back%2F</url>
    <content type="text"></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native Android 多渠道打包]]></title>
    <url>%2F2019%2F11%2F21%2F163-react-native-android-multi-channel%2F</url>
    <content type="text"><![CDATA[参考文章 友盟多渠道打包 Android Apk 友盟 ReactNative 集成文档 Gradle中productFlavors使用详解 Android获取Manifest中meta-data元素的值 Gradle实战：Android多渠道打包方案汇总 Android打包系列——多渠道打包及签名 Cannot set the value of read-only property ‘outputFile’]]></content>
      <tags>
        <tag>android</tag>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 友盟推送集成]]></title>
    <url>%2F2019%2F11%2F21%2F164-react-native-umeng-push%2F</url>
    <content type="text"><![CDATA[参考文章 Umeng React Native Demo React Native 的友盟推送 Umeng U-Push集成文档]]></content>
      <tags>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年前端面试]]></title>
    <url>%2F2019%2F11%2F21%2F152-2019-front-end-interview%2F</url>
    <content type="text"><![CDATA[看到一篇文章，分享一下 面试题中文翻译 答案 JavaScript 浮点数陷阱及解法]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android Gradle 入门]]></title>
    <url>%2F2019%2F11%2F21%2F153-android-gradle%2F</url>
    <content type="text"><![CDATA[参考文章 Android Gradle 看这一篇就够了 Gradle配置最佳实践 配置构建 Android Gradle实用技巧(五) | 善用AndroidManifest占位符 Gradle全局变量设置、自定义BuildConfig]]></content>
  </entry>
  <entry>
    <title><![CDATA[react-native 微信]]></title>
    <url>%2F2019%2F11%2F21%2F154-react-native-wechat%2F</url>
    <content type="text"><![CDATA[使用插件 react-native-wechat 因为这个插件更新很不及时，所以更换为 https://github.com/rayqian/react-native-wechat.git 这个 fork 注意 微信识别的 application id 是 AndroidManifest.xml 中配置的 package，发布时只修改 build.gradle 中的 applicationId 不行]]></content>
  </entry>
  <entry>
    <title><![CDATA[RN 启动图组件——react-native-splash-screen]]></title>
    <url>%2F2019%2F11%2F21%2F156-react-native-splash-screen%2F</url>
    <content type="text"><![CDATA[参考文章 github react-native-splash-screen集成实践（ios &amp; android）]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-native 友盟集成]]></title>
    <url>%2F2019%2F11%2F21%2F157-react-native-umeng%2F</url>
    <content type="text"><![CDATA[参考文章 文档 github example]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年计划&完成情况记录]]></title>
    <url>%2F2019%2F11%2F21%2F155-2019-plans%2F</url>
    <content type="text"><![CDATA[工作 React Native 更进一步，APP 优化 Android 原生 iOS 原生 学习 了解语言底层机制，nodejs为先 完善网站，添加装修模块 写博客，补博客，增加游戏板块权重 小懒看书上线 Dota2Helper 上线 学习粤语 看书，及写读后感——《原则》、《》 生活 小懒 出游计划]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[写点儿游戏推荐]]></title>
    <url>%2F2019%2F11%2F21%2F147-start-game-recommend%2F</url>
    <content type="text"><![CDATA[我的爱好是下游戏，嗯，就是下游戏，打开看看，差不多的留下，没兴趣的就删掉，留下来的也基本上不完，就那么放着，等内存满了再删。 现在手机里有 腾讯系天天酷跑、王者荣耀、绝地求生刺激战场、疯狂动物城 网易系 明日之后、楚留香、流星蝴蝶剑 EA系模拟城市、极品飞车无限通缉、真实赛车3 国产杂系 极品芝麻官、航海王强者之路、忍者必须死3、冠军网球 Google Play系 Bike Race、Plague Inc、My Cafe、公路骑手、Fashion Empire、Boxing Star、Cover Fire、Sniper 3D Assassin、Coco系列、勇闯死人谷2、眩晕赛车、Survival on Raft、梦想家居]]></content>
  </entry>
  <entry>
    <title><![CDATA[游戏推荐 —— 疯狂动物城：筑梦日记]]></title>
    <url>%2F2019%2F11%2F21%2F148-feng-kuang-dong-wu-cheng%2F</url>
    <content type="text"><![CDATA[游戏介绍《疯狂动物城：筑梦日记》是迪士尼正版IP授权，由腾讯游戏四大工作室群之一的北极光工作室群开发一款消除加经营类的手机游戏。游戏的基本玩法是消除，与在国内相当火爆的消除游戏《开心消消乐》基本相同，它最吸引人的地方是它的经营玩法，通关完成后可以获得灯泡，然后消耗灯泡，让动物城的明星警官朱迪和尼克带领着重建庄园。 《疯狂动物城》是2016年3月由迪士尼拍摄的一部动画电影，无论是技术还是剧情都是顶尖水准，如果你还没看过，建议补一下，只有看过电影之后才能领略这款游戏的魅力。游戏是在原来电影剧情基础上的拓展，朱迪被水牛警官安排来重建一座庄园，之前失踪的水獭以及他长大后的儿子、小仓鼠们、大先生的保镖、长颈鹿父子等等角色，并与他们一起探索后续的故事，对影迷的吸引力非常大，我跟老婆都玩得爱不释手。 在游戏的效果上，秉承腾讯一贯的作风，基本上无可挑剔。在互联网公司里，腾讯的产品经理是公认的优秀。画面精致，人物细腻，音效可爱，活动丰富，玩起来只会感觉体力不够，绝不会厌倦。 另外，有QQ和微信两大用户群体做基础，能有小伙伴们一起快乐的玩耍，一较高下，就更能激发玩家的热情。 以上是这款游戏的优点，再说一下一些负面的评价。 腾讯，永远避不开的一个话题就是“抄袭”。一直在抄袭，从未被超越，嗯，这就是腾讯的产品牛逼的地方。提到消除类的游戏，必须要提到他的鼻祖（这个说法可能不太确切，但各种玩法基本上都是借鉴他的） King 的《Candy Crush Saga》，《开心消消乐》也是借鉴他的玩法。而添加经营的元素，创意则是来自《梦幻花园》系列。 腾讯是《开心消消乐》的运营商之一，而《Candy Crush Saga》的国内代理权也是腾讯的，叫做《糖果传奇》，不能不说，真是财大气粗呀，能抄的就抄，抄不了的就买。 相关推荐 《Candy Crush Saga》 《开心消消乐》 《梦幻花园》your browser does not support the video tag 题外话消除类游戏是现在主流游戏类别之一，兼娱乐与益智多重属性，实属男女朋友、家长儿童一起玩耍的良品。]]></content>
      <tags>
        <tag>游戏推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 git-flow 规范工作流程]]></title>
    <url>%2F2019%2F11%2F21%2F149-git-flow%2F</url>
    <content type="text"><![CDATA[git-flow 是什么git-flow 是 git 的一个扩展集，按 Vincent Driessen 的分支模型提供高层次的库操作。 参考文章 Learn Version Control with Git git-flow 备忘清单 A successful Git branching model]]></content>
      <tags>
        <tag>开发工具</tag>
        <tag>高效开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 上使用 Charles 进行手机抓包调试]]></title>
    <url>%2F2019%2F11%2F21%2F150-mac-charles-android%2F</url>
    <content type="text"><![CDATA[RN 开发时虽然可以借助 remote-devtools 等工具在 chrome 中调试，但是在有些场景下，比如微信登录，不能用 chrome 调试，这个时候就需要抓包工具的帮助了，在 Mac 上首选 Charles。 安装 官网下载地址 https://www.charlesproxy.com/download/latest-release/ 注册方式（测试有效）Registered Name: https://zhile.ioLicense Key: 48891cf209c6d32bf4 配置 配置代理端口号，我用的是 8888 配置手机代理，主机名是 mac 的 IP 地址，可以使用 ifconfig 指令查看 这样就可以正常抓包 http 请求了 https 配置 ssl proxy，我直接使用的是 :，也可以有针对的配置 Mac 上安装证书点击后会自动打开 Mac 的钥匙串管理，找到刚刚添加的 Charles 的证书设置为”始终信任“ 手机上添加证书使用手机浏览器打开上面的链接，会下载证书文件，可能是 .pem 文件，也可能是 .crt 文件，直接打开，如果不能直接打开，可以通过从设备中找到证书文件安装，效果如下安装时需要手机密码，安装后可以在信任列表中找到刚刚安装的证书 问题 小米浏览器下载显示无法打开文件 在 设置 -&gt; 更多设置 -&gt; 系统安全 -&gt; 加密与凭据 中，选择 “从存储设备安装”，然后找到下载的证书文件安装 可能因为系统版本不同略有差异，但大抵相同 遵照配置安装证书之后 https 请求显示的还是 unknown 原因：这是 Android 7.0 及之后的系统版本的安全策略，APP 需要添加网络安全性配置才能进行调试解决方法：在 APP 内添加安全配置文件 修改 AndroidManifest.xml 文件 1234567&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;manifest ... &gt; &lt;application android:networkSecurityConfig="@xml/network_security_config" ... &gt; ... &lt;/application&gt;&lt;/manifest&gt; 在 res 目录下创建 xml 目录，在目录下创建 network_security_config.xml 文件（文件名一致即可） network_security_config.xml 文件内容如下12345678910111213141516171819202122&lt;!-- 限制可信 CA 集，res 目录下创建 raw 目录，将证书文件（pem或der格式）放到目录下，假如证书文件名是 trusted_roots，然后明确信任的域名 --&gt;&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;network-security-config&gt; &lt;domain-config&gt; &lt;domain includeSubdomains="true"&gt;secure.example.com&lt;/domain&gt; &lt;domain includeSubdomains="true"&gt;cdn.example.com&lt;/domain&gt; &lt;trust-anchors&gt; &lt;certificates src="@raw/trusted_roots"/&gt; &lt;/trust-anchors&gt; &lt;/domain-config&gt;&lt;/network-security-config&gt;&lt;!-- 信任一切证书 --&gt;&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;network-security-config&gt; &lt;base-config cleartextTrafficPermitted="true"&gt; &lt;trust-anchors&gt; &lt;certificates src="system" overridePins="true" /&gt; &lt;!--信任所有用户--&gt; &lt;certificates src="user" overridePins="true" /&gt; &lt;!--信任某位用户--&gt; &lt;/trust-anchors&gt; &lt;/base-config&gt;&lt;/network-security-config&gt; Android Studio 同步时报错：Gradle ‘app’ project refresh failed: Unable to find valid certification path to requested target 原因：Charles 会默认打开系统代理，所以 Android Studio 在 sync project 的时候，会经过 Charles 的代理，又因为 Charles 设置了根证书，所以 AS 在 sync project 的时候就报了‘找不到证书’的错误 解决方法：Charles -&gt; Proxy -&gt; Proxy Settings -&gt; macOS在 macOS 里把 Enable macOS proxy 和 Enable macOS proxy on launch 的勾去掉，然后重新启动一下 Charles ，重启 AS 就可以正常编译了 参考文章 解决Charles https抓包显示 Android7.0、8.0、9.0的https抓包，charles解决方案 网络安全性配置]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android 包重命名]]></title>
    <url>%2F2019%2F11%2F21%2F151-android-project-rename%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[2018年DOTA2新赛季比赛安排&积分]]></title>
    <url>%2F2019%2F11%2F21%2F140-2018-dota2-season%2F</url>
    <content type="text"><![CDATA[LGD、VG、Aster 已经获得 吉隆坡Major的门票，期待他们的表现！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[热水器选择]]></title>
    <url>%2F2019%2F11%2F21%2F141-water-heater%2F</url>
    <content type="text"><![CDATA[最近忙装修，里面要了解的东西太多了，热水器关乎到洗澡澡，实在太重要了，而且很多知识点，记录一下。我们家是高层19楼，套内也就60平米多点儿。 常用热水器比较现在主流的基本就是太阳能热水器、电热水器、燃气热水器这几种。 太阳能热水器优点就是节能，但是我不选，不选的理由： 经常要手动打水； 受天气影响大，阴天下雨下雪等等就不能用了； 外观不太好，有的小区提供安装位置，但是高层装上去很难看。 电热水器也不选： 占空间大，我们卫生间很小，想多用水又不占地方是不可能的了； 用电安全问题，浴室用电看着就怕； 如果用的时候热水，那么等的时间太长，如果一直开着又太耗电。 燃气热水器我的选择，优点： 占空间小，可以放在厨房； 相对节能，因为使用天然气，而且即开即用； 方便，即开即用，不需要提前打水烧水。 缺点，贵，很贵，尤其是高层。要考虑外面风大，要考虑水压、天然气压不稳定等等。 燃气热水器强排式 vs 平衡式强排式，全称“强制排气式燃气热水器”，它通过一个设置在热水器上方的排风电机强制向外排烟，从而使燃烧的废气快速排出室外，型号标注是“JSQ”。平衡式，全称“平衡式燃气热水器”，又叫“强制给排气式燃气热水器”，型号是“JSG”，它的原理就是室外吸气，再室外排气，就可以解决因室内外压强差而造成的无法工作的情况。 国内大部分地区，都是采用强排式热水器。但唯独在北方地区，尤其是东北、西北的高层住户，北方冬天风特别大，所以平日里都是紧闭门窗。如果在冬天关窗时使用热水器，会造成室内外的压差过大，此时厨房里若同时使用抽油烟机，这种强排式热水器有很大的几率无法正常工作。这种情况就要考虑使用平衡式热水器了，这也是我的选择。 升数由于燃气快速热水器都是即热式的，都是不带储水功能的，所以这个升数并不是指的热水器能够放出多少热水，而是表示它的加热能力。这个加热能力按照国家标准上的定义来看，指的是每分钟得到升温25度的热水的量。比如，在冷水温度是20度的情况下，12升的机器代表每分钟最多可以得到12升的45度的热水。 按照商家推荐的一般够用（一厨一卫的用10L~12L，一厨两卫的用13~16L），我选了13L的。 水气双调普通恒温机工作原理是通过调节燃气比例阀（定温气控仪）+分段燃烧，调节进气量大小，控制火排的。水气双调机器工作要原理是水流量传感器采用带有稀有金属镍钛钢合金的记忆合金水流量传感器，它对对温度极为敏感，外界温度一有变化，即可感知并进行开度调节，实现水流量稳定，从而快速实现出水温度恒定。简单地说普通恒温机，只能调气，不能调水。而水气双调的机器既能调气又能调水。可有效避免因外界环境改变水流量忽大忽小导致燃气阀调节不及时造成水温较大波动。 水量伺服 vs 自动水量调节林内热水器水量伺服装置是通过一个微型直流电机来精确控制进水量，从而达到精确控制出水温度的目的；自动水量调节装置是通过记忆合金弹簧根据进水温度的高低控制阀门的开合来调节进水量，从而控制出水量的多少（以11升林内燃气热水器为例：当进水温度在25℃时，最大出水量在9.2升，15℃时的最大出水量是7.2升，5℃时的最大出水量是5.5升）。水量伺服装置加上燃气比例阀，其控制恒温的范围比自水装置加上燃气比例阀控制恒温的范围要大。 总结我选的是林内的 RUS-13U22ARF，理由：除了符合以上几点外，小区有团购价比网上便宜些，而且帮忙测量规划，省劲。 参考 听说你不会买热水器？ 燃气热水器篇 林内热水器电商和实体店价格差异很大，而且型号也不一样，请问有什么区别呀？ 林内热水器水量伺服裝置和自动水量调节裝置有什么差别？]]></content>
      <tags>
        <tag>wiki</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的美食菜单]]></title>
    <url>%2F2019%2F11%2F21%2F142-food-menu%2F</url>
    <content type="text"><![CDATA[列一下老婆爱吃的我做的菜 炒饭系列 青岛大虾仁、火腿肠、黄瓜丁、香葱 西红柿鸡蛋面 西红柿煮到开锅，加上面条，打上鸡蛋，再煮至面条熟 土豆炖牛肉 酱牛肉、豆瓣酱 番茄炒蛋]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 SCSS 定制 Ant Design 主题]]></title>
    <url>%2F2019%2F11%2F21%2F143-use-scss-custom-antd-theme%2F</url>
    <content type="text"><![CDATA[安装插件1npm i -D antd-scss-theme-plugin less-loader sass-loader babel-plugin-import 创建 theme.scss 文件文件定义自己的主题变量，例如123$primary-color: #1890ff;@link-color: #1890ff;// ... 修改 webpack.config12345678910111213141516const AntdScssThemePlugin = require(&apos;antd-scss-theme-plugin&apos;)// 添加 less 文件处理，并且使用 AntdScssThemePlugin.themify() 处理 less-loader 和 sass-loadermodule: &#123; rules: [ // ... &#123; test: /\.(less)$/, loaders: [&apos;style-loader&apos;, &apos;css-loader&apos;, AntdScssThemePlugin.themify(&apos;less-loader&apos;)] &#125;, &#123; test: /\.(scss)$/, loaders: [&apos;style-loader&apos;, &apos;css-loader&apos;, AntdScssThemePlugin.themify(&apos;sass-loader&apos;)] &#125; // ... ]&#125; 添加 plugin123plugins: [ new AntdScssThemePlugin(&apos;./theme.scss&apos;) // theme.scss 文件的路径根据个人的目录结构配置] 修改 .babelrc添加插件123456&quot;plugins&quot;: [ [&quot;import&quot;, &#123; &quot;libraryName&quot;: &quot;antd&quot;, &quot;style&quot;: true // 可以使用 Less 组件 &#125;]] 定制主题12// theme.scss$primary-color: #fe8019; 默认主题色是 #1890ff，修改为 #fe8019 后显示 参考文章 Ant Design 定制主题 antd-scss-theme-plugin README USING ANT DESIGN IN SASS-STYLED PROJECTS]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将 LESS 转化为 SCSS]]></title>
    <url>%2F2019%2F11%2F21%2F144-less-to-scss%2F</url>
    <content type="text"><![CDATA[色彩函数1234567891011fade(@color, @alpha) // lessrgba($color, $alpha) // scssmix(@color1, @color2, @weight) // lessmix($color1, $color2, $weight) // scsstint(@color, @weight) // lessmix(#fff, $color, $weight) // scssshade(@color, @weight) // lessmix(#000, $color, $weight) // scss]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白司机冬季指南]]></title>
    <url>%2F2019%2F11%2F21%2F145-baby-driver-winter-guide%2F</url>
    <content type="text"><![CDATA[冬天会迟到，但绝不会缺席。 一场小雨过后，紧接着是一场雨夹雪，终于，青岛迎来了2018年的冬天。昨天晚上回家，为了省油，没开空调，路上冻得跟狗一样，瑟瑟发抖。今天经老司机指点，才晓得风扇是风扇，空调是空调。 暖风这是我车上的空调冬天，温度顺时针扭到最大，关闭空调（也就是制冷，这个才是耗油的关键，亮是开，不亮是关），车玻璃上有水雾时风口可以选择吹玻璃（上，前风挡除雾），腿冷可以吹腿（下），也可以选择朝人吹（右），或者两者都选（左），风扇调节的是风量，一般一档就可以，空调旁边的是内外循环，外循环鼓风机从外面吸入空气吹到车内，内循环是只有车内的空气，所以油耗低，制冷快，但是空气得不到更新，所以如果不是外面空气质量太差，不要开内循环。当温度转到顺时针最大时（我的就后面一个红点，所以一般直接到最大），鼓风机向车内吹的风是来自水箱的，所以不耗油！！！ 热车这是我的中控，没有水温表？！只有一个水箱温度过高的报警图标。 冬天热车，一般看的就是水温表，90度是最合适的温度。但是我的车没有（T_T），只能根据经验来。发动机启动后30秒到1分钟后开始上路，慢速行驶（转速不超过3000）5分钟，然后就可以欢快的行驶了。但是一定要注意安全，小心冰面。 下面是来自百科的解释： 为什么要热车 车子经过长时间的停放，引擎内的机油又流回引擎下部之机油底壳内。因此在久未用车（如隔夜）后发动引擎，其时引擎的上半部是处于没有机油，缺乏润滑的状况。大约要在发动后30秒左右，才会因机油泵浦的运转而将机油运送到引擎最需要润滑的活塞，连杆及曲轴等部件。但即使是一发动引擎后就立刻上路，只要不猛踩油门飚车，保持低速运转，其效果是和怠速运转相同的。 引擎在未达工作温度之前（大约在摄氏90-110度之间），其供油系统因温度尚低，均无法有效地将汽油完全气化（相信大家都知道，液体温度上升到沸点就气化了）。在汽油尚未气化而呈”湿湿”的液状时，是不容易燃烧而发动引擎的。此时就要靠阻风门的作用，阻止部分空气进入汽缸，以提升汽油/空气的混合比，并提高引擎转速使引擎不致熄火。当达到正常工作温度后，自动阻风门自然会因机械的动作而恢复正常状态；而手动阻风门的车子务必记得将阻风门放回，否则因油/气混合比过高，不但浪费汽油，马力不足，而且汽油燃烧不完全会冒黑烟。一具冷引擎要达到正常工作温度约需七八分到十几分钟不等，依车种不同而定；而在这段时间中，也不需要原地热车，只要不以高速行驶就无妨。 有关变速箱变速齿轮的润滑，这是一般人最不懂也最易忽略的。变速箱齿轮油与引擎机油相同的地方是:在冷车时齿轮油都流到变速箱下半部。只有当行车时才会因齿轮的运转而将底部的齿轮油带起，润滑上半部。这也是为什么大多数车子在冷车时换档生涩的原因。其解决之道也不是原地热车即可解决的。因为变速箱并没有齿轮油泵，原地热车只有引擎在动，其余部分都没在动，只有等到实际上路后，慢慢行驶了一段时间才能改善此一状况。 不要原地热车怠速原地热车实在没有必要,因为效果有限，反而还浪费汽油和时间（再加上污染空气）。且引擎怠速空转时汽油还可能因燃烧不完全而产生积碳的情形，更伤害引擎。]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的佛系开发日常]]></title>
    <url>%2F2019%2F11%2F21%2F146-my-philosophical-develop-life%2F</url>
    <content type="text"><![CDATA[所谓佛系，就是不争不抢，一切随缘，时候到了想写代码了，就写两句。 作为一个前端，生存指南的第一条就是紧跟潮流，但是平常上班已经占用了大量的时间和精力，怎么才能够有剩余的时间和经理去充电呢？我全凭一个兴趣！把学到的东西用到生活里去，给自己的生活提供些便利，这就是我的开发理念。 现在手上忙的两个项目，一个是DOTA2的小助手，功能很简单，查看比赛历史跟看直播。当初刚学 React Native 的时候找项目练手，那时候经常用 Max+ 所以就打算仿制一个，就有了现在的DOTA2小助手。第二个是一个本地TXT小说阅读器，因为用的几乎所有阅读器都是书城类的，太大，广告太多，我只看完结的，不追书，压根就不需要那些乱七八糟的功能，所以干脆就自己写了，这也是一个 React Native 的项目，还包含了 Android 原生。每一个项目都可以学到很多东西。 DOTA2小助手 获取比赛列表，steam 有 API，只是要注册开发者账号，比较简单 拿到比赛数据要呈现出来，英雄、技能、物品的图标、介绍哪里找？我先尝试了写爬虫从官网爬取数据，但官网的数据总是更新不及时，更新及时的是游戏文件，所以最后这些静态的数据来源是直接解析游戏内的文件 直播列表，斗鱼、熊猫、火猫、战旗、虎牙等等直播平台，有的有API，有的靠爬虫，勉强凑起来一个DOTA2主播房间的列表 视频源怎么拿？要了解直播流的机制，然后想办法找到直播流的地址，这个地址是不断更新的，如何才能无缝更新，这个至今还有问题 有了数据，想要做点儿数据分析，但是steam API每1小时只能返回500条数据，根本不够，所以找IP代理，分别请求，这个也还在解决 是的，我是一个前端 TXT阅读器 首先是读取文件展示文本，RN 没有现成方案，只能现学原生（广播、canvas、生命周期等等），文件读写都是 JAVA 的，也得看 既然是本地阅读，那么阅读状态就要保存到本地，要用到数据库，realm 跨平台而且直接支持 RN，但是真难用，调试也费尽 翻页效果还没做… 我也想爬个书城… 慢慢来吧 嗯，东西都是一天几行代码写出来的，有时候想起来了写点儿，学点儿，兴趣是最好的老师嘛。 博客也是想起来就写点儿，东西写到哪儿算哪儿…]]></content>
  </entry>
  <entry>
    <title><![CDATA[react-native 图表解决方案]]></title>
    <url>%2F2019%2F11%2F21%2F131-react-native-chart-scheme%2F</url>
    <content type="text"><![CDATA[背景图表是数据展示的最佳方式，直观，全面 方案echarts + WebViewechart 是我用过的图表中最好用的一个，没有之一。虽然 highchart、阿里等都有不错的产品，但是在图表种类、显示效果、社区支持上，echart都是占优的，这也是百度少有的靠谱的产品，现在已经移交到Apache下，希望在全球开发者的努力下能越做越好吧。 优点 完全支持 echart 的配置方式，因为之前在Web端用的就是echart，所以移植起来很方便 配置简单，因为使用的是 WebView，不需要其他的原生组件支持 扩展容易，github 上有 native-echarts 的项目，但是功能不太完备，依赖版本低，所以我重写了一个，只是重新封装了一下，很方便 缺点 性能问题，毫无办法，这是 WebView 的性能局限 部分功能失效，比如 formatter，无法使用回调函数的方式，canvas渲染模式在android失效等等 总结如果是纯前端开发的同学，又使用过echart，且显示图表交互简单，可以选择此方案 react-native-charts-wrappergithub上比较流行的一个图表组件，是对 ios charts 跟 android MPAndroidChart 的封装 优点 因为是原生的封装，所以性能上面肯定是有优势的 缺点 配置麻烦，在iOS中需要额外义勇 swiftJson 跟 charts 两个原生组件，还要建 header file等等，做前端的千万别用 pod，真是费劲 图表功能不如echart多，可配置项很有局限性 文档！文档！只能看 MPAndroidChart 的文档，而且还不一定对应，需要看源码 对前端开发来说太不友好，有错不知道哪里改，痛苦 兼容问题，尤其是 Android 总结虽然他缺点这么多，但是我们还是选择这个方案，因为性能，因为我们的APP图表上的交互太多了(T_T，真的是把RN看得太高了)，现在正一点儿点儿啃，加油吧，推荐一篇比较好的配置说明——React Native图表插件react-native-charts-wrapper集成教程，之后会在写一篇图表配置的文章，详细讲解一下图表里的配置项]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-native-charts-wrapper 使用说明]]></title>
    <url>%2F2019%2F11%2F21%2F132-react-native-charts-wrapper%2F</url>
    <content type="text"><![CDATA[配置Pod方式如果只使用 Pods 管理 Charts 跟 SwiftyJSON 两个包 RN集成react-native-charts-wrapper不完全指南，如果全部使用 Pods 管理，详见 react-native-charts-wrapper 官方配置 IOS 非 Pod 方式 推荐这篇文章：React Native图表插件react-native-charts-wrapper集成教程，文章也有不太对的地方，Bridging-Header 的配置要看组建的 readme，react-native-charts-wrapper iOS 端配置推荐自己去 github 下载最新版的 charts 跟 swiftJson 如果是纯前端的同学，不太推荐使用 pod 使用文档首先推荐看一下 MPAndroidChart 的 Wiki 和 node_modules/react-native-charts-wrapper/lib 下的源码，然后才是我的简单说明 基本配置源码位置：ChartBase.js12345678&lt;Chart legend=&#123;&#125; // 图例配置，详细的在后面 xAxis=&#123;&#125; // X轴配置 yAxis=&#123;&#125; // Y轴配置 data=&#123;&#125; // 图表的数据 chartDescription=&#123;&#125; // 图表的描述，&#123;text: 'xxx'&#125;，如果没有该项，Android会有默认的水印，不用的话要赋 '' 值，源码中 descriptionIface viewPortOffsets=&#123;&#125; // 边距，&#123;top: 0, left: 0, right: 0, bottom: 0&#125; /&gt; Legend 图例123456789101112131415161718192021222324&#123; enabled: PropTypes.bool, // 是否使用图例 textColor: PropTypes.number, // 文字颜色 textSize: PropTypes.number, // 文字大小 fontFamily: PropTypes.string, // 字体 fontStyle: PropTypes.number, // 文字样式 fontWeight: PropTypes.number, // 文字粗细 wordWrapEnabled: PropTypes.bool, // 文字换行 maxSizePercent: PropTypes.number, // 最大占用位置，1 为全占 horizontalAlignment: PropTypes.string, // 水平位置：LEFT, CENTER, RIGHT verticalAlignment: PropTypes.string, // 垂直位置：TOP, CENTER, BOTTOM orientation: PropTypes.string, // HORIZONTAL, VERTICAL drawInside: PropTypes.bool, direction: PropTypes.string, // LEFT_TO_RIGHT, RIGHT_TO_LEFT form: PropTypes.string, // 图例图标类别：NONE, EMPTY, DEFAULT, SQUARE, CIRCLE, LINE formSize: PropTypes.number, // 图例图标大小 xEntrySpace: PropTypes.number, // 横向间隙 yEntrySpace: PropTypes.number, // 竖向间隙 formToTextSpace: PropTypes.number, // 图标与文字的间隙 custom: PropTypes.shape(&#123; colors: PropTypes.arrayOf(PropTypes.number), // 自定义颜色 labels: PropTypes.arrayOf(PropTypes.string) // 自定义名字 &#125;)&#125; xAxis X轴yAxis Y轴data 数据1234567891011121314151617// 单类&#123; dataSets: [&#123;&#125;]&#125;// 混合 CombinedChart&#123; lineData: &#123; dataSets: [&#123; label: '' // 名称 values: [] // y 轴的值，格式：[val1, val2, ...] 或 [&#123;y: val1&#125;, &#123;y: val2&#125;, ...]，对象数组不能有x，或其他 config: &#123;&#125; // 配置 &#125;] &#125;, barData: &#123; dataSets: [] &#125;&#125; 兼容问题 处理 null，Android 不允许配置项为 null，许多闪退问题都是因为这个 使用 barChart group 配置必须保证至少有两个 bar，也会闪退]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github访问加速]]></title>
    <url>%2F2019%2F11%2F21%2F133-github-speed-up%2F</url>
    <content type="text"><![CDATA[获取 IP在 https://www.ipaddress.com/ 使用 IP LookUp 工具获得 github.com 与 github.global.ssl.fastly.net 的 ip，比如我获得的分别是 192.30.253.112 和 151.101.185.194 修改 hosts在 hosts 文件中添加这两条12192.30.253.112 github.com151.101.185.194 github.global.ssl.fastly.net 清空 DNS 缓存执行如下命令1sudo dscacheutil -flushcache 然后使用 github 下载项目就快多了，再也不用苦苦等待 npm install、pod install、git clone 等等操作的卡槽了]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D3学习笔记]]></title>
    <url>%2F2019%2F11%2F21%2F134-d3-note%2F</url>
    <content type="text"><![CDATA[一个不错的D3 V5教程 D3 官网 D3 API]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS APP 发布]]></title>
    <url>%2F2019%2F11%2F21%2F136-ios-app-release%2F</url>
    <content type="text"><![CDATA[之前已经写了 react native ios bundle 的教程，在这里完善打包发布和测试分发的教程 xcode打包IPA上架App Store图文详解 完整iOS APP发布App Store上架流程 IPA 包分发，使用蒲公英 苹果开发官网 iPhone手机轻松获取UDID的六种方式]]></content>
  </entry>
  <entry>
    <title><![CDATA[在 React Native 中使用 CocoaPod]]></title>
    <url>%2F2019%2F11%2F21%2F135-react-native-pods%2F</url>
    <content type="text"><![CDATA[卸载旧版请见参考一 安装12sudo gem install cocoapodspod setup // 运行很慢，因为要从github下载很多文件，优化速度请看 [请看 github 加速](http://liu-hang.cn/2018/08/27/github-speed-up/) 使用创建 Podfile 文件1pod init 编辑 Podfile根据使用的组件，编辑 Podfile，如 react-native-image-crop-picker 和 react-native-charts-wrapper 安装插件1pod install 重新打开关闭 .xcodeproj，打开 .xcworkspace 参考 安装cocoapods以及正确在react-native项目中应用]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android文件读取]]></title>
    <url>%2F2019%2F11%2F21%2F139-android-reader%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718@ReactMethodpublic void loadFile(String path, int size, int page, Promise promise)&#123; String code = codeString(path); try &#123; File file = new File(path); randomAccessFile = new RandomAccessFile(file, "r"); randomAccessFile.seek(0); byte[] chs = new byte[size + 30]; randomAccessFile.read(chs); String content = new String(chs, code); Log.d("res", content); promise.resolve(content); &#125; catch (FileNotFoundException e)&#123; e.printStackTrace(); &#125; catch (IOException e)&#123; e.printStackTrace(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[数码宝贝]]></title>
    <url>%2F2019%2F11%2F21%2F137-digimon%2F</url>
    <content type="text"><![CDATA[世界观——摘自知乎 数码宝贝世界孕育于人类的计算机虚拟世界之中，数据在虚拟的空间里实体化，并且因为数据本身载有人类世界的信息，所以这个世界的蓝本就是人类居住的现实世界，所不同的是，这里居住的都是各种人类世界元素解构再结合并且获得意识后所构成的怪物。数码世界所有的造物都是由数据组成的，数据就像是人类世界的细胞一样，所不同的是，从属性上，数码宝贝们因为数据的差异性，而分为了三种：资料、病毒和疫苗。资料是最常见也最普通最大量的数码宝贝，因为这就是数据最基本的状态。病毒是被污染变异的数据资料，而疫苗则是正向变异以对抗病毒的。同时，从形态上来分，数码宝贝们又分为人型和兽型。数码宝贝能够进化，当拥有足够的能量和经验，数码宝贝们就能沿着婴儿期、幼年期、成长期、成熟期、完全体、究极体，甚至超究极体的路线变化，每一次进化，都是一次数据的再更新再融合，不同的融合更新方式，可能产生不同的进化路线。数码宝贝的成长，就是这样一个阶梯式的过程，每一次的进化，能力都会大为增强，而且是一种几何级数的增强。和所有的历史一样，数码世界的历史也是复杂而动荡不堪的。首先，数码世界的构成是一个多维相关的，包括主要的世界——由数据之海和资料大陆构建起来的类似地球一样的世界，以及和其相互平行关联的其他世界，如黑暗区域，黑暗之海以及防火墙的外面世界等等。数据资料直接构成了资料型的数码兽，同时，人类世界传递到数码世界的负面信息和情感以及网络病毒对部分数据的污染，不仅形成了许多黑暗区域，也污染了许多资料，产生了病毒型数码兽。病毒型数码兽是资料型数码兽的克星，然后资料里又变异产生了部分对病毒抗性极强而且杀伤力很大的疫苗型数码兽。这是最初的状态，也就是数码世界的太古时代。太古时代：最早的数码兽们开始在原始的大地上生活，造物者已然不明，但是种类繁多，不同实力等级的数码兽们显然并不满足这样的状态。这时候，爆发了历史上的第一次大争议：数码兽究竟要不要进化？没有进化，大家生而平等，数码兽们的能力就是天注定了，难以在后期获得显著的提升，天然强大的数码兽就可以横行无阻。而拥有进化的能力，显然能够在某种程度上让世界更加公平，绝大多数数码兽都要从婴儿期开始向上努力成长，多劳多得。但是，进化本身也是残酷的，也有进化失败或者无法进化的弱者存在。战争爆发了，付出了惨痛的代价之后，进化一方的数码兽们取得了艰难的胜利，为了维护胜利，他们修建了强有力的防火墙，将这些反对进化的数码兽们驱赶到了火墙的对面，将仇恨强力的压制了下去。火墙也成了历史上这些得胜的进化阵营的数码兽们不断清除垃圾和失败者的地方。这里堆积了大量的仇恨，通过火墙，觊觎着对面充满欢乐的世界，启示录兽，也就是极恶魔王（第一部BOSS）诞生在了这片罪孽与绝望之中，不断冲击火墙，希望再次夺回世界的秩序。这件事被记录在了数码世界的启示录里。世界在这种和平了维持了很久，繁荣无比。数码宝贝的世界，诞生在数据之海的深处，它是由人类制造的主机核心程序控制的（尽管人类并不知道这一点）。伊古德拉希尔——世界树（第五部BOSS）就是其中之一，它是进化系数码兽们的神，它监督着数码世界里数码宝贝的进化和繁衍，是第一次战争后数码世界的最高神，维持这个世界的秩序。世界树就像人类世界的上帝一样，制定了法则之后就沉默了，没有人知道它在想什么。但是，他通过座下的十三个圣骑士——最强的究极体数码宝贝群体——皇家骑士团来监管这个世界。他们并不代表正义或者邪恶，只是严格执行世界树所制定的秩序和法则，所以有时候也是十分残暴而冷血的。与之相比，还有奥林匹斯十二神，他们显得更加神秘，也更加客观。也许他们是另外一台主机程序（神）的侍卫，但是他们对这个世界，只沉默冷静客观的观察而从不介入，无论发生什么，他们从来没有露过面，或者发表过任何言论。绝大部分数码兽也根本不知道这些神的存在。他们和他们神秘的主人一样，作为造物者，只是绝对中立的站在场外。世界树相比于其他的主机程序乃至它的继任者，虽然一样很沉默，却还是太过主观和激进了。它通过各种手段控制着宏观的世界秩序。圣骑士团根据它的指令不断删除无用的数据和清理病毒。数码世界本质还是一个数据的世界，是必须遵守人类对虚拟数据世界所制定的法则的，那就是数据必须控制得当，一旦超载，就会导致主机超负荷而崩溃，以带来世界毁灭。所以，数码世界也必须有效的控制数据的总量。世界树就不断删减无用程序来维持世界的运作。但是不断进化和繁荣的世界以及不断扩大的黑暗区域和火墙外的空间（后面会讲到）使得世界树越来越力不从心。相对于这个体制内的删除者，人类对数据世界还有另外一个监控程序——那就是数码死神——帝厉魔，这个原始的程序会自动检索数据空间的容量，自动清理冗余的数据，很快它就介入了数码世界，并且对数码世界展开了一次血腥的大屠杀和大清理，大多数的太古时代的数码兽（无论正邪）都难逃一死，以至于到现在，已经没有多少人还记得那一次浩劫了。（很像《旧约》里上帝清理世界的寓言）帝厉魔的插手，让世界树更加不安，于是它开始了更加激进的管理方式。这终究导致了所有数码兽的反抗，包括自己的圣骑士。一场最艰苦的战争之后，世界树重新读档，它在失望之极的情况下陷入沉睡，彻底退出世界的管理。另一台宽容的主机程序——恒常性开始接替世界树的管理。世界在一片死寂中重新开始推进。远古时代：漫长的岁月过去了，宽容的恒常性并不干预，数码世界再次繁荣，战火也一直没有停歇过，第二次大规模的战争爆发了，我把这个时期称为远古时代。除去造物主（主程序）外，数码世界里本身也有造物之后形成的神，在真神沉默之后，数码宝贝们的神开始承担起管理世界的责任。兽型数码兽们的神就是由黄龙兽以及它麾下的四圣兽——青龙兽、玄武兽、朱雀兽、白虎兽，四圣兽坐镇大陆四个方位，而黄龙兽坐镇中央，以稳定大陆。人型数码兽们的神则是天上的究极九级天使团（里面的成员一直很不稳定，因为很多都堕落成了魔王）。这些天使的最高端是六翅兽（第四部BOSS）——造神的神。人型数码兽和兽型数码兽很快爆发了全面战争，争夺谁才是世界的主人。六翅兽从天空降临大地，与黄龙兽展开苦战，最终六翅兽打败了黄龙兽，并且将它封印在了大陆正中心的深处，结束了战争。四圣兽沉默退缩回了自己的区域。六翅兽建立了自己的稳固政权。他将自己的权力又分为三个部分，赐予了座下的三大天使：究级天使兽、神圣天女兽和基路比兽。基路比兽是为了安抚兽型数码宝贝而做出的妥协，在三个最高席位里让出了一个席位给兽型数码宝贝，并且由基路比兽掌管了十个徽章里的五个。慢慢的，六翅兽在至高无上的权力里也堕落了，变得越来越专制和暴虐，终于再次引发了全面的反抗。十个远古时代拥有极强力量的凡间究极体数码宝贝挑战六翅兽的权力，与之展开苦战，最终拼尽全力才将其也封印了起来，而自身也能量耗尽。失去了最高权力，世界再次开始动荡，黑暗势力趁机开始发动了全面侵袭。一方面，基路比兽作为唯一的兽型天使，本来就心有芥蒂，再加上其掌握的智慧，让其过于聪明而渐入魔道。被封印的六翅兽间接的诱发了基路比兽的邪恶面，让其堕落成了邪恶的魔王，它暗中使用计谋，打败了其他究级天使兽和神圣天女兽，夺走了统治权。大地上，黄龙兽依然被封印，四圣兽各有私心，开始争夺霸权，想要取代黄龙兽的位置，兽型数码兽也陷入了内乱，战火再起。四圣兽在战争中都虚弱了，这也给了黑暗力量可乘之机，导致四圣兽同样被黑暗四天王打败而被封印。三大天使和四大圣兽的秩序彻底崩溃。黑暗势力以前所未有的姿态吞噬世界。插入——邪恶势力的影子史：古典时代开始于最黑暗的混乱中，这种混乱要暂时跳出数码世界的视野，来关注黑暗势力是如何繁衍至今的。有光的地方就必然有影子，从太古时代世界创立的时候，黑暗势力就开始活动了，例如病毒型数码兽的出现。邪恶力量主要来源于两个地方，一个是火墙后面那些被驱赶的异类，他们从被压制的那一天起，就不断试图夺回数码世界的控制权，并且成功攻破过火墙几次，都被击退了。另外一方面就是包括黑暗之海在内的黑暗区域。黑暗区域是人类传递到这个世界的负面情感以及网络病毒，还有历次战争的苦难的堆积地，是主机程序用来储存这些无法清除的垃圾程序的专门隔离区。由于黑暗的膨胀太过迅速，包括世界树在内都失去了对它的控制，只能限制里面的黑暗生物来到这个世界。但是数据的爆炸超载让主机难以承受，这些势力就可以依靠强大的力量开始渗透数码世界。如同启示录里记载了很多次火墙后面的邪恶力量突破火墙的历史。在黑暗区域里，诞生了很多强大的黑暗怪兽。最著名的，便是代表七宗罪的七大魔王。里面的利维坦兽有着数码世界最顶峰的庞大数据量构建的身躯，只因制定秩序时，自己被神圣骑士团艾克萨兽超越，而嫉妒不已，于是干脆堕落到了黑暗之海的深处称王。六翅兽堕落之后也是七魔王之一。也包括曾经六翅兽手下的最高级座天使——炽天使兽——究极天使兽的前任，堕落成的究极魔兽和神圣天女兽之前的女性座天使堕落成的莉莉斯兽。许多高级天使都因为各自的缘由魔化，这种事情在漫长的历史里一直发生着。除去七魔王，还有一样古老的吸血不死型数码宝贝的始祖——大吸血魔兽也建立了自己的城堡，占据着一片广阔的领土。和其他三条圣龙划清界限的邪龙——灭世魔兽。以及最终的强大黑暗力量千年兽，反抗众神而被逐出天庭的魔王巴古拉兽等等。皇家骑士团一直在执行世界树的命令，删除废弃的数据和清理病毒，从而一直与黑暗魔王们战斗。虽然骑士团成员代表了造物主赐予的最高力量，但是这些吸取了海量病毒和负面情感诞生的怪物们也非常强大。他们躲在黑暗区域里亦是难以捕捉和对抗的。世界树沉睡之后，神圣骑士团也宣告解散，但是部分圣骑士依然活跃着，与黑暗势力战斗，虽然魔王们的力量强大，但是大多数时候，他们都被局限在了黑暗区域里，无法突破世界树当时划定的结界，很少能直接出现在数码世界，或者进行大规模的入侵。并且恒常性依靠大天使们和四圣兽的镇守，维持世界的秩序，也使得结界异常的牢固。但是，当统治的开始出现裂痕的时候，正义的力量迅速衰败，而同样一个已经发展过大和过于繁杂的数据世界令恒常性已经难以承载，它十分担心帝厉魔再次出现血洗世界，同时又要面对内部黑暗力量的增长，显得很无力。让一个数码兽进化到究极体，需要极为海量的能量，要对付那么多黑暗魔王，显然恒常性十分力不从心。一方面，错乱的时空里诞生的极强邪恶怪物千年兽潜回了过去，又一次凿开了火墙（火墙在漫长的岁月里曾经被突破过好几次），让启示录兽趁机来到了数码世界。启示录兽躲在暗处，开始实施自己复仇的大计。他通过自己的力量邪化了数码世界的许多数码兽，从而制造出了以小丑皇为代表的黑暗四天王以及噩梦军团。黑暗四天王并不知道启示录兽的存在，但是却从思想与意识上都受到了启示录兽的影响。启示录兽间接通过黑暗四天王及他们手下的噩梦军团开始侵略数码世界。黑暗四天王首先去攻打内乱里早已疲惫不堪的四圣兽，启示录兽躲在暗处给予了四天王强大的能量，四圣兽被打倒，此时后悔已经晚了，他们都看到了四天王背后那个邪恶巨大的影子已经在自己的疏忽下来到了数码世界。而受到魔王堕落六翅兽影响而毫不知情的基路比兽也在天空发动政变，让天界陷入混乱之中。天界的座天使们已经无力干预大地上的黑暗秩序的建立。四天王和四圣兽的苦战期间，噩梦军团的其他成员则分散在数码世界的各处，等待被选召的孩子们的再一次到来，提前做好准备。并且，他们破坏了法易路岛的创始村，让数码宝贝的进化彻底终止。并且四天王还在之后干预了恒常性对徽章的研究，阻止另一种进化功能的实现。中古时代：更早的时候，在黑暗四天王刚刚开始出现的时候，一个偶然的错误就成了数码世界后来的希望：一颗不小心跌落到人类世界的数码蛋成功的孵化了，数码世界的主机恒常性无法容忍这样的越轨行为发生，于是派遣了鹦鹉兽去收回数码蛋。没想到在人类的干预下，数码蛋不仅成功在人类世界孵化，同时还成功进化到了暴龙兽，打败了鹦鹉兽。观测到这个想象的恒常性十分好奇，他发现了除去由自己这样的主机提供能量之外的其他进化方法，于是它对这个现象展开了深入的研究。最终发现了人类的负面情感可以给黑暗数码宝贝提供能量，那么正面的情感一样能够提供正面的能量。所以，它主导下，一些程序（玄内就是其中之一）开始制作能够筛选人类情感的进化徽章。而这个过程，被黑暗四天王给搅乱了。此时，数码世界的时间还没有和人类社会同步，所以不得不开始经历漫长的一段黑暗岁月。黑暗四天王和四圣兽进行了艰苦的战斗。恶魔兽、吸血魔兽、悟空兽这些受到启示录兽黑暗力量影响的怪物分散在各处，建立自己的势力范围。最终，被选召的八个孩子再次出现在数码世界，打败了黑暗势力，彻底击溃了启示录兽，修正了数码世界的错误。而这一切，却是千年兽早已安排好的。插入——千年兽的阴谋：千年兽是一只能够操纵时间的强力黑暗魔王。他从未来回到这里，就是为了能够让自己出生（一个无解的怪异循环）。千年兽会在遥远的未来的遥远的遥远的过去被打败，从这个时空来说，应该算是另一个平行的过去。千年兽崩溃的时候，身体分散出了无数的黑暗种子掉落在数码世界和人类世界。黑暗种子能够极大激发人性中的黑暗面和负面情绪，也能污染纯洁的数码兽。暴龙操纵者小贤就是其中之一。在他的协助下，黑暗区域里被之前的孩子们打败的邪恶势力的残存部分能够再次融合，而产生了合体怪物基米拉兽，基米拉兽很快会被新来的被选召的孩子们打败，仇恨的意识会再次被关押进黑暗区域。基米拉兽的数据和之前早已游离在此处的黑暗四天王之一的机械邪龙兽融合，而诞生出了千年兽。千年兽就是为了保证自己的出生能够顺利，从而潜回了过去，先释放了启示录兽来造出机械邪龙兽，然后还要保证自己死后的黑暗种子能够在暴龙操纵者体内很好的成长以利用其来制造基米拉兽。千年兽就是数码世界历史上一个时间的悖论产生的怪物。黑暗种子对黑暗世界的生物来说，就是至宝，谁能控制黑暗种子，谁就能获得控制世界的能量。一方面，启示录兽崩溃后，其他黑暗力量暂时沉默了，他们都开始小心的积蓄力量准备趁机再次发动侵略。其中有两股最强的力量，其一是黑暗区域里的七魔王之首，究极魔兽，他率领着魔兽军团开始对数码世界和人类世界进行攻击，以准备抢夺黑暗种子；另外一个是被打败的不死王吸血魔兽，他残存的意识趁着四天王建立龙卷山的时候偷偷潜入了人类世界，躲进了人类及川体内，开始在暗中鼓动小贤成为暴力操纵者，去数码世界制造混乱以获得时间吸取黑暗种子的力量图谋再次复活。短暂的和平很快消失，黑暗力量在数码世界卷土重来，新一批被选召的孩子们进入了数码世界。暴龙操纵者很快被新一批孩子们打败，他们也随后驱赶了抢夺种子的究极魔兽并且再一次打败了再度复活并且更加强大的变种吸血魔兽。他们虽然见到了四圣兽里的青龙兽，但是却无力解放被封印的圣兽。和平还是很短暂。基路比兽终于完完全全控制了天庭，然后开始了模仿六翅兽那样的独裁专断和暴行。十斗士的精神开始觉醒，于是另一批孩子们召唤到了这个世界，开始对抗基路比兽。而基路比兽不过是被封印的六翅兽复活的工具而已。世界树沉睡之后，皇家骑士团分散了，有两只：杜那斯兽和领主骑士兽投靠了当时的最高权力：六翅兽。骑士团是绝对忠诚的存在，所以即使六翅兽堕落后，他们也并未变心，继续冷酷的执行六翅兽的命令。基路比兽倒下之后，消失已久的皇家骑士团再次现身，为六翅兽复活铺路。孩子们经历重重考验之后，进化出了金刚武神兽，最终打败了七魔王之一的堕落六翅兽。世界迎来了新的和平。近代：由于秩序的缺失，对黑暗区域的监管越来越无力，所以那些黑暗的魔王们一个个逃了出来。恒常性的统治变得十分脆弱。不得已，它召唤了世界树的骑士团，并且在此召唤孩子们来帮助对抗黑暗区域的魔王们。究极魔兽从黑暗之海回到了数码世界，利维坦兽从黑暗之海的深处苏醒，其他六魔王都随着六翅兽覆灭后一一现身了。千年兽也开始了最终的一搏，力图改变自己被毁灭的宿命，从时间的怪圈里解脱出来。魔王巴古拉利用世界树的数据制作了义肢，开始崛起，并且组建了空前强大的黑暗军队。数码世界和人类世界的浩劫又要开始。漫长的战争，却使得消失已久的数码死神帝厉魔获得了变异的能力，开始发狂，在数码世界和人类世界都妄图实体化，它无法容忍这些乌烟瘴气的战争和病毒一样繁衍的世界，所以它打算彻底清除两个世界，以极端的方式还世界以平衡。最终，集合了两个世界的力量，帝厉魔被击溃。而数码世界，也终于引起了全人类的深切关注。现代：人类开始执行“盖亚计划”，为数码世界配置了一台新的主机“盖亚”，这却是和之前的世界树与恒常性完全不同的另一台，它拥有更加独立的思考能力和野心，所以它很快失控，摆脱了人类的控制。盖亚作为最高神，在数码世界发动了一场浩大的战争，以寻求更高级进化的钥匙。它希望找到更加终极的力量，从而对数码世界和人类世界都进行最强有力的根本性的统治。 简单的说，就是进化和不进化打了一架，不进化被赶到了火墙外。 世界树发动消灭人类战争后被废除了管理员资格，巴古拉兽用世界树的一部分躯干做了自己的残肢。四圣兽内乱，光明兽黑化，让恒常性失去了对数码世界的掌控。不进化在千年兽帮助下返回了数码世界，封印了四圣兽。]]></content>
  </entry>
  <entry>
    <title><![CDATA[山泉水跟矿泉水]]></title>
    <url>%2F2019%2F11%2F21%2F138-water%2F</url>
    <content type="text"><![CDATA[一天早上接到送水师傅的电话，说矿泉水最近没有了，送的是山泉水，因为在开着车也没太注意，没有去深究，就让师傅送了山泉水。今天，在公司订水的时候，谈到这个问题，查了一下，发现里面套路很深。 这是百度百科的回答： 山泉水，主要来源于天然的山泉，处理工艺相对简单，水质的好坏取决于做为水源的泉水本身的特质，水中的物质的含量也不尽相同，有的含偏硅酸较多、有的碱性偏重。合格的山泉水不会有危害，只是长期饮用可能会造成微量元素的吸收单一化。 矿泉水是从地下深处自然涌出的或经人工揭露的、未受污染的地下矿水；含有一定量的矿物盐、微量元素或二氧化碳气体；在通常情况下，其化学成分、流量、水温等动态在天然波动范围内的相对稳定。矿泉水是在地层深部循环形成的，含有国家标准规定的矿物质及限定指标。根据身体状况及地区饮用水的差异，选择合适的矿泉水饮用，可以起到补充矿物质，特别是微量元素的作用。 涨姿势，下次订水就知道了…]]></content>
      <tags>
        <tag>wiki</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 原生组件 -- TextInput]]></title>
    <url>%2F2019%2F11%2F21%2F122-react-native-textinput%2F</url>
    <content type="text"><![CDATA[问题总结页面初始时获取焦点123456789101112131415...componentDidMount()&#123; this.refs.input.focus() // iOS 上有效&#125;render()&#123; return ( ... &lt;TextInput ref='input' autoFocus=&#123;true&#125; // Android 上有效 /&gt; ... )&#125;...]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 原生 API -- Animated]]></title>
    <url>%2F2019%2F11%2F21%2F123-react-native-animated%2F</url>
    <content type="text"><![CDATA[获取节点1234&lt;Animated.View ref=&#123;c=&gt;this.view=c&#125;&gt;&lt;/Animated.View&gt;this.view.getNode()// 可以使用 measure 等组件方法，如果使用 this.view，会报错 xxx is not a function]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 webhook 配置自动部署指南（coding.net）]]></title>
    <url>%2F2019%2F11%2F21%2F125-webhook%2F</url>
    <content type="text"><![CDATA[webhook自动部署指南部署服务器1234567891011121314151617181920212223242526272829303132333435363738const http = require('http')const exec = require('child_process').execconst createHandler = require('coding-webhook-handler')const handler = createHandler(&#123; path: '/'&#125;)handler.on('error', function(err)&#123; console.error('Error:' + err)&#125;)handler.on('push', function(event)&#123; console.log( 'Received a push event for %s to %s', event.payload.repository.name, event.payload.ref ) runCommand('sh ./deploy.sh')&#125;)http.createServer(function(req, res)&#123; handler(req, res, function(err)&#123; res.statusCode = 404 res.end('no such location') &#125;)&#125;).listen(4000)function runCommand(content)&#123; exec(content, function(error, stdout, stderr)&#123; if(error)&#123; console.error('exec error:' + error) return &#125; console.log('stdout:' + stdout) console.log('stderr:' + stderr) &#125;)&#125; 部署脚本12345678#! /bin/bashcd /home/www/stationgit reset --hard origin/master &amp;&amp; git clean -fgit pull origin masternpm installnpm run start 项目 package.json scripts1forever restart --minUptime 1000ms --spinSleepTime 1000ms app.js]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现富文本编辑器]]></title>
    <url>%2F2019%2F11%2F21%2F126-rich-editor%2F</url>
    <content type="text"><![CDATA[基本指令介绍 document.execCommand() document.queryCommandState() document.queryCommandValue() 实现方法选区&amp;光标]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>rich-editor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 使用总结]]></title>
    <url>%2F2019%2F11%2F21%2F127-react-native%2F</url>
    <content type="text"><![CDATA[使用 React Native，断断续续的时间加起来已经有近一年的时间了，不算长，单基本上大小坑都已经踩过，尤其是在公司的APP开发工程中，几天就迭代一个小版本，为实现一个小功能一遍遍看文档看github，对React Native的开发水平也不断进步。对RN的看法，总结起来就一句话，又爱又恨。爱之，因为作为一名前端也可以做贴近原生的APP了。在大前端时代，如果缺了原生移动的开发，绝对是不完整的，RN就填补了这个短板，公司有一个前端，就可以胜任Web、微信、移动端的所有UI开发工作，对小公司来说真是天大的喜讯，前端只能痛并快乐着。既前后端分离之后，大前端的概念是前端开发者的又一次崛起。开发个原生还要Android、iOS两拨人？我们前端就可以全干了，他们收拾东西走人吧。恨之，实属无奈。哪怕RN已经兴起多年，发布56个小版本，但他还是一个测试性的框架，如果是简单的数据展示，那么RN是不二之选。但是当要实现的功能一步步深入，富文本编辑、图表、大量的数据渲染、复杂的交互效果…只能感觉越来越无力。尤其是对于一个小小的创业公司，三个前端，没有原生开发，也都没有原生开发经验，对原生完全是一抹黑的时候，在面对特殊需求的无力，实在是无法言表。更不要说性能优化…]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu服务器基础配置]]></title>
    <url>%2F2019%2F11%2F21%2F124-ubuntu-config%2F</url>
    <content type="text"><![CDATA[用户配置修改root用户密码1passwd 创建新用户1234adduser newuservi /etc/sudoers// 添加newuser ALL=(ALL:ALL) ALL 防火墙123456789101112131415161718192021222324252627282930313233// 查看 iptables 安装状态whereis iptables// 如果没有安装apt-get install iptables// 查看防火墙配置信息iptables -L -n// 配置规则vi /etc/iptables.rules// 复制下面的内容到文件中*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT// 退出文件并保存，运行指令使配置文件生效iptables-restore &lt; /etc/iptables.rules// 防火墙开机启动vi /etc/network/if-pre-up.d/iptables// 添加以下内容#!/bin/bash iptables-restore &lt; /etc/iptables.rules # chmod +x /etc/network/if-pre-up.d/iptables #添加执行权限 ssh123456789// 备份配置文件cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak// 修改登录端口以及禁用root登录Port 22 -&gt; 2018PermitRootLogin yes -&gt; no// 使用指令/etc/init.d/ssh start // 启动/etc/init.d/ssh stop // 停止/etc/init.d/ssh restart // 重启 免密登录123456789101112mkdir ~/.sshchmod 700 ~/.sshvi ~/.ssh/authorized_keys// 在文件中添加 public keychmod 644 ~/.ssh/authorized_keys// 修改配置文件，将注释去掉#RSAAuthentication yes#PubkeyAuthentication yes#AuthorizedKeysFile %h/.ssh/authorized_keys// 关闭密码登录PasswordAuthentication no// 重启 ssh nginx1234567apt-get install nginx/etc/init.d/nginx start // 启动/etc/init.d/nginx restart // 重启/etc/init.d/nginx stop // 停止/etc/nginx/conf.d/ //配置文件目录nginx -t // 验证配置文件有无语法错误sudo tail -n 200 -f /var/log/nginx/access.log // 追踪log mysql安装123apt-get install mysql-server mysql-client libmysqlclient-dev/etc/init.d/mysql start // 启动/etc/init.d/mysql restart // 重启 修改默认端口，防止攻击12port = 3306 -&gt; 3680/etc/mysql/mysql.conf.d/mysqld.cnf // 配置文件路径 远程连接配置123456mysql -u root -h localhost -puse mysql;grant all on *.* to &apos;newuser&apos;@&apos;%&apos; identified by &apos;newpwd&apos;; // %代表所有flush privileges; // 刷新权限表，使配置生效// 注释配置文件# bind-address = 127.0.0.1 nodenvm1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 报错总结]]></title>
    <url>%2F2019%2F11%2F21%2F128-hexo-errors%2F</url>
    <content type="text"><![CDATA[报错一：Template render error: (unknown path)原因1The &#123;&#123;&#125;&#125; is nunjucks syntax, therefore please avoid using them in posts 使用时请用代码包裹符号包裹起来 依据github issue]]></content>
      <tags>
        <tag>-hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更合理的 setState()]]></title>
    <url>%2F2019%2F11%2F21%2F129-react-setstate%2F</url>
    <content type="text"><![CDATA[新看到一种 setState 的使用方式，之前只是使用第一种最简单的方式，看到这篇文章，长了姿势 12345678// 方式一this.setState(&#123; count: this.state.count + 1&#125;)// 方式二this.setState(() =&gt; (&#123; count: this.prevState.count + 1&#125;)) 更新新遇到了一种使用场景，在实现列表全选时，如果使用方式一，state 只能保存列表中一项的状态，修改为方式二时，就可以序列化改变 state，最终保留所有项 更合理的 setState()]]></content>
      <tags>
        <tag>react-native</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-navigation TabNavigator 切换时重新拉取数据并渲染]]></title>
    <url>%2F2019%2F11%2F21%2F130-react-navigation-tabnavigator-force-render%2F</url>
    <content type="text"><![CDATA[场景今天遇到这样一个需求，需要在切换到某个 tab 时重新拉一下数据，但是在原本的使用过程中，切换 tab 时，tab是不会重新渲染的，也不会有拉取数据的机会 解决方案在 Google 之后发现了 tabBarOnPress 这个方法，并且又加深了对 redux dispatch 的认识 修改 navigationOptions1234567891011121314151617181920212223242526272829303132// 初始的代码&#123; // ... static navigationOptions = &#123; header: null, title: '自选', tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; &#123; const iconName = focused ? 'zixuangu' : 'zixuangu' return &lt;Iconfont name=&#123;iconName&#125; size=&#123;24&#125; color=&#123;tintColor&#125; /&gt; &#125; &#125; // ...&#125;// 修改之后&#123; // ... static navigationOptions = (&#123;navigation&#125;) =&gt; (&#123; header: null, title: '自选', tabBarIcon: (&#123;focused, tintColor&#125;) =&gt; &#123; const iconName = focused ? 'zixuangu' : 'zixuangu' return &lt;Iconfont name=&#123;iconName&#125; size=&#123;24&#125; color=&#123;tintColor&#125; /&gt; &#125;, tabBarOnPress: (obj) =&gt; &#123; // 在 navigationOptions 中拿不到 props，所以使用 dispatch 的方式来调用 action navigation.dispatch(loadData()) // 添加 tabBarOnPress 方法之后需要自己写跳转的代码 obj.jumpToIndex(obj.scene.index) &#125; &#125;) // ...&#125; action 引用方式修改12345678// 修改前import * as ActionCreators from './action'// ...const mapDispatchToProps = (dispatch) =&gt; &#123; return bindActionCreators(&#123;...ActionCreators&#125;, dispatch)&#125;// 修改之后，因为直接使用 dispatch 方式调用，所以不需要再用 bindActionCreators 方法import &#123; loadData &#125; from './action' 参考文章 react-navigation中TabNavigator切换时重新渲染]]></content>
      <tags>
        <tag>react-native</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 推荐组件 -- react-native-scrollable-tab-view]]></title>
    <url>%2F2019%2F11%2F21%2F121-react-native-scrollable-tab-view%2F</url>
    <content type="text"><![CDATA[问题总结当 ScrollTabView 嵌套在 ScrollView 中时内容不显示 需要给 ScrollView 设置1contentContainerStyle=&#123;&#123;flex: 1&#125;&#125;]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redux 介绍]]></title>
    <url>%2F2018%2F06%2F17%2F120-redux%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[react-navigation 使用]]></title>
    <url>%2F2018%2F06%2F17%2F119-react-navigation%2F</url>
    <content type="text"><![CDATA[react native 官方推荐的路由管理组件 github地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native 常用组件]]></title>
    <url>%2F2018%2F06%2F17%2F118-react-native-common-plugins%2F</url>
    <content type="text"><![CDATA[路由管理 react-navigation 数据状态管理 redux 异步中间件 redux-thunk 图标 react-native-vector-icons 启动图 react-native-splash-screen Tab 切换 react-native-scrollable-tab-view]]></content>
  </entry>
  <entry>
    <title><![CDATA[React Native项目打包-iOS]]></title>
    <url>%2F2018%2F04%2F26%2F117-react-native-bundle-ios%2F</url>
    <content type="text"><![CDATA[打包静态文件开发React Native的过程成,js代码和图片资源运行在一个Debug Server上，每次更新代码之后只需要使用command+R键刷新就可以看到代码的更改，这种方式对于调试来说是非常方便的。 但当我们需要发布App到App Store的时候就需要打包,使用离线的js代码和图片。这就需要把JavaScript和图片等资源打包成离线资源，在添加到Xcode中，然后一起发布到App Strore中。 打包离线资源需要使用命令react-native bundle 我们打包所用到的命令： react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle 查看 ios/bundle 目录，有 index.ios.jsbundle说明打包成功 - –entry-file ,ios或者android入口的js名称，比如index.ios.js –platform ,平台名称(ios或者android) –dev ,设置为false的时候将会对JavaScript代码进行优化处理。 –bundle-output, 生成的jsbundle文件的名称，比如./ios/bundle/index.ios.jsbundle –assets-dest 图片以及其他资源存放的目录,比如./ios/bundle 命令的详细介绍：https://github.com/facebook/react-native/blob/master/local-cli/bundle/bundleCommandLineArgs.js 为了方便使用，可以将命令写入 package.json npm run bundle-ios 通过命令执行 ps. 命令可能报错：ENOENT: no such file or directory, open ‘./ios/bundle/index.ios.jsbundle’ 原因是打包前需要在 ios 目录下创建 bundle 目录 引入静态文件 Add Files to “app” 选择 bundle 文件，选择 Create folder reference，勾选 app，点击 Add 添加 添加到项目下的文件必须是蓝色的 jsCodeLocation修改 AppDelegate.m 文件，将 debug 的jsCodeLocation 修改为 release 的 // for debug // jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil]; // for release jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;bundle/index.ios&quot; withExtension:@&quot;jsbundle&quot;]; End经过上述步骤，再使用 xcode 运行项目的时候，App 内所调用的文件就是离线的了，n然后可以通过正常的 APP 发布流程，导出，发布到 App Store]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 开放 HTTP 数据请求设置]]></title>
    <url>%2F2018%2F04%2F25%2F116-react-native-ios-http-config%2F</url>
    <content type="text"><![CDATA[info.plist -&gt; App Transport Security Settings -&gt; Allow Arbitrary Loads 默认值是 NO，修改为 YES，就可以加载 HTTP 站点的数据了]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[费雪效应]]></title>
    <url>%2F2018%2F02%2F06%2F115-fisher-effect%2F</url>
    <content type="text"><![CDATA[费雪效应是由著名的经济学家费雪第一个揭示了通货膨胀率预期与利率之间关系的一个发现，它指出当通货膨胀率预期上升时，利率也将上升。 费雪效应]]></content>
      <categories>
        <category>金融</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vue+axios 实现登录状态判定以及请求拦截]]></title>
    <url>%2F2018%2F01%2F15%2F114-axios-interceptors%2F</url>
    <content type="text"><![CDATA[策略 通过 axios 在请求头添加 Authorization 后端验证，通过验证：返回数据，未通过：返回错误状态 401 通过 axios 拦截器，判断返回状态，如果是401，跳转到登陆 组件 vue vuex vue-router axios 关键点axios 的拦截器 // 请求 拦截器 axios.interceptors.request.use( config =&gt; { // 在请求之前做某事发送 if (store.state.login.token) {// 判断是否存在token,如果存在,则每个http header都加上 token config.headers.Authorization = `Bearer ${store.state.login.token}`; } return config; }, err =&gt; {// 发生错误 return promise.reject(err); }); // 响应 拦截器 axios.interceptors.response.use( response =&gt; { // 对响应数据做某事 return response; }, error =&gt; { if (error.response) {// 对响应错误做出反应 switch (error.response.status) { case 401: // 401 清除token信息 并跳转到login }) } // 返回接口返回的错误信息 return Promise.reject(error.response.data); } });]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[devise 登录方式修改（邮箱、用户名、手机号）]]></title>
    <url>%2F2018%2F01%2F09%2F113-devise-login-method-config%2F</url>
    <content type="text"><![CDATA[单方式登录选择登录方式前要保证 users 表中有这个字段 以修改登录方式为 username 为例 一种方式是修改 User model，添加devise :database_authenticatable, :authentication_keys =&gt; [:username] authentication_keys 中只能填写一种 另一种方式修改 devise.rb 的配置项config.case_insensitive_keys = [:username] 我使用这种方式的时候不管用，还没找到原因 多方式登录同样的，选择登录方式前要保证 users 表中有这个字段 以允许 email、username两种方式登录为例 1. 在 User model 中添加虚拟属性attr_accessor :login 2. 修改允许参数，在 app/controllers/application_controller.rb 中添加before_action :configure_permitted_parameters, if: :devise_controller? protected def configure_permitted_parameters devise_parameter_sanitizer.permit(:sign_in, keys: [:login, :password]) end 3. 修改 authentication_keys同当方式登录，这里要修改为 login 4. 在 User model 中覆盖 find_for_database_authentication 方法protected def self.find_for_database_authentication warden_conditions conditions = warden_conditions.dup login = conditions.delete(:login) where(conditions).where([&quot;lower(username) = :value OR lower(email) = :value&quot;, {value: login.strip.downcase}]).first end 调试时这里可以添加断点，如果不通过这里，可能就是 authentication_keys 修改没有生效 5. 修改前端传参现在前端传递的参数应该修改为 login 跟 password]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
        <tag>devise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node 配置 oauth2 (一) —— 密码模式]]></title>
    <url>%2F2018%2F01%2F07%2F112-node-oauth2-secret-mode%2F</url>
    <content type="text"><![CDATA[基本知识oauth2 介绍，推荐阮老师的 理解 oauth2，深入浅出 基本环境 使用的框架是 express 基本 oauth2 组件使用的是 node-oauth2-server，使用前推荐详细阅读文档，因为在配置过程中的多数错误都是因为文档阅读不仔细造成的 npm install oauth-server ORM 组件 sequelize 过程 使用 Sequelize 创建模型 OAuthAccessTokenOAuthClientOAuthRefreshToken oauth2 model 配置 getClient(clientId, clientSecret, callback)// grantTypeAllowed (clientId, grantType, callback) 可以不添加，在oauth2server 初始化配置中使用 grants 配置getUser(username, password, callback)// validateScope(token, client, user, callback) 验证 scope，可以不添加saveToken(token, client, user, callback) express 配置 const express = require(‘express’)const oauthServer = require(‘oauth2-server’)const Request = oauthServer.Requestconst Response = oauthServer.Responseconst bodyParser = require(‘body-parser’)const app = express()const oauth = new oauthServer({ model: require(‘./model’), grants: [‘password’, ‘client_credentials’], debug: true})app.use(bodyParser.urlencoded({ extended: true }))app.all(‘/oauth/token’, function(req, res, next){ console.log(req.body) var request = new Request(req); var response = new Response(res); oauth.token(request, response) .then(function(token) { // Todo: remove unnecessary values in response return res.json(token) }).catch(function(err){ return res.status(500).json(err) }) }) 验证 踩过的坑 请求 header和参数 配置 oauth2 必须使用 application/x-www-form-urlencoded，也就几组基本的 form 类型 post 请求 另外需要携带 Authorization headers: { ‘Authorization’: ‘Basic ‘+Base64.encode(client_id+’:’+client_secret), ‘Content-Type’: ‘application/x-www-form-urlencoded’} 解析 x-www-form-urlencoded 格式需要在后台使用 body-parser 组件 在使用 axios 时，传递到后台的数据会被解析成字符串，所以需要使用 qs.stringify() 处理 error Missing paramater: grant_type 使用 qs.stringify() 处理参数 源码自己写的源码是在一个项目下的，不方便贴出来，所以推荐一个 github 上的 node-oauth2-server-implementation ，其中有个坑是 validateScope 方法落下了 user 参数，可以直接注释掉那个方法，在 model 配置部分已经说明]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>express</tag>
        <tag>oauth2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年计划&完成情况记录]]></title>
    <url>%2F2018%2F01%2F03%2F111-2018-plans%2F</url>
    <content type="text"><![CDATA[工作 使用 React Native 完成公司 App 开发各大功能模块基本完善，但是很多地方的体验需要优化，需要往原生方向扩展 对 webpack 自动化项目构建加深理解，发掘新的方案，向前端架构师靠拢前端自动化打包部署形成，前端调试模式规范形成 学习 jquery、react、angular 源码nothing 完成个人网站 express+react+webpack 的重构finished 学习 Python，完成对 DOTA2、PUBG 的数据爬取Python 没看，PUBG放弃，DOTA2接口需要更新 了解机器学习nothing 了解区块链nothing 阅读20本书，列表：机器学习、区块链、javascript 设计模式、寻秦记、KK 三部曲、巨婴国、王阳明大传 恶补金融：《我做散户这十年》、《读懂金融的第一本书》、《从零读懂投资理财学》、《财务报表一本通》、MBA智库各种名词、京东方A年报 都是小说：《寻秦记》 技术：《Android第一行代码》 又又买了很多书 50篇完整有质量的博客数量可能够了，但是很多地方要补充或者只有个标题 生活老婆怀孕了，快到预产期了，抵消掉下面的所有活动 借工作的机会去北京见三位同学，京东、美团 去武汉，回一趟学校 去杭州，室友聚会 生日、结婚纪念日、年旅游 跟老婆一起找到一项共同兴趣 减到 150 斤以下 洗牙、孕检]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kindle使用指南]]></title>
    <url>%2F2017%2F11%2F25%2F110-kindle-instructions%2F</url>
    <content type="text"><![CDATA[资源1 亚马逊图书 2 其他下载站点 书籍安装1 数据线导入 2 通过邮件发送 格式转换1 calibre]]></content>
      <categories>
        <category>图书推荐</category>
      </categories>
      <tags>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native 入门，一路踩过的坑]]></title>
    <url>%2F2017%2F10%2F17%2F109-react-native-init%2F</url>
    <content type="text"><![CDATA[有时候，按照入门文档一步一步地走，也会遇到各种各样的坑，React Native 有很长一段时间没有碰了，最近沉迷吃鸡，打算做一个吃鸡数据的 APP，所以又拾起来。现在的前端，真的，需要学的东西太多，并且基本上用完就放下，好累。之前没有好好记录，既然重新开始，就不要错过这么好的机会，好好记录吧 环境配置没遇到坑 cli 工具创建项目 Print: Entry, “:CFBundleIdentifier”, Does Not Exist 原因：创建时有些插件没有安装上 解决办法：清空缓存，已安装文件，重装，但不需要重建项目 rm -rf node_modules &amp;&amp; rm -rf ~/.rncache &amp;&amp; yarn Hello World Unhandled JS Exception: Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. You Likely Forgot To Export Your Component From The File It’S Defined In. 原因：创建的组件没有输出 //示例代码 ... class HelloWorldApp extends Component { ... } //修改为 ... export default class HelloWorldApp extends Component { ... } 即使是官方的代码，也别信]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nohup commands &]]></title>
    <url>%2F2017%2F09%2F11%2F108-nohup-commands%2F</url>
    <content type="text"><![CDATA[有些进程需要一直启动，占用终端窗口，如 redis-server 但是并不想让他们占用窗口，所以就用到了这个指令 nohup redis-server &amp; 指令的作用是使进程在后台运行，不占用终端 关闭如果没有终端，那么怎么关闭进程呢，答案是站到 pid，然后 kill ps aux | grep redis kill pid 扩展还有一些程序自带守护进程的指令，如 php-fpm sudo php-fpm -D 也可以不占用终端]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Wordpress 访问加速配置]]></title>
    <url>%2F2017%2F08%2F25%2F107-wordpress-optimize%2F</url>
    <content type="text"><![CDATA[去掉不用的系统自带插件如 embed、emoji 插件：Disable Embeds wp_deregister_script(&apos;wp-embed&apos;); 去掉静态资源后的版本号Remove Query Strings]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery each 遍历退出]]></title>
    <url>%2F2017%2F08%2F21%2F106-jquery-each%2F</url>
    <content type="text"><![CDATA[return false; //相当于循环的 break return true; //相当于循环的 continue 所以判断元素存在的正确写法应该是这个样子： function isLiExist(id){ var flag = true $(&apos;.workbench_select_list li&apos;).each(function(){ if(parseInt(id) == parseInt($(this).data(&apos;id&apos;))){ flag = false return false } }) return !flag }]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rails 线上部署 js 查错]]></title>
    <url>%2F2017%2F08%2F10%2F105-rails-js-debug%2F</url>
    <content type="text"><![CDATA[到项目目录下 rails c JS_PATH = &quot;app/assets/javascripts/**/*.js&quot;; Dir[JS_PATH].each do |file_name| puts &quot;\n#{file_name}&quot; puts Uglifier.compile(File.read(file_name)) end]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 配置 PHP]]></title>
    <url>%2F2017%2F07%2F31%2F104-mac-php%2F</url>
    <content type="text"><![CDATA[安装brew install php71 --with-fpm 启动sudo nginx sudo php-fpm -D]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sorry, you can't use Pry without Readline or a compatible library.]]></title>
    <url>%2F2017%2F07%2F24%2F103-sorry-you-cant-use-pry-without-readline-or-a-compatible-library%2F</url>
    <content type="text"><![CDATA[报错原因： 更新了 readline，而 ruby 是依赖 readline 的，所以需要重新编译 ruby。 我用的是 rvm 来管理 ruby，编译方法： //替换成自己使用的版本 rvm reinstall ruby-2.3.1 如果中间报错，再重新运行一次！ Ps.更新完后还可能遇到报错： undefined method `activate_bin_path&apos; for Gem:Module (NoMethodError) 需要我们更新 gem 和 bundler gem update --system gem update bundler 然后在项目中再运行一下： bundle install ok]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery点击其他地方隐藏]]></title>
    <url>%2F2017%2F07%2F17%2F102-jquery-click-toggle%2F</url>
    <content type="text"><![CDATA[这是在制作展开隐藏菜单时i遇到的一个问题，经过查找实践，这里介绍 3 种方法 方法一将隐藏事件绑定到 document 上，在 menu 上通过 stopPropagation 阻止事件冒泡 $(document).on(&apos;click&apos;, &apos;#stop&apos;, function(e){ e.stopPropagation() alert(&apos;stop&apos;) }) 测试地址：点击其他地方隐藏实例 这种方法的缺陷：如果在其他元素也阻止事件冒泡，那么就不能够隐藏 menu 了，所以就有了方法二 方法二不使用 stopPropagation，而是通过判断是否是事件触发的元素来决定是否隐藏 $(document).on(&apos;click&apos;, function(e){ if ($(e.target).closest(&apos;.menu, #btn&apos;).length === 0) { $(&apos;.menu&apos;).hide(); } }) 测试地址：点击其他地方隐藏方法二 方法三通过一款插件使 jquery 只是 outside 事件 地址：jquery outside events]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改 SSH 默认端口号 GIt 的配置]]></title>
    <url>%2F2017%2F07%2F12%2F101-git-ssh-port-config%2F</url>
    <content type="text"><![CDATA[方法一：直接修改 URL 为 ssh:// 开头git remote set-url ssh://git@domain.com:xxx/route_to_repo/reponame.git 方法二：修改本地配置文件mac 下 vim ~/.ssh/config 添加配置 host newdomain hostname domain.com //别名，可以不加 port xxx]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7 修改 SSH 端口号]]></title>
    <url>%2F2017%2F07%2F12%2F100-centos7-ssh%2F</url>
    <content type="text"><![CDATA[vim /etc/sshd_config 修改 Port 为自己要设置的端口号 service sshd restart]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas toDataURL()跨域问题]]></title>
    <url>%2F2017%2F07%2F11%2F99-canvas-todataurl%2F</url>
    <content type="text"><![CDATA[在使用 canvas toDataURL 方法时遇到这样的报错 Uncaught DOMException: Failed to execute &apos;toDataURL&apos; on &apos;HTMLCanvasElement&apos;: Tainted canvases may not be exported. //被污染的 canvas 不能导出 什么是被污染的 canvas？不通过 CORS(cross-origin sharing 跨域资源共享) 虽然可以调用图片，但是这会污染 canvas。一旦 Canvas 被污染，你就无法读取其数据，如 toBlob、toDataURL 等方法都无法使用。这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。 如何解决这个问题一种方式是：在服务器中配置 Access-Control-Allow-Origin，各种语言都与自己配置的方式，这里不多说。 另一种方式是在前端解决： 原本的调用可能是 var img = new Image() img.src = src 在配置 src 属性前加入 img.crossOrigin = &apos;anonymous&apos; 也可以解决跨域污染的问题]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 GIt 实现服务器自动部署]]></title>
    <url>%2F2017%2F07%2F08%2F98-git-deploy%2F</url>
    <content type="text"><![CDATA[1、线上服务器user git host 110.110.110.110 2、创建线上 git repomkdir /var/repo //创建 git repo 的目录 cd /var/repo sudo git init --bare glog.git 3、配置 git hooks 在 index.git 目录下有一个 hooks 目录，在目录中创建一个 post-receive 文件 #!/bin/bashgit –work-tree=/home/www/blog –git-dir=/var/repo/blog.git checkout -f post-receive 是一个可执行文件，这里仅仅同步代码到目录下，还有其他指令也可以写进去 添加执行权限 chmod +x post-receive 4、创建本地 git repo 创建完成后，关联远程库 git remote add origin user@110.110.110.110:/var/repo/index.git 然后就可以执行其他指令，同步代码到线上了]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前后端结合的方式处理页面屏幕兼容的方案]]></title>
    <url>%2F2017%2F05%2F18%2F97-device-screen%2F</url>
    <content type="text"><![CDATA[后端根据 user-agent 判断前端设备类型 页面渲染时根据设备渲染不同的内容 在页面 JS 中写入 mobile: true/false 前端@media 根据不同的屏幕宽度确定内容展示 Ps 一般而言出现问题的是 Pad 类的产品，因为单纯靠屏幕宽度无法判别设备类型 js 也有判断设备的方式，选择后端判断的原因是用了框架，对整个站点的配置比较统一]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Wings 没了]]></title>
    <url>%2F2017%2F05%2F18%2F96-wings-winner-or-loser%2F</url>
    <content type="text"><![CDATA[最近 CNDOTA 又有大新闻，ACE 将 Ti6冠军 Wings 五人禁赛，理由是 Wings 无视联盟规定。 ACE 为何物？百度词条有云，]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ruby 中英文混合截取字符串截取]]></title>
    <url>%2F2017%2F05%2F12%2F95-rails-truncate%2F</url>
    <content type="text"><![CDATA[其基本原理是使用字节来计量长度，其中参数 maxsize 代表的是字节，英文字符一个字符是一个字节，而汉字是三个。这种方式是比较准确的一种中英文混合截取的方法。还有别的方法欢迎讨论 def truncate_u(unicode_string, maxsize) return unicode_string if unicode_string.blank? size = 0 s = “” unicode_string.each_char do |c| c_size = c.bytes.to_a.length size += c_size if size &gt;= maxsize s.concat(c) if s != unicode_string s = s.slice(0, s.length - 1).concat(‘…’) end break else s.concat(c) end end send]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于前后端分离]]></title>
    <url>%2F2017%2F05%2F08%2F94-separate-front-and-rear-ends%2F</url>
    <content type="text"><![CDATA[正式入行前端正是这个行业盛行前夕，加之本身喜欢各种博客浏览，所以接触的都是非常新的概念，所以入行之初我就坚持一个理念，前后端分离。]]></content>
      <categories>
        <category>开发感悟</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[全栈开发所感]]></title>
    <url>%2F2017%2F05%2F08%2F93-full-stack-development%2F</url>
    <content type="text"><![CDATA[全栈开发是怎样的一种体验？整个项目结构了然于胸，但是依然手忙脚乱，尤其是项目中功能匆忙添加的时候，没有全局的规划，改另有，写接口，前端调试，看似洒脱，回头看代码，肯定与整个项目格格不入。]]></content>
      <categories>
        <category>开发感悟</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Js 获取当天零点时间戳]]></title>
    <url>%2F2017%2F05%2F04%2F92-js-get-timestamp%2F</url>
    <content type="text"><![CDATA[var date = new Date(); date.setHours(0); date.setMinutes(0); date.setSeconds(0); date.setMilliseconds(0); var timestamp = date.getTime(); var unix_timestamp = Math.floor(date.getTime() / 1000);]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7 服务器初始化用户配置]]></title>
    <url>%2F2017%2F04%2F24%2F91-centos7-init-config%2F</url>
    <content type="text"><![CDATA[使用 ssh 以 Root 身份登录ssh root@xxx.xxx.xxx.xxx 创建新用户，代替 root服务器上一般禁忌直接使用 root 用户操作，所以我们需要创建一个拥有所有权限的新用户来代替 root 尽心所有服务器操作 adduser username passwd username 输入密码，然后确认密码，创建用户完成。然后是更改用户分组为 wheel，使得用户拥有所有权限。 gpasswd -a username wheel 会提示添加用户到组成功。 添加公钥认证使用公钥的方式登录，可以避免每次都输入密码。首先在本地通过指令生成密钥 ssh-keygen 生成的文件在 .ssh 目录下，包括 id_rsa （私钥），id_rsa.pub（公钥），请不要把自己的私钥发给任何人。打开公钥，复制。 回到服务器，切换到刚刚创建的用户下，创建 .ssh 目录，修改权限 su - username mkdir .ssh chmod 700 .ssh 然后在 .ssh 目录下创建 authorized_keys 文件，将刚刚复制的公钥黏贴进去，然后修改文件权限 chmod 600 .ssh/authorized_keys 禁止 root 登录，提高服务器安全性vim /etc/ssh/sshd_config 打开 ssh 的配置文件，将 #PermitRootLogin yes 修改为 PermitRootLogin no 还可以修改默认端口号，将 22 改为其他的，也可以有效的防范攻击 尝试新用户登录此时已经配置好了服务器的用户和 ssh 登录，在本地另外打开一个终端，用新用户登录，切记，在尝试登陆成功之前千万不要把原本的 root 登录的终端关掉。 ssh username@xxx.xxx.xxx.xxx 缩减登录指令在本地环境打开文件 vim .ssh/config 填写 Host username HostName xxx.xxx.xxx.xxx Port xx User username IdentityFile ~/.ssh/id_rsa 然后就可以使用端的指令登录了 ssh username 参考文章在CentOS 7初始服务器设置 Ruby on Rails 开发和生产环境搭建]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails 上使用 Vue+Webpack 实现前后端分离]]></title>
    <url>%2F2017%2F04%2F20%2F90-rails-webpack-vue%2F</url>
    <content type="text"><![CDATA[项目地址：rails-webpack-vue-base-framework 项目结构配置 Webpack配置 Rails使用 Vue]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>rails</tag>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 问题处理]]></title>
    <url>%2F2017%2F04%2F20%2F89-git-errors%2F</url>
    <content type="text"><![CDATA[fatal: refusing to merge unrelated histories场景本地创建项目，在打算向 github 提交的时候 git init 然后线上创建 repo，使用 git remote add origin git@github.com:callcter/branchname.git git add . git commit -a -m &apos;init commit&apos; git pull origin master 这个时候报错：fatal: refusing to merge unrelated histories 原因是自 git 2.9 开始，–allow-unrelated-histories 选项需要手动添加 来自官方的说明： “git merge” used to allow merging two branches that have no common base by default, which led to a brand new history of an existing project created and then get pulled by an unsuspecting maintainer, which allowed an unnecessary parallel history merged into the existing project. The command has been taught not to allow this by default, with an escape hatch –allow-unrelated-histories option to be used in a rare event that merges histories of two projects that started their lives independently. 所以指令应该是： git pull origin master --allow-unrelated-histories 修改 .gitignore 不生效原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交 123git rm -r --cached .git add .git commit -m &apos;update .gitignore&apos;]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 图片引用]]></title>
    <url>%2F2017%2F04%2F17%2F88-vue-picture%2F</url>
    <content type="text"><![CDATA[页面图片data () { return { img: require(&apos;path/to/your/source&apos;) } } 然后在template中 &lt;img :src=&quot;img&quot; /&gt; 背景图片data () { return { img: require(&apos;path/to/your/source&apos;) } } &lt;div :style=&quot;{backgroundImage: &apos;url(&apos; + img + &apos;)&apos;}&quot;&gt;&lt;/div&gt; 或者直接在css中定义 background-image: url(&apos;path/to/your/source&apos;);]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue报错--template syntax error Component template should contain exactly one root element]]></title>
    <url>%2F2017%2F04%2F17%2F87-vue-error%2F</url>
    <content type="text"><![CDATA[报错信息template syntax error Component template should contain exactly one root element: 错误信息很明确，模板只应该有一个根元素 总结模板所有的内容都应该在一个根元素内，通常会用给一个div来包裹其他元素]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[accepts_nested_attributes_for]]></title>
    <url>%2F2017%2F04%2F14%2F86-accepts-nested-attributes-for%2F</url>
    <content type="text"><![CDATA[从 Rails 2.3 开始在 models 中提供了 accepts_nested_attributes_for 命令让 SQL 关联嵌套表查询变得简单。 不使用 accepts_nested_attributes_for//models class Product &lt; ActiveRecord::Base has_one :detail end class Detail &lt; ActiveRecord::Base belongs_to :product end //view &lt;% form_for :product do |f| %&gt; &lt;%= f.text_field :title %&gt; &lt;% fields_for :detail do |detail| %&gt; &lt;%= detail.text_field :manufacturer %&gt; &lt;% end %&gt; &lt;% end %&gt; //controller class ProductsController &lt; ApplicationController def create @product = Product.new(params[:product]) @detail = Detail.new(params[:detail]) Product.transaction do @product.save! @detail.product = @product @detail.save end end end 上例中，Product 和 Detail 模型是一对一的关系，我們若想建立一個产品並同时建立一個新的细节，需要將 product 对象和 detail 对象， 通过 @detail.product = @product 进行关联。 但是在控制器中做这样的操作明显过于复杂，产品模型应该只负责创建产品。 使用 accepts_nested_attributes_forclass Product &lt; ActiveRecord::Base has_one :detail accepts_nested_attributes_for :detail end &lt;% form_for :product do |f| %&gt; &lt;%= f.text_field :title %&gt; &lt;% f.fields_for :detail do |detail| %&gt; &lt;%= detail.text_field :manufacturer %&gt; &lt;% end %&gt; &lt;% end %&gt; class ProductsController &lt; ApplicationController def create @product = Product.new(params[:product]) @product.save end end 在 product 模型中添加了 accepts_nested_attributes_for，这样 product 模型仅负责自己的创建，是不是简单了呢？ 一对多关系同时我们也可以在一对多的模型中使用 accepts_nested_attributes_for 来简化关联对象的创建 class Project &lt; ActiveRecord::Base has_many :tasks accepts_nested_attributes_for :tasks end class Task &lt; ActiveRecord::Base belongs_to :project end &lt;% form_for @project do |f| %&gt; &lt;%= f.text_field :name %&gt; &lt;% f.fields_for :tasks do |tasks_form| %&gt; &lt;%= tasks_form.text_field :name %&gt; &lt;% end %&gt; &lt;% end %&gt; 参数配置accepts_nested_attributes_for :pics, :allow_destroy =&gt; true, :reject_if =&gt; :all_blank]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[放弃 Bootstrap]]></title>
    <url>%2F2017%2F04%2F11%2F85-bootstrap%2F</url>
    <content type="text"><![CDATA[2013年，初始 bootstrap 就被他的设计风格吸引，简洁、大方、规范，那时正是 HTML5 兴起，语义化概念最火的时候。Bootstrap、Semantic 等 UI 语义化框架如雨后春笋般层出不迭，Bootstrap 因为他的简洁、高定制性脱颖而出，我在经历了熟识 HTML 跟 CSS 却苦于没有设计细胞一段时间后见到了这个框架，马上迷上了他，马上改版自己的网站，套用他的案例页面。日后的职业生涯中，几个公司都在使用。 但是，随着我对前端越来越深入的学习，开始对 Bootstrap 越来越缺乏热情。因为一般而言公司开发的网站定制性都非常高，一个网站开发完，覆盖修改 bootstrap 的代码量甚至会超过 bootstrap 框架本身的代码量，最后能够保留的 bootstrap 的原本的东西可能只剩下栅格，甚至于因为对展示内容的考虑，以及移动客户端的开发，栅格都不再保留。而 bootstrap 本身的代码提及并不小，最后只能成为网站加载的累赘。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人生中的第一个 SSR]]></title>
    <url>%2F2017%2F04%2F11%2F84-first-ssr-of-life%2F</url>
    <content type="text"><![CDATA[体力用完，等级提不上去，剧情过不去，又不是人民币玩家，在万念俱灰的时候用仅有的100勾玉抽了卡，大天狗呀，SSR 呀，就要绝望的时候居然顺利偷渡到欧洲大陆 T_T，哈哈哈，开心]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Web 移动端 UI 设计标准]]></title>
    <url>%2F2017%2F04%2F10%2F83-web-mobile-ui-design-standard%2F</url>
    <content type="text"><![CDATA[公司开发的网站要做移动端屏幕适配，几次设计师都没有给到正确的设计图，我用的是 Chrome devtools 中的尺寸，设计师用的是 Ps 里给出的设备分辨率，每次做出来的界面给设计图有很大出入，因为没有详细了解这一块知识，所以也没办法给设计师讲清楚，所以近期阅读了很多这方面的文章，这里下来分享给还在坑里的前端和设计们。 简单来说，屏幕尺寸分为物理分辨率，也就是我们购买手机时参考之一，比如如今普及的 1920*1080 屏；还有一种分辨率，叫做逻辑分辨率，也就是 Chrome 中调试移动端使用的分辨率，做 UI 设计时，应该使用这个分辨率。 但是，如果 UI 设计时使用逻辑分辨率，那么设计图实在太小了，不能忍。所以，最好的方式，是按照倍率（物理分辨率与逻辑分辨率的倍数）进行放大。这样还有一个好处，使用图片时，如果按照逻辑分辨率来制作图片，当他放到实际屏幕时是模糊的，因为屏幕分辨率远高于图片的分辨率大小，所以就会放大模糊。所以，使用屏幕的物理分辨率来做设计可以有效地避免这个问题。必须的一点，在对设计图进行标记的时候，一定要按照要除以倍率。例如在1920*1080上设计时使用的是 36px 大小的字体，如果屏幕倍率是3，标记的时候应该标记 12px，谨记！ 下面列出了一些常用到的手机屏幕的物理分辨率、逻辑分辨率和倍率，因为讲解的是 Web UI 设计，不是 APP 界面设计，所以不需要针对每种屏幕做设计，例如我跟我们的设计师定的是使用 iPhone 6 的屏幕来做设计。 Android 手机屏幕常用尺寸 iOS 手机屏幕尺寸 如果看完 Web UI 设计的方案还不满足，想要详细了解更多的手机分辨率以及 APP UI 的设计方案，我在这里推荐几篇文章： 移动端尺寸基础知识 移动端H5页面的设计稿尺寸（上） 移动端H5页面的设计稿尺寸（下） iPhone屏幕尺寸、分辨率及适配 看了几天相关的文章，一直在脑海里对文章进行构思，终于今天下笔完成。虽然文章的字数不多，却是我认为的最明确的能够说明白 Web UI 设计的，如果有不明白的问题，欢迎探讨！]]></content>
      <categories>
        <category>设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript获取图片尺寸]]></title>
    <url>%2F2017%2F04%2F07%2F82-javascript-get-pictures-size%2F</url>
    <content type="text"><![CDATA[在日常开发场景中，会有时候遇到根据图片尺寸来处理的问题，如全屏查看图片时图片的位置。 图片的高度小于屏幕高度这种情况需要图片垂直居中，可以使用相对定位（可以使用 margin 来居中显示）跟 translate 结合，完全不需要 js 配合： position: relative; top: 50%; translateY: -50%; //这里不考虑多浏览器兼容 其他方法都需要知道图片的尺寸。 图片的高度大于屏幕高度图片不存在垂直居中的问题，但是两种情况需要知道图片的尺寸。 DOM Image 对象Image 对象代表嵌入的图像。 标签每出现一次，一个 Image 对象就会被创建。 Image 对象的属性除了id、name、src、alt、width、height、border、className、title等标准属性外，下面列出Image对象的其他重要属性： align 设置或返回与内联内容的对齐方式。可选值：left|right|top|middle|bottom complete 返回浏览器是否已完成对图像的加载。如果加载完成，则返回 true，否则返回 fasle。 hspace 设置或返回图像左侧和右侧的空白。hspace 属性可设置或返回图像的左边缘和右边缘的空白。hspace 和 vspace 属性可与 align 一同使用，来设置图像与周围文本的距 isMap 返回图像是否是服务器端的图像映射。 longDesc 设置或返回指向包含图像描述的文档的 URL。 lowsrc 设置或返回指向图像的低分辨率版本的 URL。 useMap 设置或返回客户端图像映射的 usemap 属性的值。 vspace 设置或返回图像的顶部和底部的空白。 事件句柄onerror 在装载图像的过程中发生错误时调用的事件句柄。 onabort 当用户放弃图像的装载时调用的事件句柄。 onload 当图像装载完毕时调用的事件句柄。 使用 Image 对象在 JavaScript 中创建一个 Image 对象，给他的 src 赋值，就可以获取他的 width、height 等属性，这正是我们需要的。为了确定图片已经加载完，再使用 onload 事件，在回调中执行后续操作。 var img = new Image(); img.src = &quot;http://dreamser.com/logo.png&quot;; img.onload = function(){ console.log(img.width); }]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[改使用 Markdown 写博客]]></title>
    <url>%2F2017%2F04%2F05%2F81-markdown%2F</url>
    <content type="text"><![CDATA[思考良久，最终决定使用 markdown 来写博客。原因有二：一，排版清晰；二，通用，在有道云笔记上使用的也是 markdown。]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CSS 中的字体单位的使用方案]]></title>
    <url>%2F2017%2F04%2F04%2F80-css-font-size-unit%2F</url>
    <content type="text"><![CDATA[常用单位pxpx 是 pixel 缩写，是基于像素的单位。根据显示器的分辨率来确定长度，像素是相对于显示器屏幕分辨率而言的。譬如，windows 用户所使用的分辨率一般是96像素/英寸，而 mac 用户所使用的分辨率一般是72像素/英寸。 ptpt 是 point (磅)缩写，是一种固定长度的度量单位，大小为1/72英寸，是 PS 中用到的一种大小单位，在进行网页设计时不使用。 emem：是相对于其父元素来设置字体大小的。 这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小，在我们多次使用时，就会带来无法预知的错误风险。 rem相对于根元素 html 的字体大小来设置字体大小。由于 rem 是 CSS3 新引进来的一个度量单位，所以 IE6~8 不支持。 这样就意味着，我们只需要在根元素确定一个参考值，在根元素中设置多大的字体，这完全可以根据您自己的需要来设置。 兼容 字体单位方案参考文章 CSS中字体单位em,rem,px,pt 总结]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站设计]]></title>
    <url>%2F2017%2F04%2F03%2F79-web-design%2F</url>
    <content type="text"><![CDATA[颜色我写样式用的是 SCSS，命名也是如此 变量 色值 用途 $white #ffffff 用于卡片、弹出、对话框、深色背景下的文字 $back #f1f1f8 主背景 $back_high #f5f5fc 背景 高亮 $back_light #fcfcfd 背景，凸显层级，如表格隔行换色 $border #eaeaf2 边框 $border_focus #4c89fb 边框 输入 focus $btn #4c89fb 按钮 normal $btn_hover #437ae0 按钮 hover $btn_disable #f6f6f8 按钮 disable $line #eaeaf2 分割线 $link #4389fb 链接，一般代表了网站的主色调 $font_1st #18181c 文字一级 $font_2nd #9092a5 文字二级 $font_3rd #d3d4df 文字三级 $warn_fail #ff4040 提醒，失败 $warn_success #2cbd5f 提醒，成功 $warn_warning #ffaa00 提醒，警告 字体Family这里只列出来，详细理由这里单独介绍 &quot;Helvetica Neue&quot;, Helvetica, Tahoma, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Heiti SC&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; 排版屏幕尺寸基本上主流的 UI 框架都是以这一套方式来划分的 - 移动设备：&lt;= 600px - 平板电脑设备：&gt; 600px - 桌面设备：&gt; 992px - 大桌面设备：&gt; 1200px 效果]]></content>
      <categories>
        <category>设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos7+PHP+MySQL+Nginx服务器配置]]></title>
    <url>%2F2017%2F04%2F03%2F78-centos7-php-mysql-nginx%2F</url>
    <content type="text"><![CDATA[服务器环境选择的是Centos，因为比较稳定，但是也有缺点，系统自带的软件版本都比较低，如Git，以及建站需要的PHP等都需要自己来配置，爬过坑的才能算自己学到的，所以自己配才能学到东西。之所以选择PHP，不是因为他是“最好的语言”，是因为自己入门Web开发就是用的PHP，多年过去，Python，Node，Rails不停的换，还是忘不了他呀。 更新系统 Nginx PHP MySQL]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux常用命令]]></title>
    <url>%2F2017%2F04%2F01%2F77-linux-common-command%2F</url>
    <content type="text"><![CDATA[不做长篇大论，仅罗列一下自己常用到的指令，以作备忘 lsls -- 罗列当前路径下的可见文件、文件夹 ls -al -- 这是最常用到的指令，显示全部文件（包括隐藏），并显示详细信息（包括权限、所有者、所有组、修改时间等） cdcd /dir/dir -- 进入某个目录 cd .. -- 回到上一层 cd -- 回到用户目录 pwdpwd -- 显示当前所在路径 chmod变更文件权限，分为 r（读取，4分），w（写入，2分），x（执行，1分），权限分为三组，所有者、群组、其他用户，以 rw-r–r–，意思是所有者有读写权限，群组内的用户和其他用户只有读取的权限 chmod 777 file -- 当前文件给所有者、群组、其他用户设置拥有全部权限 chmod 777 file -R -- 递归处理，当前文件及其子目录下全部文件给所有者、群组、其他用户设置拥有全部权限 chown更改文件的所有者 chown user file -R -- 递归处理，当前文件及其子目录下全部文件所有者修改为 user cp复制 mv移动 mkdir创建文件目录 rm移除文件 ssh远程连接 ssh -p 21 root@110.110.110.110 -- 以 root 账号连接地址为 110.110.110.110:21 的服务器 sed grepsed -i “” “s/com.agan_app/com.agan_app.prod/g” grep com.agan_app -rl ./prod 参考文章 linux 批量查找与替换 mac环境使用sed修改文件出错的解决方法 Mac 运行sh文件，也就是传说中的shell脚本]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站字体大小]]></title>
    <url>%2F2017%2F03%2F31%2F76-font-size%2F</url>
    <content type="text"><![CDATA[使用 rem 行高]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Font-Family 最佳方案]]></title>
    <url>%2F2017%2F03%2F31%2F75-font-family%2F</url>
    <content type="text"><![CDATA[当前的方案 font-family: “Helvetica Neue”, Helvetica, Tahoma, Arial, “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”, sans-serif;]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机屏幕UI设计——尺寸,密度,dpi,dip,px详解]]></title>
    <url>%2F2017%2F03%2F31%2F74-viewport%2F</url>
    <content type="text"><![CDATA[我当前使用的手机屏幕尺寸是： 5.5英寸 高：154.6 mm，宽：77.7 mm 分辨率： 1920 * 1080 Web 移动端界面设计，使用 逻辑分辨率]]></content>
      <categories>
        <category>设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[动画&动态效果解决方案]]></title>
    <url>%2F2017%2F03%2F30%2F73-css-animation%2F</url>
    <content type="text"><![CDATA[小的动态效果，如 hover，click、active 等使用 CSS3 的 transform、transition；复杂的动态效果，使用 js 来处理，jquery 的 animate 使用起来许多效果并不是很理想，所以改用 anime 动画库]]></content>
      <categories>
        <category>建站解决策略</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[七牛上传 token 策略]]></title>
    <url>%2F2017%2F03%2F29%2F72-qiuniu-token%2F</url>
    <content type="text"><![CDATA[token 本身是有过期时间的，直接使用七牛封装的上传组件（选择文件或拖拽上传）时它本身会处理 token，也就是每次上传都会请求一次，所以我们自己定制上传时，也要按照这个方式来，先做一次 ajax 请求 token，然后将使用token的方法封装在 success 回调中]]></content>
      <categories>
        <category>建站解决策略</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[常用 jquery插件——timeago]]></title>
    <url>%2F2017%2F03%2F28%2F71-jquery-timeago%2F</url>
    <content type="text"><![CDATA[待定…]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义滚动条]]></title>
    <url>%2F2017%2F03%2F27%2F70-custom-scrollbar%2F</url>
    <content type="text"><![CDATA[Webkit 浏览器： 1234567891011121314151617181920212223/* 设置垂直滚动条的宽度和水平滚动条的高度 */::-webkit-scrollbar&#123; width: 8px; height: 8px;&#125;/* 设置滚动条的滑轨 */::-webkit-scrollbar-track &#123; background-color: #ddd;&#125;/* 滑块 */::-webkit-scrollbar-thumb &#123; background-color: rgba(0, 0, 0, 0.6); border-radius: 4px;&#125;/* 滑轨两头的监听按钮 */::-webkit-scrollbar-button &#123; background-color: #888; display: none;&#125;/* 横向滚动条和纵向滚动条相交处尖角 */::-webkit-scrollbar-corner &#123; /\*background-color: black;\*/&#125; 插件推荐： mCustomScrollbar]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片上传解决方案]]></title>
    <url>%2F2017%2F03%2F27%2F69-picture-upload%2F</url>
    <content type="text"><![CDATA[依赖组件七牛云上传组件方案一：选择文件上传方案二：拖拽上传方案三： 黏贴板复制黏贴上传]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5录音上传&语音识别解决方案]]></title>
    <url>%2F2017%2F03%2F26%2F68-html5-recoder%2F</url>
    <content type="text"><![CDATA[依赖组件 Recorder.js 科大讯飞语音听写服务HTML5组件 七牛云服务实现方案 使用讯飞语音听写服务做转文字 Recorder录音 录音文件上传七牛本来科大讯飞有外部语音上传听写的服务，但是他们网站服务实在太差，一直502，找客服也各种推，所以只能用他们的听写，但是录音上传需要自己实现]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>html&amp;amp;5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails解决方案：Auto-complete]]></title>
    <url>%2F2017%2F03%2F21%2F67-rails-solutions-auto-complete%2F</url>
    <content type="text"><![CDATA[在实现搜索功能时，经常用到的一中优化用户体验的方式是 auto-complete。 待整理…]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails flash 定制]]></title>
    <url>%2F2017%2F02%2F24%2F66-rails-flash-custom%2F</url>
    <content type="text"><![CDATA[// layouts/application.haml= render ‘shared/flash’ // shared/_flash.haml- flash.each do |type, message| .flash{class: “#{(type==’success’ || type == ‘notice’)? ‘success’: ‘error’}”} .container - if type == ‘success’ || type == ‘notice’ %i.icon.iconfont.icon-tubiao19 = message - else %i.icon.iconfont.icon-cha = message .flash__close %i.icon.iconfont.icon-x - if flash // 自动隐藏 :javascript var timer = setTimeout(function(){ $(‘.flash’).fadeOut(‘fast’); clearTimeout(timer) }, 5000)]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails 分页插件 will_paginate]]></title>
    <url>%2F2017%2F02%2F24%2F65-rails-pagination-plugin-will-paginate%2F</url>
    <content type="text"><![CDATA[安装 在 gemfile 中添加 gem ‘will_paginate’ 使用 //后台@datas = Data.where(user_id: 1).paginate(:page =&gt; params[:page], :per_page =&gt; 10)//模板(haml)- @datas.each do |data|= will_paginate @datas //添加分页样式 配置 在 config/initializers 目录下创建 will_paginate.rb 文件 WillPaginate::ViewHelpers.pagination_options[:class] = “yourclass”WillPaginate::ViewHelpers.pagination_options[:previous_label] = “前一页”WillPaginate::ViewHelpers.pagination_options[:next_label] = “后一页”# inner_window 控制显示当前页临近的多少个链接 ，默认是4WillPaginate::ViewHelpers.pagination_options[:inner_window] = 2# outer_window 控制显示首/末页临近的多少个链接，默认是1WillPaginate::ViewHelpers.pagination_options[:outer_window] = 0# 这个参数是用来设置页码之间 的分隔符的，用空格或者（|）或者其他的都可以WillPaginate::ViewHelpers.pagination_options[:separator] = 0# 如果是false的时候，只显示上一页和下一页 (默认是 true)WillPaginate::ViewHelpers.pagination_options[:page_links] = true# 这个参数是用来我们点击页码连接的时候传递的参数的名称，一般不用改动WillPaginate::ViewHelpers.pagination_options[:param_name] = :page 分别是样式、前后页的中文]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 控制输入框伸缩]]></title>
    <url>%2F2017%2F02%2F23%2F64-css-control-input-box-scale%2F</url>
    <content type="text"><![CDATA[基本原理是判断 placeholder 是否显示： input{ width: 200px; &amp;:placeholder-shown{ width: 100px; }} :placeholder-shown 是很前卫的一个伪类，当前的兼容性较差，慎用：]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[footer 始终位于页面底部的简单方式]]></title>
    <url>%2F2017%2F02%2F23%2F63-footer-is-always-at-the-bottom-of-the-page-the-easy-way%2F</url>
    <content type="text"><![CDATA[页面布局： 样式： html, body{ width: 100%; min-height: 100%;} body{ position: relative; padding-bottom: 80px;} footer{ bottom: 0; left: 0; right: 0; position: absolute; height: 60px;}]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[防止 mouseover/out 事件多次触发]]></title>
    <url>%2F2017%2F02%2F22%2F62-prevent-the-mouseover-events-out-multiple%2F</url>
    <content type="text"><![CDATA[function contains(parentNode, childNode) { if (parentNode.contains) { return parentNode != childNode &amp;&amp; parentNode.contains(childNode); } else { return !!(parentNode.compareDocumentPosition(childNode) &amp; 16); }}function checkHover(e,target){ if (getEvent(e).type==”mouseover”) { return !contains(target,getEvent(e).relatedTarget||getEvent(e).fromElement) &amp;&amp; !((getEvent(e).relatedTarget||getEvent(e).fromElement)===target); } else { return !contains(target,getEvent(e).relatedTarget||getEvent(e).toElement) &amp;&amp; !((getEvent(e).relatedTarget||getEvent(e).toElement)===target); }}function getEvent(e){ return e||window.event;}]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails 中引用 bootstrap 的正确姿势]]></title>
    <url>%2F2017%2F02%2F20%2F61-refer-to-bootstrap-rails-the-correct-posture%2F</url>
    <content type="text"><![CDATA[1、Gem 中添加 gem ‘sass-rails’, ‘~&gt; 5.0’gem ‘bootstrap-sass’ 2、样式引用 新建一个 bootstrap_overrides.scss 文件，文件中引用 bootstrap @import ‘bootstrap-sprockets’;@import ‘bootstrap’; 在 application.scss 文件的 require 列表中将其放在首位，原因是 css 的优先级，后面的优先级高于前面的，为了定制，所以要将 bootstrap 的样式放在最前面 3、脚本文件引用 application.js 的 require 列表中添加 bootstrap]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页图标（或图片）与文字共同存在时垂直居中]]></title>
    <url>%2F2017%2F02%2F17%2F60-page-icon-or-picture-exist-together-with-text-centered-vertically%2F</url>
    <content type="text"><![CDATA[网页中经常用到图标与文字的组合，如果图标与文字字体大小相同，基本上可以保持高度一致，然后垂直居中，对标准化研究较深的，推荐张鑫旭师兄的一篇文章： 以20像素为基准的CSS网页布局实践分享 但是，还有一些时候，设计是不想让你好过，设计各种超大图标加小文字的组合，比如 或者按钮，为了凸显图标 为此，需要用别的方式处理，先上代码： 123456789101112.iconBox&#123; display: inline-block; .iconBox_icon&#123; display: table-cell; vertical-align: middle; &#125; .iconBox_text&#123; display: table-cell; padding-left: 5px; vertical-align: middle; &#125;&#125; 方法很简单，就是使用 display: table-cell，因为在 table 中的 vertical-align: middle 才能产生明确的效果，实际使用中： 123456789&lt;div class='input-group'&gt; &lt;input type='text' class='form-control'&gt; &lt;div class='input-group-addon'&gt; &lt;div class='iconBox'&gt; &lt;i class='fa fa-plus iconBox_icon'&gt;&lt;/i&gt; &lt;span class='iconBox_text'&gt;添加&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP 5 入门]]></title>
    <url>%2F2017%2F02%2F10%2F59-thinkphp-5-getting-started%2F</url>
    <content type="text"><![CDATA[年假期间开始准备重构个人站点, 纠结再三还是决定继续使用 TP 作为主站的后台框架, 当前最新版本是 5, 所以顺手升级到 5, 支持国产, 希望团队能够做得更好. 常用的文档都在看云, 不得不说, 国内的许多产品都做得很不错 完全开发手册 http://www.kancloud.cn/manual/thinkphp5 免费 其他的如入门手册 http://www.kancloud.cn/thinkphp/thinkphp5_quickstart 是需要购买的, 从 10 涨到现在的 20, 我也小小的支持了一下 环境我尝试在 Mac 上配置了一下 Apache+PHP, 两者在 Mac 上都自带, 但是遇到一次 bug, 怎么都找不到问题, 索性自己重装了一次, 有一篇很不错的参考文章: 在 MacOS Sierra 上安装 Apache 和多个版本的 PHP 安装三种方式: 官网下载, composer, git 我选择的是 composer]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年计划&总结]]></title>
    <url>%2F2017%2F02%2F10%2F58-planned-for-2017%2F</url>
    <content type="text"><![CDATA[阅读20本书 已阅：《我不是潘金莲》、《解忧杂货铺》、《午夜凶铃》4部、《小李飞刀》全集、《我是个算命先生》4部、《从点子到产品》、《浪潮之巅》 编写50篇博文， 题目有了，但是内容许多没写 阅读 jquery, react, angular 源码 学会双拼跟盲打，盲打练的还行，双拼在考虑要不要学 配置个人 vim，vscode vim 插件使用中 个人网站改版，博客主题php 版、API 版各完成一部分，主站用 express+vue+webpack+ReactNative重写中 共同监督, 共同进步!!!]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Postcss 入门]]></title>
    <url>%2F2017%2F02%2F07%2F57-introduction-to-postcss%2F</url>
    <content type="text"><![CDATA[postcss 是非常好用的 css 处理插件, 可以在 gulp, webpack 等流行的构建工具中使用, 著名的autoprefixer 就是其插件之一. 我当前使用到的插件不多: autoprefixer: Css3 浏览器兼容前缀; cssnano: css 文件压缩]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>postcss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack 入门]]></title>
    <url>%2F2017%2F02%2F07%2F56-webpack-entry%2F</url>
    <content type="text"><![CDATA[webpack 是当前最流行的构建工具之一 准备 需要配置 node 环境, 包管理我用的是 npm npm init 生成 package.json 文件 安装 npm install webpack -g 全局安装是为了使用 webpack 指令, 不然的话需要自己配置路径, 同时, 为了使用方便, 可以在项目中也安装一下 npm install webpack –save-dev 运行指令会安装 webpack 以及一些附带的插件 使用]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails按需加载静态文件]]></title>
    <url>%2F2017%2F01%2F03%2F55-rails-on-demand-loading-of-static-files%2F</url>
    <content type="text"><![CDATA[Rails 使用 Assets Pipeline 管理静态文件，为了减少请求次数，一般会将所有的静态文件压缩为一个 application 文件，在页面中仅仅引入 application.css 文件跟 application.js 文件。但是在有时候，可能一些文件容量的比较大的静态文件仅在一个或者两个页面使用，或者两个文件之间存在冲突，这个时候需要控制在不同控制器下使用不同的静态文件，也就是按需加载。 在初始化的项目中的 application.js(css) 文件中存在： require_tree . 意思是引入路径下的所有文件，需要将其注释。 然后将一些需要单独引入的文件单独建一个文件，可能为 other.js(css)，文件的作用和写法跟 application.js(css) 相同，作为一个压缩合并的文件。然后在 config-&gt;initializers-&gt;assets.rb 文件中添加新的文件： //原本Rails.application.config.assets.precompile += %w( app.js )//新的Rails.application.config.assets.precompile += %w( app.js other.js ) 最后在 include_tag 前添加引用条件，如： - if params[:controller] == ‘other’ = javascript_link_tag ‘other’, media: ‘all’]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[保留但禁用滚动条]]></title>
    <url>%2F2016%2F12%2F19%2F54-retain-disabled-scroll-bar%2F</url>
    <content type="text"><![CDATA[在实现弹窗效果时，一般需要遮罩背景，此时就会遇到滚动条的问题。遮罩的定位： position: fixed;left: 0;top: 0;right: 0;bottom: 0; 如果，页面的高度高于窗口高度，滚动条会出现，为了防止滚动条移动，可以使用： overflow-y: hidden; 但是这种方式会在弹出遮罩的时候出现跳动，原因是没有滚动条的页面宽度比原来宽了。想到的另外一种方式是去除滚动的事件绑定： !function () { var keys = { 37: 1, 38: 1, 39: 1, 40: 1 }; function preventDefault(e) { e = e || window.event; if (e.preventDefault) e.preventDefault(); e.returnValue = false; } function preventDefaultForScrollKeys(e) { if (keys[e.keyCode]) { preventDefault(e); return false; } } var oldonwheel, oldonmousewheel1, oldonmousewheel2, oldontouchmove, oldonkeydown, isDisabled; function disableScroll() { if (window.addEventListener) // older FF window.addEventListener(‘DOMMouseScroll’, preventDefault, false); oldonwheel = window.onwheel; window.onwheel = preventDefault; // modern standard oldonmousewheel1 = window.onmousewheel; window.onmousewheel = preventDefault; // older browsers, IE oldonmousewheel2 = document.onmousewheel; document.onmousewheel = preventDefault; // older browsers, IE oldontouchmove = window.ontouchmove; window.ontouchmove = preventDefault; // mobile oldonkeydown = document.onkeydown; document.onkeydown = preventDefaultForScrollKeys; isDisabled = true; } function enableScroll() { if (!isDisabled) return; if (window.removeEventListener) window.removeEventListener(‘DOMMouseScroll’, preventDefault, false); window.onwheel = oldonwheel; // modern standard window.onmousewheel = oldonmousewheel1; // older browsers, IE document.onmousewheel = oldonmousewheel2; // older browsers, IE window.ontouchmove = oldontouchmove; // mobile document.onkeydown = oldonkeydown; isDisabled = false; } window.scrollHanlder = { disableScroll: disableScroll, enableScroll: enableScroll };}(); 但是这样又遇到了新的问题，如果在弹出中的内容需要滚动，这种方式导致所有的滚动都失效，所以需要给弹出的内容再单独加上滚动事件监听： function enableScroll(e){ e.stopPropagation(); e.cancelBubble = false; var obj = $(‘.imgBrowser__box_inner’).get(0); var delta = 0; if(e.wheelDelta){ delta = e.wheelDelta/120; //IE、Opera }else if(e.detail){ delta = -e.detail/3; //Mozilla } if($(obj).innerHeight() + $(obj).scrollTop() &gt;= obj.scrollHeight){ if(delta&lt;0){ e.preventDefault(); return false; } } if($(obj).scrollTop() === 0){ if(delta&gt;0){ e.preventDefault(); return false; } } return false;}function removeWheelEvent(e){ e.stopPropagation(); e.preventDefault(); e.cancelBubble = false; return false;} 调用： $(document).get(0).addEventListener(‘mousewheel’,removeWheelEvent,false);$(‘.imgBrowser__box_inner’).get(0).addEventListener(‘mousewheel’,enableScroll,false);$(document).get(0).removeEventListener(‘mousewheel’,removeWheelEvent,false);$(‘.imgBrowser__box_inner’).get(0).removeEventListener(‘mousewheel’,enableScroll,false); 其中用了一些 jQuery 的方法 整理自：https://www.zhihu.com/question/21865401]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隐藏滚动条但是保留滚动效果的实现]]></title>
    <url>%2F2016%2F12%2F16%2F53-realization-of-hidden-but-keep-rolling-the-scroll-bar-effect%2F</url>
    <content type="text"><![CDATA[关键点：滚动条的宽度大概是 20px 我们的实现是将滚动条覆盖 …… 样式： .box_outer{ position: relative; overflow: hidden; width: 300px; height: 500px;}.box_inner{ position: absolute; left: 0; right: -20px; //覆盖滚动条 overflow-x: hidden; overflow-y: scroll;}//跟外层容器大小一致.box{ width: 300px; height: 500px;} 对于使用 Webkit 内核的浏览器来说还可以使用这样的方式： .element::-webkit-scrollbar { display: none;}]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby自定义删除确认窗口]]></title>
    <url>%2F2016%2F12%2F07%2F52-ruby-custom-delete-confirmation-window%2F</url>
    <content type="text"><![CDATA[haml代码： = link_to post, class:’trash’, remote: true, method: :delete, data: {confirm: “你确定要删除么？”} do %i.fa.fa-trash 点击会默认弹出浏览器默认的 Confirm 弹窗，但是样式不能够自定义，所以要改成弹出自己的弹窗，最主要的代码如下： //修改 rails 默认动作$.rails.allowAction = function(link){ var message = link.attr(‘data-confirm’); if(!message) { return true; } Confirm(message,link); //自定义的处理方法 return false;}//这个方法移除data-confirm属性，rails就无法再去触发默认弹窗，然后模拟点击链接$.rails.confirmed = function(link){ link.removeAttr(‘data-confirm’); link.trigger(‘click.rails’);} Confirm的定义，使用的是Qtip2的Modal： function dialogue(content,link){ $(‘‘).qtip({ content: { text: content }, position: { my: ‘top center’, at: ‘top center’, target: $(window) }, show: { ready: true, modal: { on: true, blur: false } }, hide: false, style: ‘dialogue’, events: { render: function(event,api){ $(‘button.windowConfirm__btn_ok’, api.elements.content).click(function(){ $.rails.confirmed(link); api.hide(); }); $(‘button.windowConfirm__btn_cancel’, api.elements.content).click(function(){ api.hide(); }); }, hide: function(event,api){ api.destroy(); } } })} window.Confirm = function(content,link){ var message = $(‘‘+content+’‘), ok = $(‘确定‘), cancel = $(‘取消‘); dialogue(message.add(ok).add(cancel),link);}]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS识别区分浏览器版本]]></title>
    <url>%2F2016%2F12%2F07%2F51-js-identify-distinguishing-browser-version%2F</url>
    <content type="text"><![CDATA[目前比较全面的识别： var browser = { versions: function(){ var u = navigator.userAgent, app = navigator.appVersion; return { trident: u.indexOf(‘Trident’) &gt; -1, //IE内核 presto: u.indexOf(‘Presto’) &gt; -1, //opera内核 webKit: u.indexOf(‘AppleWebKit’) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(‘Gecko’) &gt; -1 &amp;&amp; u.indexOf(‘KHTML’) == -1,//火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(‘Android’) &gt; -1 || u.indexOf(‘Adr’) &gt; -1 || u.indexOf(‘Linux’) &gt; -1, //android终端 iPhone: u.indexOf(‘iPhone’) &gt; -1 , //是否为iPhone或者QQHD浏览器 iPad: u.indexOf(‘iPad’) &gt; -1, //是否iPad webApp: u.indexOf(‘Safari’) == -1, //是否web应该程序，没有头部与底部 weixin: u.indexOf(‘MicroMessenger’) &gt; -1, //是否微信 （2015-01-22新增） qq: u.match(/\sQQ/i) == “ qq” //是否QQ }; }(), language:(navigator.browserLanguage || navigator.language).toLowerCase()}; 如果用来识别是否是移动端： var isMobile = browser.versions.mobile||browser.versions.android||browser.versions.ios]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Navigator--浏览器对象]]></title>
    <url>%2F2016%2F12%2F06%2F50-navigator-the-browser-object%2F</url>
    <content type="text"><![CDATA[最近开发项目时遇见了PC端与移动端相差极大的页面效果，无奈，只能考虑通过 JS 识别访问端的浏览器来作区分处理显示不同的效果，这里记录一下浏览器对象 navigator 的一些属性： navigator.appCodeName;//返回与浏览器相关的内部代码名，都为Mozillanavigator.appName;//返回浏览器正式名称，均为Netscapenavigator.appVersion;//返回浏览器版本号navigator.cookieEnabled;//返回浏览器是否启用cookie，true和falsenavigator.geolocation;//返回地理定位信息(h5)navigator.javaEnabled();//检测当前浏览器是否支持 Java，从而知道浏览器是否能显示 Java 小程序(IE,chrome返回true，firefox返回false)navigator.language;//返回浏览器的首选语言navigator.mimeTypes;//返回浏览器支持的Mime类型navigator.msManipulationViewsEnabled;//仅支持IE，truenavigator.msMaxTouchPoints;//字面意思是最大的触摸点，IE为0，其他不支持navigator.msPointerEnabled;//IE为true，其他不支持navigator.onLine;//是否连接互联网，均返回true(未断网)navigator.platform;//所在平台，返回win32navigator.plugins;//返回浏览器插件集合navigator.preference;//允许一个已标识的脚本获取并设置特定的 Navigator 参数navigator.product;//浏览器产品名，返回geckonavigator.systemLanguage;//获取系统语言，IE支持，返回zh-cnnavigator.userAgent;//判断浏览器类型navigator.userLanguage;//返回操作系统的自然语言设置,IE支持，返回zh-cn 因为浏览器厂商不同或者版本不同，以上的属性也会有所不同，但是我们常用的 cookieEnabled、userAgent 等属性基本上不会发生变化。 还有一些有用的方法： navigator.hasOwnProperty;//意思是是否支持属性，用法如下]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git branch常用指令]]></title>
    <url>%2F2016%2F11%2F30%2F49-git-branch-instructions%2F</url>
    <content type="text"><![CDATA[1、查看本地分支 git branch 2、查看远程分支 git branch -a 3、创建分支 git branch branch_name 4、切换分支 git checkout branch_name//创建并切换git checkout -b branch_name 5、删除本地分支 git branch -d branch_name 6、提交到远程分支 git push origin remote_branch_name//如果远程分支不存在，会创建新的远程分支]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Turbolinks中document.ready的使用]]></title>
    <url>%2F2016%2F11%2F17%2F48-turbolinks-document-ready-use%2F</url>
    <content type="text"><![CDATA[Turbolinks的基本原理是：使用pushState，从服务器加载整个网页，并替换当前加载的DOM中的和节点。默认情况下，页面所有的链接都遵循这个规则。所以 document.ready 仅仅会在页面初始加载的时候执行一边，导致的问题是在许多页面中需要的 ready 时需要执行的 js 没法执行，所以需要添加事件监听。 $(document).on(‘ready page:load’,function(){ initPage();}) 而在 Rails5 中，也就是 Turbolinks5 事件需要修改为 turbolinks:load 。]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[prop || attr]]></title>
    <url>%2F2016%2F11%2F16%2F47-prop-attr%2F</url>
    <content type="text"><![CDATA[自 jquery 1.6.2 添加了一个新的用法，就是 prop()，很多人分不清 prop 跟 attr 两个方的的用途，因为习惯了使用 attr 所以基本上都是用 attr ，甚至于 input value 取值也用 attr 1$(&apos;input&apos;).attr(&apos;value&apos;); 而她的正确写法应该是： 123$('input').val();//设置值$('input').val(value); prop 与 attr 的用法区别是： prop设置的是某元素固有的属性，而attr设置的是写在html标签上的自定义属性。 例子如下： 12345&lt;input type="checkbox" checked="checked" haha="hello" &gt;var v1 = $('input').prop("checked"); //返回true/false，是否被选中，随状态改变而改变var v2 = $('input').attr("checked"); //返回"checked"，这是你设置在标签上的，不会变var v3 = $('input').attr("haha"); //返回"hello"，自定义属性var v4 = $('input').prop("haha"); //返回undefined，根本没有这个固有属性 取 checkbox 值的错误是自己亲身经历的，特此标注，还有其他 jquery 版本变更带来的问题，可以查看此片博文：http://www.admin10000.com/document/6968.html]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby 逻辑运算符]]></title>
    <url>%2F2016%2F11%2F15%2F46-ruby-logical-operators%2F</url>
    <content type="text"><![CDATA[刚开始 Rails 的学习，看项目源码的时候遇见一个 ||= 的语句： @current_user ||= session[:user_id] &amp;&amp; User.find(session[:user_id]) 这个语句翻译过来就是： if @current_user return @current_userelse if session[:user_id] @current_user = User.find(session[:user_id]) else @current_user = nil end return @current_userend 此处总结各符号用法： and 与 &amp;&amp; 为和，区别是and优先级比&amp;&amp;低。 or 与 || 为或，not与!为非，区别均是前者优先级低于后者 &amp;&amp;=, !=, ||=这个比较灵活，可以认为它相当于+=,-=。 a &amp;&amp;= b即为a = a &amp;&amp; b。可见Ruby比Java灵活很多。 Ruby的&amp;&amp;, ||与其它语言有些不同。 &amp;&amp;运算法则为：左边为false或nil时，直接分别返回false或nil，右边将不会运算。 左边不为false或nil时，返回右边的对象。 ||运算法则为：左边为false或nil时，返回右边的对象。 左边不为false或nil时，直接返回左边的对象，右边的不会运算。 几个例子： puts false &amp;&amp; “abc” # =&gt; falseputs nil &amp;&amp; “abc” # =&gt; nil puts true &amp;&amp; “abc” # =&gt; “abc”puts “123” &amp;&amp; “abc” # =&gt; “abc” puts false || “abc” # =&gt; “abc”puts nil || “abc” # =&gt; “abc” puts true || “abc” # =&gt; trueputs “123” || “abc” # =&gt; “123” 一个更深入的例子： x ||= y #相当于x || x=y #而不是x = x||y #区别在于如果x存在且不为空时不会执行任何操作，直接返回。 #还相当于if defined? x x || x=yelse x = yend 内容整理自：http://rubyer.me/blog/568/]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native项目打包-Android]]></title>
    <url>%2F2016%2F10%2F12%2F45-react-native-bundle-android%2F</url>
    <content type="text"><![CDATA[1、生成签名秘钥 keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000 按照提示输入各项 完成后会在本目录下生成一个 .keystore 文件，将文件复制到项目的 android/app 目录下 2、gradle 文件配置 打开 android/app 目录下的 build.gradle 文件，添加以下内容 …android { … defaultConfig { … } signingConfigs { release { storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD } } buildTypes { release { … signingConfig signingConfigs.release } }}… MYAPP_RELEASE_STORE_FILE 等变量在 android 目录下的 gradle.properties 文件中配置 MYAPP_RELEASE_STORE_FILE=my-release-key.keystoreMYAPP_RELEASE_KEY_ALIAS=my-key-aliasMYAPP_RELEASE_STORE_PASSWORD=*MYAPP_RELEASE_KEY_PASSWORD=* 3、打包 在 android/app/src/main 目录下创建 assets 目录，然后回到项目的根目录，执行 react-native bundle –platform android –dev false –entry-file index.android.js –bundle-output android/app/src/main/assets/index.android.bundle –assets-dest android/app/src/main/res/ 然后回到 android 目录下，执行 ./gradlew assembleRelease 4、APK文件 文件在 android/app/build/outputs/apk 目录下 参考： https://facebook.github.io/react-native/docs/signed-apk-android.html http://www.jianshu.com/p/61e27d9b02f2]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页截图实现方案]]></title>
    <url>%2F2016%2F10%2F10%2F44-web-page-screenshot-solution%2F</url>
    <content type="text"><![CDATA[方案实现需要借助一个 js 插件：html2canvas 地址：https://html2canvas.hertzen.com/ 使用方法很简单，网页中加载html2canvas，然后 html2canvas(document.body, { onrendered: function(canvas) { document.body.appendChild(canvas); }}); onrendered 是截完图之后的 callback ，canvas是生成的 canvas 截图，通过 Canvas 的 toDataUrl 方法获得 base64 串，finished]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Canvas 制作仿脉脉企业名称 logo]]></title>
    <url>%2F2016%2F10%2F10%2F43-canvas-making-imitation-affectionately-company-name-logo%2F</url>
    <content type="text"><![CDATA[if(document.getElementById(‘nametoimg’)){ var text = “拙朴”; var textArr = text.split(‘’); var c = document.getElementById(‘nametoimg’); var ctx = c.getContext(‘2d’); ctx.fillStyle=’#fff’; /** 圆 ctx.beginPath(); ctx.arc(100,100,100,0,Math.PI2,true); ctx.closePath(); ctx.fill(); / ctx.fillRect(0,0,200,200); ctx.fillStyle=”#000”; switch(textArr.length){ case 2: ctx.font=”90px Arial”; ctx.fillText(textArr[0],10,130); ctx.fillText(textArr[1],105,130); break; case 3: ctx.font=”60px Arial”; ctx.fillText(textArr[0],10,120); ctx.fillText(textArr[1],70,120); ctx.fillText(textArr[2],130,120); break; case 4: ctx.font=”65px Arial”; ctx.fillText(textArr[0],30,85); ctx.fillText(textArr[1],110,85); ctx.fillText(textArr[2],30,160); ctx.fillText(textArr[3],110,160); break; } console.log(c.toDataURL()); } 制作原理非常简单，使用 Canvas 的 fillText 方法进行文字排版，然后用 toDataUrl 生成图片的 base64 串，即可以上传七牛 Ps 1、我这里只做了2、3、4个字的排版，可以自由拓展 2、注册企业都有一个简称，可以从一些官方渠道获得]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React native坑的集合—布局类]]></title>
    <url>%2F2016%2F08%2F12%2F42-react-layout-of-native-collection-class%2F</url>
    <content type="text"><![CDATA[1、lineHeight问题 当给 Text 组件设置 lineHeight 后，使用 flexDirection: ‘row’ 无法使两个组件水平排列]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native调试—Android]]></title>
    <url>%2F2016%2F08%2F09%2F41-react-native-debugging-android%2F</url>
    <content type="text"><![CDATA[前面有一篇iOS的调试指南，这次讲解的是Android的调试。 1、Android开发环境搭建 请查看官方文档的开发环境搭建，选择自己的开发平台：http://reactnative.cn/docs/0.31/getting-started.html#content 2、测试设备 （1）模拟器： android avd 指令打开模拟器管理器，然后新建打开模拟器 （2）真机： USB连接，然后打开开发者选项，开启USB调试 3、Log查看 （1）Stetho 官方推荐的调试工具，但是好像console不能使用 （2）使用终端 react-native log-android 指令能将全部log打印出来，自我感觉比stetho好用一些，但是没有在真机中测试过 4、注意的几点： （1）如果没有Android的开发经验，环境搭建一定要按照文档的操作来，尤其是 ANDROID_HOME 和 tools、platform-tools “环境变量”的设置，我在这里吃了很多亏，白白耗掉一天时间 （2）新建虚拟机一定要注意勾选 Use Host GPU （3）如果“小米”的真机作为调试设备，在开发者选项中一定要关闭 “MIUI优化”，其他如魅族、华为因为系统都是重置版的原因，多多少都会有一些问题 5、Bug集合 （1）Application ProjectName has not been registered. 解决方案：http://www.jianshu.com/p/82a09063e61c （2）:app:installDebug Failed to establish session 解决方案：这就是我在小米上遇到的问题，app-debug.apk安装不了，原因就是因为开启了 ”MIUI优化“ （3）adb not found 解决方案：安装Android Studio的时候这些环境变量都需要自己配置，按照文档将ANDROID_HOME和Tools的环境变量加入终端工具的 rc 文件中就好，我的是.zshrc，你可能使用.bash之类的 Bug和注意事项遇到之后就会更新，这次用Android调试学到了一件很重要的事情，一定要先看官方文档]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim操作篇]]></title>
    <url>%2F2016%2F07%2F23%2F40-vim-operation-review%2F</url>
    <content type="text"><![CDATA[gt切换tab]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim开始篇]]></title>
    <url>%2F2016%2F07%2F23%2F39-vim-start%2F</url>
    <content type="text"><![CDATA[关于Vim，就不做介绍了，太多，我选择用Vim原因，个人网站的后台只有我一个人做，所以打算直接服务器上写，Vim是Linux上一个不错的选择，于是乎~ 直接贴个人配置单： 1 set encoding=utf-8 “ 文件编码 2 set nocompatible “ 不要支持vi 3 set backspace=indent,eol,start “ 配置backspace工作方式 4 set nu “ 开启行号 5 set ruler “ 显示光标行列信息 6 set nowrap “ 取消换行 7 set showcmd “ 状态栏显示正在输入的命令 8 9 syntax enable 10 syntax on “ 语法高亮 11 12 set t_Co=256 “ 配色方案256色 13 set showmatch “ 设置匹配模式，括号匹配 14 set ignorecase “ 搜索时忽略大小写 15 16 set cursorline “ 突出显示当前行 17 set tabstop=2 “ 设置tab长度=2 18 colorscheme Tomorrow-Night “ 配色 19 20 “ 设置取消备份 禁止临时文件生成 21 set nobackup 22 set noswapfile 23 24 filetype off 25 26 set rtp+=~/.vim/bundle/Vundle.vim 27 call vundle#begin() 28 29 Plugin ‘VundleVim/Vundle.vim’ 30 Plugin ‘mattn/emmet-vim’ 31 Plugin ‘vim-scripts/L9’ 32 Plugin ‘majutsushi/tagbar’ 33 Plugin ‘scrooloose/nerdtree’ 34 Plugin ‘ivalkeen/nerdtree-execute’ 35 Plugin ‘tpope/vim-fugitive’ 36 Plugin ‘vim-scripts/taboo.vim’ 37 Plugin ‘vim-scripts/neocomplcache’ 38 Plugin ‘terryma/vim-multiple-cursors’ 39 Plugin ‘gregsexton/MatchTag’ 40 Plugin ‘vim-scripts/Syntastic’ 41 Plugin ‘Valloric/YouCompleteMe’ 42 43 call vundle#end() 44 filetype plugin indent on “ 加载插件和支持缩进]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CameraRoll（iOS）]]></title>
    <url>%2F2016%2F07%2F20%2F38-use-the-cameraroll-ios%2F</url>
    <content type="text"><![CDATA[import React, { Component } from ‘react’;import { StyleSheet, Text, View, TouchableOpacity, CameraRoll, Image, Dimensions,} from ‘react-native’;var screenWidth = Dimensions.get(‘window’).width;var image_url = ‘’;export default class ReleaseTab extends Component{ constructor(props) { super(props); this.state = { pageIndex: 0, images: [], fetchParams: { first: 5 } }; this.goPage0 = this.goPage0.bind(this); this.goPage1 = this.goPage1.bind(this); } goPage0(uri) { this.setState({ pageIndex: 0, }); image_url = uri; } goPage1() { this.setState({ pageIndex: 1 }); this.listImages(); } //使用CameraRoll显示本地图片 listImages() { CameraRoll.getPhotos(this.state.fetchParams) .then((data)=&gt;{ let assets = data.edges; let images = assets.map((asset) =&gt; asset.node.image); this.setState({ images: images, }); },(e)=&gt;{ console.log(err); }); } render() { switch(this.state.pageIndex){ case 0: return ( {image_url ? : 选择图片 } {image_url ? : 尚未选择图片 } ); break; case 1: return ( {this.state.images.map((image)=&gt; )} ); break;}}} const styles = StyleSheet.create({ container: { flex: 1, marginTop: 20, justifyContent: ‘flex-start’, alignItems: ‘center’, backgroundColor: ‘#F5FCFF’, }, imageGrid: { flex: 1, flexDirection: ‘row’, flexWrap: ‘wrap’, justifyContent: ‘center’ }, image: { width: 100, height: 100, margin: 10 }, btn__save: { marginTop: 10, width: screenWidth-10, backgroundColor: ‘#fc3’, borderRadius: 5, overflow: ‘hidden’ }, btn__save_text: { color: “#fff”, fontSize: 16, paddingTop: 10, paddingBottom: 10, textAlign: ‘center’ }, tip__text: { marginTop: 10, color: ‘#999’, fontSize: 14 }}); 遇到报错：Cannot read property ‘getPhotos’ of undefined 找寻原因，发现这是一个原生模块，需要自己添加 将node_modules/react-native/Libraries/CameraRoll下的RCTCameraRoll.xcodeproj文件加入项目的Libraries目录下，然后添加静态库依赖 添加方法： Build Phases -&gt; Link Binary With Libraries （对iOS开发来说很简单，但是我不知道呀 T_T…） 然后就可以正常使用 CameraRoll 组件了 issue地址：https://github.com/facebook/react-native/issues/3950]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native调试—iOS]]></title>
    <url>%2F2016%2F07%2F20%2F37-react-native-debugging-ios%2F</url>
    <content type="text"><![CDATA[开发环境搭建详细请看官方文档：https://reactnative.cn/docs/getting-started.html 项目运行基本开发方式使用Xcode打开目录中的 xxx.xcodeproj 项目文件，Command+R 或 点击运行按钮 运行项目，项目就会在模拟器中打开 使用CocoaPods在使用头像截取&amp;图片多选插件 react-native-iamge-crop-picker 时遇到这种情况，使用方法可以查看使用指南 https://github.com/ivpusic/react-native-image-crop-picker 调试模拟器使用Chrome，在模拟器下，Command+D弹出菜单，选择 “Remote JS Debug”，会自动弹出浏览器，通过开发者工具，可以查看调试 真机因为APP需要不停的需改，推荐在模拟器开发完成并且做好基本测试之后再到真机上运行，而且相比Android，iOS的模拟器做的太贴心了 实时刷新使用LiveReload实现实时刷新，首先在Chrome中安装LiveReload插件，然后在模拟器菜单中选择“Enable Live Reload”，就能够实现代码修改保存，模拟器自动刷新了 真机貌似不行 注意功能兼容如 image-crop-picker 插件用到 PhotoFrame，这个组件在ios7中不支持，但是只有iPhone4不能够升级系统，而且iPhone4的市场占有率目前已不足2%，可以考虑放弃 插件使用某些插件使用时需要引入库文件，建立静态链接，详细步骤可见：http://www.lcode.org/ 博客作者有很多不错的教程]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用zShell]]></title>
    <url>%2F2016%2F07%2F20%2F36-use-the-zshell%2F</url>
    <content type="text"><![CDATA[1.安装： sudo yum install zsh 或 sudo apt-get install zsh 2.将zsh作为默认shell： chsh -s /usr/local/bin/zsh 后面的路径可能因为系统的原因有所不同，可以使用 which zsh 查看路径 3.安装oh-my-zsh配置： wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 有系统可能没有wget，如Mac，请自行安装]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git忽略—.gitignore]]></title>
    <url>%2F2016%2F07%2F20%2F35-git-to-ignore-gitignore%2F</url>
    <content type="text"><![CDATA[在开发目录中，有的是专做为缓存使用，如ThinkPHP下的Runtime目录，在上传Git时并不需要将其上传，这时候就需要创建一个.gitignore文件，来忽略掉一些文件]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Mac上开启新的开发生涯]]></title>
    <url>%2F2016%2F06%2F30%2F34-on-mac-opens-new-development-career%2F</url>
    <content type="text"><![CDATA[毕业一年内就辗转了3家公司，如今是第4家。遭遇过公司破产，也尝试过转行游戏，也被海尔这种大企业坑过，如今终于踏踏实实的，在新的公司落脚了。公司环境、人都很不错，设备也换成了Mac，因为是前端，如愿以偿有了3屏的待遇。一直看各位geek拿Mac开发，今天也终于有了。 这一年中都保持着不错的学习态度，没有迷失在前端的茫茫大海中，如今又进入了Rails的新海域，希望自己继续奋发向前，不忘初心，以前端架构师为目标加倍努力。 谨以此文纪念毕业一周年。]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Guard-livereload实现浏览器自动刷新]]></title>
    <url>%2F2016%2F06%2F30%2F33-use-guard-livereload-for-automatic-browser-refresh%2F</url>
    <content type="text"><![CDATA[1、安装Guard gem install guard 2、安装guard-livereload 可以使用Gemfile安装 group :development do gem ‘guard-livereload’, ‘~&gt; 2.5’, require: falseend 或者直接 gem install guard-livereload 3、配置Guardfile文件 bundle exec guard init 将生成Guardfile，在文件中写入文件的监听项 guard ‘livereload’ do watch(%r{app/views/.+\.(erb|haml|slim)$}) watch(%r{app/helpers/.+\.rb}) watch(%r{public/.+\.(css|js|html)}) watch(%r{config/locales/.+\.yml}) Rails Assets Pipeline watch(%r{(app|vendor)(/assets/\w+/(.+\.(css|js|html|png|jpg))).*}) { |m| “/assets/#{m[3]}” }end 4、配置浏览器 使用chrome安装livereload插件，暂时我只用过chrome，其他如firefox、Safari也有各自的配置，请自行查看 5、开启浏览器自动刷新 (1)启动guard bundle exec guard start (2)开启服务器 bundle exec rails s (3)打开浏览器，开启新的标签，点击右上角插件栏中的livereload的图标，中间圆点变黑，刷入访问地址，一般为localhost:3000，端口号可以自己配置 之后修改文件保存后浏览器就能自动刷新，对于前端的同学用处极大，再也不用一遍一遍的刷新浏览器了\(^o^)/~，当然，这是使用rails开发的配置，基于node的话可以使用gulp browser-sync实现，有专门的文章介绍，不过以sass来说，node-sass的实现比起ruby下的实在难用]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>gurad</tag>
        <tag>livereload</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Pad2序列号]]></title>
    <url>%2F2016%2F06%2F07%2F32-markdown-pad2-serial-number%2F</url>
    <content type="text"><![CDATA[E-mail Soar360@live.com Key GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 亲测可用]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[package.json语法]]></title>
    <url>%2F2016%2F05%2F30%2F31-package-json-syntax%2F</url>
    <content type="text"><![CDATA[version 严格匹配某个版本 version 必须大于某个版本=version &lt;version&lt;=version~version 大概匹配某个版本^version 兼容某个版本1.2.x 可以是1.2.0, 1.2.1等等，但不能是1.3.0http://… 指定tarball的url地址 任何版本都可以“” 同上version1-version2 &gt;=version1 &lt;=version2range1 || range2 满足range1 或range2git://… git 地址user/repo 同上tag 指定某个tag的版本path/path 本地包所有文件夹]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Grunt插件]]></title>
    <url>%2F2016%2F05%2F30%2F30-grunt-plug-in%2F</url>
    <content type="text"><![CDATA[1、uglify 2、jshint 3、watch 4、clean 5、copy 6、concat]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>grunt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Grunt入门]]></title>
    <url>%2F2016%2F05%2F30%2F29-grunt-getting-started%2F</url>
    <content type="text"><![CDATA[1、简介 JavaScript 世界的构建工具 2、依赖环境 Node安装 3、安装 4、基本使用指南 package.json Gruntfile.js]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>grunt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人前端开发工具清单]]></title>
    <url>%2F2016%2F05%2F23%2F28-personal-front-end-development-tools-list%2F</url>
    <content type="text"><![CDATA[图片处理：Ps、Fw 图片压缩：Caesium H5视频格式转化：WebMEncoder 文本编辑器：Sublime Text、Brackets、Notepad++ 服务器连接：Xshell、Xftp 数据库连接：Navicat 文档：Markdown Pad 笔记：有道云 录制：LICEcap 代码压缩：Koala 版本控制：Git、SVN 服务器：USBWebserver 环境配置：Ruby、Node 其他：Faststone Capture]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[阻止事件冒泡—stopProgapation]]></title>
    <url>%2F2016%2F05%2F19%2F27-preventing-event-bubbling-stopprogapation%2F</url>
    <content type="text"><![CDATA[在开发中经常会遇到事件冒泡的处理，如点击别处隐藏菜单，正常的处理方法： event.stopPropagation(); 但是在IE8中并不支持，方法改写成这样： function stopProgapation(e){ e = e || window.event; if(e.stopPropagation){ e.stopPropagation(); }else{ e.cancelBubble = true; }} 在IE8中识别的是cancelBubble，默认为false，将其设置为true即可。 其中要注意的一点，传入方法的事件要做兼容处理，e=e||window.event，刚刚被坑了 T_T…]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE中使用getElementsByTagName Bug]]></title>
    <url>%2F2016%2F05%2F19%2F26-use-getelementsbytagname-ie-bug%2F</url>
    <content type="text"><![CDATA[错误代码： var div = document.createElement(‘div’);div.className = ‘address-box’;div.innerHTML = // 请选择安装地点 ‘‘+ ‘省‘+ ‘市‘+ ‘县区‘+ ‘‘+ ‘‘+ ‘‘+ ‘‘;var tabs = getElementsByClassName(div,’address-tab’)[0].getElementsByTagName(‘li’);document.body.appendChild(div); 这段代码在chrome中运行时没有问题的，而且之所以将代码写成这样的顺序就是为了减少渲染，但是代码在IE中运行却会出现问题，IE文档解释： This problem occurs because the GetElementsByTagName method returns an XmlNodeList collection that registers listeners on the NodeInserted and the NodeRemoved events. For example, when you call the GetElementsByTagName method ten times, the NodeInserted and the NodeRemoved events have ten listeners. Therefore, when you call the GetElementsByTagName method multiple times, the process of inserting and removing nodes is delayed. 原因是索要获取的元素未加入文档流。 改正： document.body.appendChild(div);var tabs = getElementsByClassName(div,’address-tab’)[0].getElementsByTagName(‘li’); 但是这样子后面的一些元素操作都刷新document，消耗了浏览器资源……]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdownpad——在windows定制自己的markdown编辑器]]></title>
    <url>%2F2016%2F05%2F17%2F25-markdownpad-in-the-windows-customizing-your-own-markdown-editor%2F</url>
    <content type="text"><![CDATA[Markdownpad是一款markdown编辑器，有windows版本。其包含两个版本，免费版和付费的Pro版，Pro版拥有诸多功能。 条件允许的同学可以选择支持正版，同时也有破解版以及一些开放的注册码，可以自己找以下。 在这里分享一些定制的方法。 1、在HTML导出目录 工具&gt;选项&gt;高级&gt;HTML Head编辑器，在其中插入js代码： document.addEventListener("DOMContentLoaded", function() { // 生成目录列表 var outline = document.createElement("ul"); outline.setAttribute("id", "outline-list"); outline.style.cssText = "border: 1px solid #ccc;"; document.body.insertBefore(outline, document.body.childNodes\[0\]); // 获取所有标题 var headers = document.querySelectorAll('h1,h2,h3,h4,h5,h6'); for (var i = 0; i < headers.length; i++) { var header = headers\[i\]; var hash = _hashCode(header.textContent); // MarkdownPad2无法为中文header正确生成id，这里生成一个 header.setAttribute("id", header.tagName + hash); // 找出它是H几，为后面前置空格准备 var prefix = parseInt(header.tagName.replace('H', ''), 10); outline.appendChild(document.createElement("li")); var a = document.createElement("a"); // 为目录项设置链接 a.setAttribute("href", "#" + header.tagName + hash) // 目录项文本前面放置对应的空格 a.innerHTML = header.textContent; a.style.marginLeft = (prefix-1)*20 + 'px'; outline.lastChild.appendChild(a); } }); // 类似Java的hash生成方式，为一段文字生成一段基本不会重复的数字 function _hashCode(txt) { var hash = 0; if (txt.length == 0) return hash; for (i = 0; i < txt.length; i++) { char = txt.charCodeAt(i); hash = ((hash]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows cmd不好用怎么办]]></title>
    <url>%2F2016%2F05%2F10%2F24-windows-cmd-is-not-working-what-to-do%2F</url>
    <content type="text"><![CDATA[开发者肯定常用到命令行工具，但是大部分公司不会给开发者配备一台Mac（吐槽一下现在在的公司，让开发自己带电脑，我用的是上大学的时候买的那台老机器，写前端T_T，坑），大部分用的是Windows。在Windows下，我们可以借用Git bash，其中整合了bash shell，又可以愉快的使用shell了。]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grunt-contrib-less配置]]></title>
    <url>%2F2016%2F05%2F09%2F23-grunt-contrib-less-configuration%2F</url>
    <content type="text"></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>grunt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text 3 插件]]></title>
    <url>%2F2016%2F05%2F07%2F22-sublime-text-3-plugin%2F</url>
    <content type="text"><![CDATA[首先安装Package Control ctrl+`调出控制台输入： import urllib.request,os,hashlib; h = ‘2915d1851351e5ee549c20394736b442’ + ‘8bc59f460fa1548d1514676163dafc88’; pf = ‘Package Control.sublime-package’; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( ‘http://packagecontrol.io/&#39; + pf.replace(‘ ‘, ‘%20’)).read(); dh = hashlib.sha256(by).hexdigest(); print(‘Error validating download (got %s instead of %s), please try manual install’ % (dh, h)) if dh != h else open(os.path.join( ipp, pf), ‘wb’ ).write(by) 然后，其他插件 ConvertToUTF8 Bracket Highlighter DocBlockr Emmet(Zen Coding) SideBar Enhancements Themr SublimeLinter Sublime CodeIntel ColorPicker TrailingSpaces AutoPrefixer]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text 3 注册码]]></title>
    <url>%2F2016%2F05%2F07%2F21-sublime-text-3-registration-code%2F</url>
    <content type="text"><![CDATA[—– BEGIN LICENSE —–Alexey PlutalovSingle User LicenseEA7E-8607763DC19CC1 134CDF23 504DC871 2DE5CE55585DC8A6 253BB0D9 637C87A2 D8D0BA85AAE574AD BA7D6DA9 2B9773F2 324C5DEF17830A4E FBCF9D1D 182406E9 F883EA87E585BBA1 2538C270 E2E857C2 194283CA7234FF9E D0392F93 1D16E021 F191491763909E12 203C0169 3F08FFC8 86D06EA873DDAEF0 AC559F30 A6A67947 B60104C6—— END LICENSE ——]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git强制覆盖本地]]></title>
    <url>%2F2016%2F05%2F05%2F20-git-and-forces-an-overwrite-local%2F</url>
    <content type="text"><![CDATA[git fetch –allgit reset –hard origin/master]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[inline-block]]></title>
    <url>%2F2016%2F05%2F04%2F19-inline-block%2F</url>
    <content type="text"><![CDATA[display:inline-block]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css&amp;amp;3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML meta]]></title>
    <url>%2F2016%2F05%2F04%2F18-html-meta%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>html&amp;amp;5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django]]></title>
    <url>%2F2016%2F05%2F04%2F17-django%2F</url>
    <content type="text"><![CDATA[1、介绍 Python流行框架之一，旨在快速Web开发。]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python开发环境配置]]></title>
    <url>%2F2016%2F05%2F04%2F16-python-development-environment-configuration%2F</url>
    <content type="text"><![CDATA[1、Python介绍 2、安装 3、Hello World!]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkPHP]]></title>
    <url>%2F2016%2F05%2F04%2F15-thinkphp%2F</url>
    <content type="text"><![CDATA[1、介绍 PHP国内流行的框架之一]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP开发环境配置]]></title>
    <url>%2F2016%2F05%2F04%2F14-php-development-environment-configuration%2F</url>
    <content type="text"><![CDATA[1、PHP介绍 世界上最好的语言~ 2、安装 3、LAMP]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby开发环境配置]]></title>
    <url>%2F2016%2F05%2F04%2F13-ruby-development-environment-configuration%2F</url>
    <content type="text"><![CDATA[1、Ruby介绍 2、安装(Mac) (1)预备 安装Xcode，需要打开一次并且同意开发协议 (2)安装Homebrew(MacOs工具包管理器) ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; (3)安装Ruby 可以通过Homebrew来安装 brew install ruby 也可以通过rvm安装，rvm是ruby的版本管理器 安装rvm curl -sSL https://get.rvm.io | bash -s stable 然后通过rvm安装ruby rvm install 3、Hello World! 4、Ruby on Rails]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node开发环境配置]]></title>
    <url>%2F2016%2F05%2F04%2F12-node-development-environment-configuration%2F</url>
    <content type="text"><![CDATA[1、NodeJS介绍 2、安装 3、套件管理—NPM 4、Express 5、创建第一个Express项目]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PhoneGap简介]]></title>
    <url>%2F2016%2F05%2F02%2F11-introduction-to-phonegap%2F</url>
    <content type="text"><![CDATA[hybrid开发较流行框架之一，可以将Web文件打包成Android或iOS APP。]]></content>
      <categories>
        <category>移动开发</category>
      </categories>
      <tags>
        <tag>phonegap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当前电脑的配置]]></title>
    <url>%2F2016%2F05%2F02%2F10-the-current-computer-configuration%2F</url>
    <content type="text"><![CDATA[i5 4590 R9 380]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务器搭建Centos7_64:Nginx+PHP+MySQL]]></title>
    <url>%2F2016%2F05%2F02%2F9-server-build-centos7-64nginxphpmysql%2F</url>
    <content type="text"><![CDATA[我选择的服务器环境是Nginx，PHP，MySQL。 ##Nginx ##PHP ##MySQL]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Defence of the Ancient（DOTA）]]></title>
    <url>%2F2016%2F05%2F02%2F8-defence-of-the-ancientdota%2F</url>
    <content type="text"><![CDATA[5.72f开始接触，现在已经6.87b了。]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[沁苑，华科，武汉]]></title>
    <url>%2F2016%2F05%2F02%2F7-qin-yuan-huake-wuhan%2F</url>
    <content type="text"><![CDATA[2015年夏，告别四年大学生活，离开学校，踏入社会，虽已毕业一年，看到在校读研所发的学校照片，一草一木，依然是那么熟悉，也许是离开太久，真的是好想念那个地方，那些人呀。]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jQuery插件书写规范]]></title>
    <url>%2F2016%2F05%2F01%2F6-jquery-plugin-writing-specifications%2F</url>
    <content type="text"><![CDATA[(function($){ })(jquery)]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始写博客啦]]></title>
    <url>%2F2016%2F05%2F01%2F5-start-a-blog%2F</url>
    <content type="text"><![CDATA[新年之初，下定决心购买自己的服务器，准备整理自己的前端作品，以及记录学习中的问题。前端大部分作品已经整理上线（dreamser.com），博客先后用Wordpress、Typecho，都存在一些服务器问题，浪费了很多时间，终于在这两天上线，国内服务器好贵，肉疼…… 所以要利用好这个平台，让自己的技术更上一层楼]]></content>
      <categories>
        <category>生活小感</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Safari事件冒泡处理机制]]></title>
    <url>%2F2016%2F05%2F01%2F4-safari-event-bubbling-mechanism%2F</url>
    <content type="text"><![CDATA[在IE渐渐淡出浏览器世界之后，Safari因为iOS庞大的用户数量，成为了前端最头痛的浏览器，虽然他对于新的技术也是有所支持，但是在有的内容上面还是有所缺陷（也许他自认为完美），事件冒泡的处理机制就是其中之一。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Canvas简介]]></title>
    <url>%2F2016%2F05%2F01%2F3-introduction-to-canvas%2F</url>
    <content type="text"><![CDATA[HTML5开放的功能之一，开辟了新的Web领域——游戏、动画。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文本编辑器—Sublime Text]]></title>
    <url>%2F2016%2F05%2F01%2F2-the-text-editor-sublime-text%2F</url>
    <content type="text"><![CDATA[最流行的文本编辑器之一，拥有丰富的插件资源。 官网地址：http://www.sublimetext.com/3]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git使用指南]]></title>
    <url>%2F2016%2F05%2F01%2F1-git-guidelines%2F</url>
    <content type="text"><![CDATA[分布式代码版本管理工具，适用于多人协作，也有如Github类的代码管理、分享的网站。 123456git init // 初始化本地库git remote add origin &lt;repo address&gt; // 连接远程库git add .git commit -a -m &apos;comment&apos;git pull origin mastergit push origin master]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
